
test1234.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005824  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000224  080058e4  080058e4  000158e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b08  08005b08  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08005b08  08005b08  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005b08  08005b08  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b08  08005b08  00015b08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b0c  08005b0c  00015b0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08005b10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b4  2000006c  08005b7c  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000320  08005b7c  00020320  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011382  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002234  00000000  00000000  00031459  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fe8  00000000  00000000  00033690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c99  00000000  00000000  00034678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001563d  00000000  00000000  00035311  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013ffc  00000000  00000000  0004a94e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00084958  00000000  00000000  0005e94a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004428  00000000  00000000  000e32a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000e76cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000006c 	.word	0x2000006c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080058cc 	.word	0x080058cc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000070 	.word	0x20000070
 8000104:	080058cc 	.word	0x080058cc

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_fadd>:
 8000234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000236:	4647      	mov	r7, r8
 8000238:	46ce      	mov	lr, r9
 800023a:	024a      	lsls	r2, r1, #9
 800023c:	0243      	lsls	r3, r0, #9
 800023e:	0045      	lsls	r5, r0, #1
 8000240:	0fc4      	lsrs	r4, r0, #31
 8000242:	0a50      	lsrs	r0, r2, #9
 8000244:	4680      	mov	r8, r0
 8000246:	0048      	lsls	r0, r1, #1
 8000248:	0a5b      	lsrs	r3, r3, #9
 800024a:	0e00      	lsrs	r0, r0, #24
 800024c:	0992      	lsrs	r2, r2, #6
 800024e:	4694      	mov	ip, r2
 8000250:	b580      	push	{r7, lr}
 8000252:	001e      	movs	r6, r3
 8000254:	4681      	mov	r9, r0
 8000256:	0002      	movs	r2, r0
 8000258:	0e2d      	lsrs	r5, r5, #24
 800025a:	00df      	lsls	r7, r3, #3
 800025c:	0fc9      	lsrs	r1, r1, #31
 800025e:	428c      	cmp	r4, r1
 8000260:	d024      	beq.n	80002ac <__aeabi_fadd+0x78>
 8000262:	1a28      	subs	r0, r5, r0
 8000264:	2800      	cmp	r0, #0
 8000266:	dd0e      	ble.n	8000286 <__aeabi_fadd+0x52>
 8000268:	2a00      	cmp	r2, #0
 800026a:	d13e      	bne.n	80002ea <__aeabi_fadd+0xb6>
 800026c:	4662      	mov	r2, ip
 800026e:	2a00      	cmp	r2, #0
 8000270:	d100      	bne.n	8000274 <__aeabi_fadd+0x40>
 8000272:	e0fd      	b.n	8000470 <__aeabi_fadd+0x23c>
 8000274:	1e42      	subs	r2, r0, #1
 8000276:	2801      	cmp	r0, #1
 8000278:	d100      	bne.n	800027c <__aeabi_fadd+0x48>
 800027a:	e137      	b.n	80004ec <__aeabi_fadd+0x2b8>
 800027c:	28ff      	cmp	r0, #255	; 0xff
 800027e:	d100      	bne.n	8000282 <__aeabi_fadd+0x4e>
 8000280:	e0a9      	b.n	80003d6 <__aeabi_fadd+0x1a2>
 8000282:	0010      	movs	r0, r2
 8000284:	e039      	b.n	80002fa <__aeabi_fadd+0xc6>
 8000286:	2800      	cmp	r0, #0
 8000288:	d063      	beq.n	8000352 <__aeabi_fadd+0x11e>
 800028a:	464b      	mov	r3, r9
 800028c:	1b52      	subs	r2, r2, r5
 800028e:	2d00      	cmp	r5, #0
 8000290:	d000      	beq.n	8000294 <__aeabi_fadd+0x60>
 8000292:	e0e0      	b.n	8000456 <__aeabi_fadd+0x222>
 8000294:	2f00      	cmp	r7, #0
 8000296:	d100      	bne.n	800029a <__aeabi_fadd+0x66>
 8000298:	e0ce      	b.n	8000438 <__aeabi_fadd+0x204>
 800029a:	1e53      	subs	r3, r2, #1
 800029c:	2a01      	cmp	r2, #1
 800029e:	d100      	bne.n	80002a2 <__aeabi_fadd+0x6e>
 80002a0:	e155      	b.n	800054e <__aeabi_fadd+0x31a>
 80002a2:	2aff      	cmp	r2, #255	; 0xff
 80002a4:	d100      	bne.n	80002a8 <__aeabi_fadd+0x74>
 80002a6:	e094      	b.n	80003d2 <__aeabi_fadd+0x19e>
 80002a8:	001a      	movs	r2, r3
 80002aa:	e0d9      	b.n	8000460 <__aeabi_fadd+0x22c>
 80002ac:	1a2a      	subs	r2, r5, r0
 80002ae:	2a00      	cmp	r2, #0
 80002b0:	dc00      	bgt.n	80002b4 <__aeabi_fadd+0x80>
 80002b2:	e099      	b.n	80003e8 <__aeabi_fadd+0x1b4>
 80002b4:	2800      	cmp	r0, #0
 80002b6:	d062      	beq.n	800037e <__aeabi_fadd+0x14a>
 80002b8:	2dff      	cmp	r5, #255	; 0xff
 80002ba:	d100      	bne.n	80002be <__aeabi_fadd+0x8a>
 80002bc:	e08b      	b.n	80003d6 <__aeabi_fadd+0x1a2>
 80002be:	2380      	movs	r3, #128	; 0x80
 80002c0:	4661      	mov	r1, ip
 80002c2:	04db      	lsls	r3, r3, #19
 80002c4:	4319      	orrs	r1, r3
 80002c6:	468c      	mov	ip, r1
 80002c8:	2a1b      	cmp	r2, #27
 80002ca:	dc00      	bgt.n	80002ce <__aeabi_fadd+0x9a>
 80002cc:	e0d2      	b.n	8000474 <__aeabi_fadd+0x240>
 80002ce:	2301      	movs	r3, #1
 80002d0:	19db      	adds	r3, r3, r7
 80002d2:	015a      	lsls	r2, r3, #5
 80002d4:	d56a      	bpl.n	80003ac <__aeabi_fadd+0x178>
 80002d6:	3501      	adds	r5, #1
 80002d8:	2dff      	cmp	r5, #255	; 0xff
 80002da:	d05b      	beq.n	8000394 <__aeabi_fadd+0x160>
 80002dc:	2201      	movs	r2, #1
 80002de:	49a3      	ldr	r1, [pc, #652]	; (800056c <__aeabi_fadd+0x338>)
 80002e0:	401a      	ands	r2, r3
 80002e2:	085b      	lsrs	r3, r3, #1
 80002e4:	400b      	ands	r3, r1
 80002e6:	4313      	orrs	r3, r2
 80002e8:	e01c      	b.n	8000324 <__aeabi_fadd+0xf0>
 80002ea:	2dff      	cmp	r5, #255	; 0xff
 80002ec:	d100      	bne.n	80002f0 <__aeabi_fadd+0xbc>
 80002ee:	e072      	b.n	80003d6 <__aeabi_fadd+0x1a2>
 80002f0:	2380      	movs	r3, #128	; 0x80
 80002f2:	4662      	mov	r2, ip
 80002f4:	04db      	lsls	r3, r3, #19
 80002f6:	431a      	orrs	r2, r3
 80002f8:	4694      	mov	ip, r2
 80002fa:	281b      	cmp	r0, #27
 80002fc:	dc00      	bgt.n	8000300 <__aeabi_fadd+0xcc>
 80002fe:	e090      	b.n	8000422 <__aeabi_fadd+0x1ee>
 8000300:	2301      	movs	r3, #1
 8000302:	1afb      	subs	r3, r7, r3
 8000304:	015a      	lsls	r2, r3, #5
 8000306:	d551      	bpl.n	80003ac <__aeabi_fadd+0x178>
 8000308:	019b      	lsls	r3, r3, #6
 800030a:	099e      	lsrs	r6, r3, #6
 800030c:	0030      	movs	r0, r6
 800030e:	f001 fb57 	bl	80019c0 <__clzsi2>
 8000312:	0033      	movs	r3, r6
 8000314:	3805      	subs	r0, #5
 8000316:	4083      	lsls	r3, r0
 8000318:	4285      	cmp	r5, r0
 800031a:	dc00      	bgt.n	800031e <__aeabi_fadd+0xea>
 800031c:	e075      	b.n	800040a <__aeabi_fadd+0x1d6>
 800031e:	4a94      	ldr	r2, [pc, #592]	; (8000570 <__aeabi_fadd+0x33c>)
 8000320:	1a2d      	subs	r5, r5, r0
 8000322:	4013      	ands	r3, r2
 8000324:	075a      	lsls	r2, r3, #29
 8000326:	d004      	beq.n	8000332 <__aeabi_fadd+0xfe>
 8000328:	220f      	movs	r2, #15
 800032a:	401a      	ands	r2, r3
 800032c:	2a04      	cmp	r2, #4
 800032e:	d000      	beq.n	8000332 <__aeabi_fadd+0xfe>
 8000330:	3304      	adds	r3, #4
 8000332:	015a      	lsls	r2, r3, #5
 8000334:	d53c      	bpl.n	80003b0 <__aeabi_fadd+0x17c>
 8000336:	1c68      	adds	r0, r5, #1
 8000338:	2dfe      	cmp	r5, #254	; 0xfe
 800033a:	d02b      	beq.n	8000394 <__aeabi_fadd+0x160>
 800033c:	019b      	lsls	r3, r3, #6
 800033e:	0a5e      	lsrs	r6, r3, #9
 8000340:	b2c0      	uxtb	r0, r0
 8000342:	05c0      	lsls	r0, r0, #23
 8000344:	4330      	orrs	r0, r6
 8000346:	07e4      	lsls	r4, r4, #31
 8000348:	4320      	orrs	r0, r4
 800034a:	bcc0      	pop	{r6, r7}
 800034c:	46b9      	mov	r9, r7
 800034e:	46b0      	mov	r8, r6
 8000350:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000352:	20fe      	movs	r0, #254	; 0xfe
 8000354:	1c6a      	adds	r2, r5, #1
 8000356:	4210      	tst	r0, r2
 8000358:	d172      	bne.n	8000440 <__aeabi_fadd+0x20c>
 800035a:	2d00      	cmp	r5, #0
 800035c:	d000      	beq.n	8000360 <__aeabi_fadd+0x12c>
 800035e:	e0ae      	b.n	80004be <__aeabi_fadd+0x28a>
 8000360:	2f00      	cmp	r7, #0
 8000362:	d100      	bne.n	8000366 <__aeabi_fadd+0x132>
 8000364:	e0ec      	b.n	8000540 <__aeabi_fadd+0x30c>
 8000366:	4663      	mov	r3, ip
 8000368:	2000      	movs	r0, #0
 800036a:	2b00      	cmp	r3, #0
 800036c:	d0e9      	beq.n	8000342 <__aeabi_fadd+0x10e>
 800036e:	1afb      	subs	r3, r7, r3
 8000370:	015a      	lsls	r2, r3, #5
 8000372:	d400      	bmi.n	8000376 <__aeabi_fadd+0x142>
 8000374:	e0f3      	b.n	800055e <__aeabi_fadd+0x32a>
 8000376:	4663      	mov	r3, ip
 8000378:	000c      	movs	r4, r1
 800037a:	1bdb      	subs	r3, r3, r7
 800037c:	e7d2      	b.n	8000324 <__aeabi_fadd+0xf0>
 800037e:	4661      	mov	r1, ip
 8000380:	2900      	cmp	r1, #0
 8000382:	d05b      	beq.n	800043c <__aeabi_fadd+0x208>
 8000384:	1e51      	subs	r1, r2, #1
 8000386:	2a01      	cmp	r2, #1
 8000388:	d100      	bne.n	800038c <__aeabi_fadd+0x158>
 800038a:	e0a7      	b.n	80004dc <__aeabi_fadd+0x2a8>
 800038c:	2aff      	cmp	r2, #255	; 0xff
 800038e:	d022      	beq.n	80003d6 <__aeabi_fadd+0x1a2>
 8000390:	000a      	movs	r2, r1
 8000392:	e799      	b.n	80002c8 <__aeabi_fadd+0x94>
 8000394:	20ff      	movs	r0, #255	; 0xff
 8000396:	2600      	movs	r6, #0
 8000398:	e7d3      	b.n	8000342 <__aeabi_fadd+0x10e>
 800039a:	21fe      	movs	r1, #254	; 0xfe
 800039c:	1c6a      	adds	r2, r5, #1
 800039e:	4211      	tst	r1, r2
 80003a0:	d073      	beq.n	800048a <__aeabi_fadd+0x256>
 80003a2:	2aff      	cmp	r2, #255	; 0xff
 80003a4:	d0f6      	beq.n	8000394 <__aeabi_fadd+0x160>
 80003a6:	0015      	movs	r5, r2
 80003a8:	4467      	add	r7, ip
 80003aa:	087b      	lsrs	r3, r7, #1
 80003ac:	075a      	lsls	r2, r3, #29
 80003ae:	d1bb      	bne.n	8000328 <__aeabi_fadd+0xf4>
 80003b0:	08db      	lsrs	r3, r3, #3
 80003b2:	2dff      	cmp	r5, #255	; 0xff
 80003b4:	d00f      	beq.n	80003d6 <__aeabi_fadd+0x1a2>
 80003b6:	025b      	lsls	r3, r3, #9
 80003b8:	0a5e      	lsrs	r6, r3, #9
 80003ba:	b2e8      	uxtb	r0, r5
 80003bc:	e7c1      	b.n	8000342 <__aeabi_fadd+0x10e>
 80003be:	4662      	mov	r2, ip
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	d008      	beq.n	80003d6 <__aeabi_fadd+0x1a2>
 80003c4:	2280      	movs	r2, #128	; 0x80
 80003c6:	03d2      	lsls	r2, r2, #15
 80003c8:	4213      	tst	r3, r2
 80003ca:	d004      	beq.n	80003d6 <__aeabi_fadd+0x1a2>
 80003cc:	4640      	mov	r0, r8
 80003ce:	4210      	tst	r0, r2
 80003d0:	d101      	bne.n	80003d6 <__aeabi_fadd+0x1a2>
 80003d2:	000c      	movs	r4, r1
 80003d4:	4643      	mov	r3, r8
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d0dc      	beq.n	8000394 <__aeabi_fadd+0x160>
 80003da:	2680      	movs	r6, #128	; 0x80
 80003dc:	03f6      	lsls	r6, r6, #15
 80003de:	431e      	orrs	r6, r3
 80003e0:	0276      	lsls	r6, r6, #9
 80003e2:	20ff      	movs	r0, #255	; 0xff
 80003e4:	0a76      	lsrs	r6, r6, #9
 80003e6:	e7ac      	b.n	8000342 <__aeabi_fadd+0x10e>
 80003e8:	2a00      	cmp	r2, #0
 80003ea:	d0d6      	beq.n	800039a <__aeabi_fadd+0x166>
 80003ec:	1b42      	subs	r2, r0, r5
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d05c      	beq.n	80004ac <__aeabi_fadd+0x278>
 80003f2:	28ff      	cmp	r0, #255	; 0xff
 80003f4:	d0ee      	beq.n	80003d4 <__aeabi_fadd+0x1a0>
 80003f6:	2380      	movs	r3, #128	; 0x80
 80003f8:	04db      	lsls	r3, r3, #19
 80003fa:	431f      	orrs	r7, r3
 80003fc:	2a1b      	cmp	r2, #27
 80003fe:	dc00      	bgt.n	8000402 <__aeabi_fadd+0x1ce>
 8000400:	e082      	b.n	8000508 <__aeabi_fadd+0x2d4>
 8000402:	2301      	movs	r3, #1
 8000404:	464d      	mov	r5, r9
 8000406:	4463      	add	r3, ip
 8000408:	e763      	b.n	80002d2 <__aeabi_fadd+0x9e>
 800040a:	2220      	movs	r2, #32
 800040c:	1b40      	subs	r0, r0, r5
 800040e:	3001      	adds	r0, #1
 8000410:	1a12      	subs	r2, r2, r0
 8000412:	0019      	movs	r1, r3
 8000414:	4093      	lsls	r3, r2
 8000416:	40c1      	lsrs	r1, r0
 8000418:	1e5a      	subs	r2, r3, #1
 800041a:	4193      	sbcs	r3, r2
 800041c:	2500      	movs	r5, #0
 800041e:	430b      	orrs	r3, r1
 8000420:	e780      	b.n	8000324 <__aeabi_fadd+0xf0>
 8000422:	2320      	movs	r3, #32
 8000424:	4661      	mov	r1, ip
 8000426:	1a1b      	subs	r3, r3, r0
 8000428:	4099      	lsls	r1, r3
 800042a:	4662      	mov	r2, ip
 800042c:	000b      	movs	r3, r1
 800042e:	40c2      	lsrs	r2, r0
 8000430:	1e59      	subs	r1, r3, #1
 8000432:	418b      	sbcs	r3, r1
 8000434:	4313      	orrs	r3, r2
 8000436:	e764      	b.n	8000302 <__aeabi_fadd+0xce>
 8000438:	000c      	movs	r4, r1
 800043a:	4643      	mov	r3, r8
 800043c:	0015      	movs	r5, r2
 800043e:	e7b8      	b.n	80003b2 <__aeabi_fadd+0x17e>
 8000440:	4663      	mov	r3, ip
 8000442:	1afe      	subs	r6, r7, r3
 8000444:	0173      	lsls	r3, r6, #5
 8000446:	d445      	bmi.n	80004d4 <__aeabi_fadd+0x2a0>
 8000448:	2e00      	cmp	r6, #0
 800044a:	d000      	beq.n	800044e <__aeabi_fadd+0x21a>
 800044c:	e75e      	b.n	800030c <__aeabi_fadd+0xd8>
 800044e:	2400      	movs	r4, #0
 8000450:	2000      	movs	r0, #0
 8000452:	2600      	movs	r6, #0
 8000454:	e775      	b.n	8000342 <__aeabi_fadd+0x10e>
 8000456:	2bff      	cmp	r3, #255	; 0xff
 8000458:	d0bb      	beq.n	80003d2 <__aeabi_fadd+0x19e>
 800045a:	2380      	movs	r3, #128	; 0x80
 800045c:	04db      	lsls	r3, r3, #19
 800045e:	431f      	orrs	r7, r3
 8000460:	2a1b      	cmp	r2, #27
 8000462:	dd47      	ble.n	80004f4 <__aeabi_fadd+0x2c0>
 8000464:	2301      	movs	r3, #1
 8000466:	4662      	mov	r2, ip
 8000468:	000c      	movs	r4, r1
 800046a:	464d      	mov	r5, r9
 800046c:	1ad3      	subs	r3, r2, r3
 800046e:	e749      	b.n	8000304 <__aeabi_fadd+0xd0>
 8000470:	0005      	movs	r5, r0
 8000472:	e79e      	b.n	80003b2 <__aeabi_fadd+0x17e>
 8000474:	4661      	mov	r1, ip
 8000476:	2320      	movs	r3, #32
 8000478:	40d1      	lsrs	r1, r2
 800047a:	1a9b      	subs	r3, r3, r2
 800047c:	4662      	mov	r2, ip
 800047e:	409a      	lsls	r2, r3
 8000480:	0013      	movs	r3, r2
 8000482:	1e5a      	subs	r2, r3, #1
 8000484:	4193      	sbcs	r3, r2
 8000486:	430b      	orrs	r3, r1
 8000488:	e722      	b.n	80002d0 <__aeabi_fadd+0x9c>
 800048a:	2d00      	cmp	r5, #0
 800048c:	d146      	bne.n	800051c <__aeabi_fadd+0x2e8>
 800048e:	2f00      	cmp	r7, #0
 8000490:	d062      	beq.n	8000558 <__aeabi_fadd+0x324>
 8000492:	4663      	mov	r3, ip
 8000494:	2000      	movs	r0, #0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d100      	bne.n	800049c <__aeabi_fadd+0x268>
 800049a:	e752      	b.n	8000342 <__aeabi_fadd+0x10e>
 800049c:	003b      	movs	r3, r7
 800049e:	4463      	add	r3, ip
 80004a0:	015a      	lsls	r2, r3, #5
 80004a2:	d583      	bpl.n	80003ac <__aeabi_fadd+0x178>
 80004a4:	4a32      	ldr	r2, [pc, #200]	; (8000570 <__aeabi_fadd+0x33c>)
 80004a6:	3501      	adds	r5, #1
 80004a8:	4013      	ands	r3, r2
 80004aa:	e77f      	b.n	80003ac <__aeabi_fadd+0x178>
 80004ac:	2f00      	cmp	r7, #0
 80004ae:	d0c4      	beq.n	800043a <__aeabi_fadd+0x206>
 80004b0:	1e53      	subs	r3, r2, #1
 80004b2:	2a01      	cmp	r2, #1
 80004b4:	d012      	beq.n	80004dc <__aeabi_fadd+0x2a8>
 80004b6:	2aff      	cmp	r2, #255	; 0xff
 80004b8:	d08c      	beq.n	80003d4 <__aeabi_fadd+0x1a0>
 80004ba:	001a      	movs	r2, r3
 80004bc:	e79e      	b.n	80003fc <__aeabi_fadd+0x1c8>
 80004be:	2f00      	cmp	r7, #0
 80004c0:	d000      	beq.n	80004c4 <__aeabi_fadd+0x290>
 80004c2:	e77c      	b.n	80003be <__aeabi_fadd+0x18a>
 80004c4:	4663      	mov	r3, ip
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d183      	bne.n	80003d2 <__aeabi_fadd+0x19e>
 80004ca:	2680      	movs	r6, #128	; 0x80
 80004cc:	2400      	movs	r4, #0
 80004ce:	20ff      	movs	r0, #255	; 0xff
 80004d0:	03f6      	lsls	r6, r6, #15
 80004d2:	e736      	b.n	8000342 <__aeabi_fadd+0x10e>
 80004d4:	4663      	mov	r3, ip
 80004d6:	000c      	movs	r4, r1
 80004d8:	1bde      	subs	r6, r3, r7
 80004da:	e717      	b.n	800030c <__aeabi_fadd+0xd8>
 80004dc:	003b      	movs	r3, r7
 80004de:	4463      	add	r3, ip
 80004e0:	2501      	movs	r5, #1
 80004e2:	015a      	lsls	r2, r3, #5
 80004e4:	d400      	bmi.n	80004e8 <__aeabi_fadd+0x2b4>
 80004e6:	e761      	b.n	80003ac <__aeabi_fadd+0x178>
 80004e8:	2502      	movs	r5, #2
 80004ea:	e6f7      	b.n	80002dc <__aeabi_fadd+0xa8>
 80004ec:	4663      	mov	r3, ip
 80004ee:	2501      	movs	r5, #1
 80004f0:	1afb      	subs	r3, r7, r3
 80004f2:	e707      	b.n	8000304 <__aeabi_fadd+0xd0>
 80004f4:	2320      	movs	r3, #32
 80004f6:	1a9b      	subs	r3, r3, r2
 80004f8:	0038      	movs	r0, r7
 80004fa:	409f      	lsls	r7, r3
 80004fc:	003b      	movs	r3, r7
 80004fe:	40d0      	lsrs	r0, r2
 8000500:	1e5a      	subs	r2, r3, #1
 8000502:	4193      	sbcs	r3, r2
 8000504:	4303      	orrs	r3, r0
 8000506:	e7ae      	b.n	8000466 <__aeabi_fadd+0x232>
 8000508:	2320      	movs	r3, #32
 800050a:	1a9b      	subs	r3, r3, r2
 800050c:	0039      	movs	r1, r7
 800050e:	409f      	lsls	r7, r3
 8000510:	003b      	movs	r3, r7
 8000512:	40d1      	lsrs	r1, r2
 8000514:	1e5a      	subs	r2, r3, #1
 8000516:	4193      	sbcs	r3, r2
 8000518:	430b      	orrs	r3, r1
 800051a:	e773      	b.n	8000404 <__aeabi_fadd+0x1d0>
 800051c:	2f00      	cmp	r7, #0
 800051e:	d100      	bne.n	8000522 <__aeabi_fadd+0x2ee>
 8000520:	e758      	b.n	80003d4 <__aeabi_fadd+0x1a0>
 8000522:	4662      	mov	r2, ip
 8000524:	2a00      	cmp	r2, #0
 8000526:	d100      	bne.n	800052a <__aeabi_fadd+0x2f6>
 8000528:	e755      	b.n	80003d6 <__aeabi_fadd+0x1a2>
 800052a:	2280      	movs	r2, #128	; 0x80
 800052c:	03d2      	lsls	r2, r2, #15
 800052e:	4213      	tst	r3, r2
 8000530:	d100      	bne.n	8000534 <__aeabi_fadd+0x300>
 8000532:	e750      	b.n	80003d6 <__aeabi_fadd+0x1a2>
 8000534:	4641      	mov	r1, r8
 8000536:	4211      	tst	r1, r2
 8000538:	d000      	beq.n	800053c <__aeabi_fadd+0x308>
 800053a:	e74c      	b.n	80003d6 <__aeabi_fadd+0x1a2>
 800053c:	4643      	mov	r3, r8
 800053e:	e74a      	b.n	80003d6 <__aeabi_fadd+0x1a2>
 8000540:	4663      	mov	r3, ip
 8000542:	2b00      	cmp	r3, #0
 8000544:	d083      	beq.n	800044e <__aeabi_fadd+0x21a>
 8000546:	000c      	movs	r4, r1
 8000548:	4646      	mov	r6, r8
 800054a:	2000      	movs	r0, #0
 800054c:	e6f9      	b.n	8000342 <__aeabi_fadd+0x10e>
 800054e:	4663      	mov	r3, ip
 8000550:	000c      	movs	r4, r1
 8000552:	1bdb      	subs	r3, r3, r7
 8000554:	3501      	adds	r5, #1
 8000556:	e6d5      	b.n	8000304 <__aeabi_fadd+0xd0>
 8000558:	4646      	mov	r6, r8
 800055a:	2000      	movs	r0, #0
 800055c:	e6f1      	b.n	8000342 <__aeabi_fadd+0x10e>
 800055e:	2b00      	cmp	r3, #0
 8000560:	d000      	beq.n	8000564 <__aeabi_fadd+0x330>
 8000562:	e723      	b.n	80003ac <__aeabi_fadd+0x178>
 8000564:	2400      	movs	r4, #0
 8000566:	2600      	movs	r6, #0
 8000568:	e6eb      	b.n	8000342 <__aeabi_fadd+0x10e>
 800056a:	46c0      	nop			; (mov r8, r8)
 800056c:	7dffffff 	.word	0x7dffffff
 8000570:	fbffffff 	.word	0xfbffffff

08000574 <__aeabi_fmul>:
 8000574:	0243      	lsls	r3, r0, #9
 8000576:	0a5b      	lsrs	r3, r3, #9
 8000578:	b5f0      	push	{r4, r5, r6, r7, lr}
 800057a:	464f      	mov	r7, r9
 800057c:	4646      	mov	r6, r8
 800057e:	4699      	mov	r9, r3
 8000580:	46d6      	mov	lr, sl
 8000582:	0fc3      	lsrs	r3, r0, #31
 8000584:	0045      	lsls	r5, r0, #1
 8000586:	4698      	mov	r8, r3
 8000588:	b5c0      	push	{r6, r7, lr}
 800058a:	464b      	mov	r3, r9
 800058c:	1c0f      	adds	r7, r1, #0
 800058e:	0e2d      	lsrs	r5, r5, #24
 8000590:	d100      	bne.n	8000594 <__aeabi_fmul+0x20>
 8000592:	e0cb      	b.n	800072c <__aeabi_fmul+0x1b8>
 8000594:	2dff      	cmp	r5, #255	; 0xff
 8000596:	d100      	bne.n	800059a <__aeabi_fmul+0x26>
 8000598:	e0cf      	b.n	800073a <__aeabi_fmul+0x1c6>
 800059a:	2280      	movs	r2, #128	; 0x80
 800059c:	00db      	lsls	r3, r3, #3
 800059e:	04d2      	lsls	r2, r2, #19
 80005a0:	431a      	orrs	r2, r3
 80005a2:	2300      	movs	r3, #0
 80005a4:	4691      	mov	r9, r2
 80005a6:	2600      	movs	r6, #0
 80005a8:	469a      	mov	sl, r3
 80005aa:	3d7f      	subs	r5, #127	; 0x7f
 80005ac:	027c      	lsls	r4, r7, #9
 80005ae:	007b      	lsls	r3, r7, #1
 80005b0:	0a64      	lsrs	r4, r4, #9
 80005b2:	0e1b      	lsrs	r3, r3, #24
 80005b4:	0fff      	lsrs	r7, r7, #31
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d100      	bne.n	80005bc <__aeabi_fmul+0x48>
 80005ba:	e0a9      	b.n	8000710 <__aeabi_fmul+0x19c>
 80005bc:	2bff      	cmp	r3, #255	; 0xff
 80005be:	d011      	beq.n	80005e4 <__aeabi_fmul+0x70>
 80005c0:	2280      	movs	r2, #128	; 0x80
 80005c2:	00e4      	lsls	r4, r4, #3
 80005c4:	04d2      	lsls	r2, r2, #19
 80005c6:	4314      	orrs	r4, r2
 80005c8:	4642      	mov	r2, r8
 80005ca:	3b7f      	subs	r3, #127	; 0x7f
 80005cc:	195b      	adds	r3, r3, r5
 80005ce:	407a      	eors	r2, r7
 80005d0:	2000      	movs	r0, #0
 80005d2:	b2d2      	uxtb	r2, r2
 80005d4:	1c5d      	adds	r5, r3, #1
 80005d6:	2e0a      	cmp	r6, #10
 80005d8:	dd13      	ble.n	8000602 <__aeabi_fmul+0x8e>
 80005da:	003a      	movs	r2, r7
 80005dc:	2e0b      	cmp	r6, #11
 80005de:	d047      	beq.n	8000670 <__aeabi_fmul+0xfc>
 80005e0:	4647      	mov	r7, r8
 80005e2:	e03f      	b.n	8000664 <__aeabi_fmul+0xf0>
 80005e4:	002b      	movs	r3, r5
 80005e6:	33ff      	adds	r3, #255	; 0xff
 80005e8:	2c00      	cmp	r4, #0
 80005ea:	d11e      	bne.n	800062a <__aeabi_fmul+0xb6>
 80005ec:	2202      	movs	r2, #2
 80005ee:	4316      	orrs	r6, r2
 80005f0:	4642      	mov	r2, r8
 80005f2:	3501      	adds	r5, #1
 80005f4:	407a      	eors	r2, r7
 80005f6:	b2d2      	uxtb	r2, r2
 80005f8:	35ff      	adds	r5, #255	; 0xff
 80005fa:	2e0a      	cmp	r6, #10
 80005fc:	dd00      	ble.n	8000600 <__aeabi_fmul+0x8c>
 80005fe:	e0e4      	b.n	80007ca <__aeabi_fmul+0x256>
 8000600:	2002      	movs	r0, #2
 8000602:	2e02      	cmp	r6, #2
 8000604:	dc1c      	bgt.n	8000640 <__aeabi_fmul+0xcc>
 8000606:	3e01      	subs	r6, #1
 8000608:	2e01      	cmp	r6, #1
 800060a:	d842      	bhi.n	8000692 <__aeabi_fmul+0x11e>
 800060c:	2802      	cmp	r0, #2
 800060e:	d03d      	beq.n	800068c <__aeabi_fmul+0x118>
 8000610:	2801      	cmp	r0, #1
 8000612:	d166      	bne.n	80006e2 <__aeabi_fmul+0x16e>
 8000614:	2000      	movs	r0, #0
 8000616:	2100      	movs	r1, #0
 8000618:	05c0      	lsls	r0, r0, #23
 800061a:	4308      	orrs	r0, r1
 800061c:	07d2      	lsls	r2, r2, #31
 800061e:	4310      	orrs	r0, r2
 8000620:	bce0      	pop	{r5, r6, r7}
 8000622:	46ba      	mov	sl, r7
 8000624:	46b1      	mov	r9, r6
 8000626:	46a8      	mov	r8, r5
 8000628:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800062a:	2203      	movs	r2, #3
 800062c:	4316      	orrs	r6, r2
 800062e:	4642      	mov	r2, r8
 8000630:	3501      	adds	r5, #1
 8000632:	407a      	eors	r2, r7
 8000634:	b2d2      	uxtb	r2, r2
 8000636:	35ff      	adds	r5, #255	; 0xff
 8000638:	2e0a      	cmp	r6, #10
 800063a:	dd00      	ble.n	800063e <__aeabi_fmul+0xca>
 800063c:	e0e4      	b.n	8000808 <__aeabi_fmul+0x294>
 800063e:	2003      	movs	r0, #3
 8000640:	2101      	movs	r1, #1
 8000642:	40b1      	lsls	r1, r6
 8000644:	26a6      	movs	r6, #166	; 0xa6
 8000646:	00f6      	lsls	r6, r6, #3
 8000648:	4231      	tst	r1, r6
 800064a:	d10a      	bne.n	8000662 <__aeabi_fmul+0xee>
 800064c:	2690      	movs	r6, #144	; 0x90
 800064e:	00b6      	lsls	r6, r6, #2
 8000650:	4231      	tst	r1, r6
 8000652:	d116      	bne.n	8000682 <__aeabi_fmul+0x10e>
 8000654:	3eb9      	subs	r6, #185	; 0xb9
 8000656:	3eff      	subs	r6, #255	; 0xff
 8000658:	420e      	tst	r6, r1
 800065a:	d01a      	beq.n	8000692 <__aeabi_fmul+0x11e>
 800065c:	46a1      	mov	r9, r4
 800065e:	4682      	mov	sl, r0
 8000660:	e000      	b.n	8000664 <__aeabi_fmul+0xf0>
 8000662:	0017      	movs	r7, r2
 8000664:	4653      	mov	r3, sl
 8000666:	003a      	movs	r2, r7
 8000668:	2b02      	cmp	r3, #2
 800066a:	d00f      	beq.n	800068c <__aeabi_fmul+0x118>
 800066c:	464c      	mov	r4, r9
 800066e:	4650      	mov	r0, sl
 8000670:	2803      	cmp	r0, #3
 8000672:	d1cd      	bne.n	8000610 <__aeabi_fmul+0x9c>
 8000674:	2180      	movs	r1, #128	; 0x80
 8000676:	03c9      	lsls	r1, r1, #15
 8000678:	4321      	orrs	r1, r4
 800067a:	0249      	lsls	r1, r1, #9
 800067c:	20ff      	movs	r0, #255	; 0xff
 800067e:	0a49      	lsrs	r1, r1, #9
 8000680:	e7ca      	b.n	8000618 <__aeabi_fmul+0xa4>
 8000682:	2180      	movs	r1, #128	; 0x80
 8000684:	2200      	movs	r2, #0
 8000686:	20ff      	movs	r0, #255	; 0xff
 8000688:	03c9      	lsls	r1, r1, #15
 800068a:	e7c5      	b.n	8000618 <__aeabi_fmul+0xa4>
 800068c:	20ff      	movs	r0, #255	; 0xff
 800068e:	2100      	movs	r1, #0
 8000690:	e7c2      	b.n	8000618 <__aeabi_fmul+0xa4>
 8000692:	0c20      	lsrs	r0, r4, #16
 8000694:	4649      	mov	r1, r9
 8000696:	0424      	lsls	r4, r4, #16
 8000698:	0c24      	lsrs	r4, r4, #16
 800069a:	0027      	movs	r7, r4
 800069c:	0c0e      	lsrs	r6, r1, #16
 800069e:	0409      	lsls	r1, r1, #16
 80006a0:	0c09      	lsrs	r1, r1, #16
 80006a2:	4374      	muls	r4, r6
 80006a4:	434f      	muls	r7, r1
 80006a6:	4346      	muls	r6, r0
 80006a8:	4348      	muls	r0, r1
 80006aa:	0c39      	lsrs	r1, r7, #16
 80006ac:	1900      	adds	r0, r0, r4
 80006ae:	1809      	adds	r1, r1, r0
 80006b0:	428c      	cmp	r4, r1
 80006b2:	d903      	bls.n	80006bc <__aeabi_fmul+0x148>
 80006b4:	2080      	movs	r0, #128	; 0x80
 80006b6:	0240      	lsls	r0, r0, #9
 80006b8:	4684      	mov	ip, r0
 80006ba:	4466      	add	r6, ip
 80006bc:	043f      	lsls	r7, r7, #16
 80006be:	0408      	lsls	r0, r1, #16
 80006c0:	0c3f      	lsrs	r7, r7, #16
 80006c2:	19c0      	adds	r0, r0, r7
 80006c4:	0184      	lsls	r4, r0, #6
 80006c6:	1e67      	subs	r7, r4, #1
 80006c8:	41bc      	sbcs	r4, r7
 80006ca:	0c09      	lsrs	r1, r1, #16
 80006cc:	0e80      	lsrs	r0, r0, #26
 80006ce:	1989      	adds	r1, r1, r6
 80006d0:	4304      	orrs	r4, r0
 80006d2:	0189      	lsls	r1, r1, #6
 80006d4:	430c      	orrs	r4, r1
 80006d6:	0109      	lsls	r1, r1, #4
 80006d8:	d571      	bpl.n	80007be <__aeabi_fmul+0x24a>
 80006da:	2301      	movs	r3, #1
 80006dc:	0861      	lsrs	r1, r4, #1
 80006de:	401c      	ands	r4, r3
 80006e0:	430c      	orrs	r4, r1
 80006e2:	002b      	movs	r3, r5
 80006e4:	337f      	adds	r3, #127	; 0x7f
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	dd51      	ble.n	800078e <__aeabi_fmul+0x21a>
 80006ea:	0761      	lsls	r1, r4, #29
 80006ec:	d004      	beq.n	80006f8 <__aeabi_fmul+0x184>
 80006ee:	210f      	movs	r1, #15
 80006f0:	4021      	ands	r1, r4
 80006f2:	2904      	cmp	r1, #4
 80006f4:	d000      	beq.n	80006f8 <__aeabi_fmul+0x184>
 80006f6:	3404      	adds	r4, #4
 80006f8:	0121      	lsls	r1, r4, #4
 80006fa:	d503      	bpl.n	8000704 <__aeabi_fmul+0x190>
 80006fc:	4b43      	ldr	r3, [pc, #268]	; (800080c <__aeabi_fmul+0x298>)
 80006fe:	401c      	ands	r4, r3
 8000700:	002b      	movs	r3, r5
 8000702:	3380      	adds	r3, #128	; 0x80
 8000704:	2bfe      	cmp	r3, #254	; 0xfe
 8000706:	dcc1      	bgt.n	800068c <__aeabi_fmul+0x118>
 8000708:	01a1      	lsls	r1, r4, #6
 800070a:	0a49      	lsrs	r1, r1, #9
 800070c:	b2d8      	uxtb	r0, r3
 800070e:	e783      	b.n	8000618 <__aeabi_fmul+0xa4>
 8000710:	2c00      	cmp	r4, #0
 8000712:	d12c      	bne.n	800076e <__aeabi_fmul+0x1fa>
 8000714:	2301      	movs	r3, #1
 8000716:	4642      	mov	r2, r8
 8000718:	431e      	orrs	r6, r3
 800071a:	002b      	movs	r3, r5
 800071c:	407a      	eors	r2, r7
 800071e:	2001      	movs	r0, #1
 8000720:	b2d2      	uxtb	r2, r2
 8000722:	1c5d      	adds	r5, r3, #1
 8000724:	2e0a      	cmp	r6, #10
 8000726:	dd00      	ble.n	800072a <__aeabi_fmul+0x1b6>
 8000728:	e757      	b.n	80005da <__aeabi_fmul+0x66>
 800072a:	e76a      	b.n	8000602 <__aeabi_fmul+0x8e>
 800072c:	2b00      	cmp	r3, #0
 800072e:	d110      	bne.n	8000752 <__aeabi_fmul+0x1de>
 8000730:	2301      	movs	r3, #1
 8000732:	2604      	movs	r6, #4
 8000734:	2500      	movs	r5, #0
 8000736:	469a      	mov	sl, r3
 8000738:	e738      	b.n	80005ac <__aeabi_fmul+0x38>
 800073a:	2b00      	cmp	r3, #0
 800073c:	d104      	bne.n	8000748 <__aeabi_fmul+0x1d4>
 800073e:	2302      	movs	r3, #2
 8000740:	2608      	movs	r6, #8
 8000742:	25ff      	movs	r5, #255	; 0xff
 8000744:	469a      	mov	sl, r3
 8000746:	e731      	b.n	80005ac <__aeabi_fmul+0x38>
 8000748:	2303      	movs	r3, #3
 800074a:	260c      	movs	r6, #12
 800074c:	25ff      	movs	r5, #255	; 0xff
 800074e:	469a      	mov	sl, r3
 8000750:	e72c      	b.n	80005ac <__aeabi_fmul+0x38>
 8000752:	4648      	mov	r0, r9
 8000754:	f001 f934 	bl	80019c0 <__clzsi2>
 8000758:	464a      	mov	r2, r9
 800075a:	1f43      	subs	r3, r0, #5
 800075c:	2576      	movs	r5, #118	; 0x76
 800075e:	409a      	lsls	r2, r3
 8000760:	2300      	movs	r3, #0
 8000762:	426d      	negs	r5, r5
 8000764:	4691      	mov	r9, r2
 8000766:	2600      	movs	r6, #0
 8000768:	469a      	mov	sl, r3
 800076a:	1a2d      	subs	r5, r5, r0
 800076c:	e71e      	b.n	80005ac <__aeabi_fmul+0x38>
 800076e:	0020      	movs	r0, r4
 8000770:	f001 f926 	bl	80019c0 <__clzsi2>
 8000774:	4642      	mov	r2, r8
 8000776:	1f43      	subs	r3, r0, #5
 8000778:	409c      	lsls	r4, r3
 800077a:	1a2b      	subs	r3, r5, r0
 800077c:	3b76      	subs	r3, #118	; 0x76
 800077e:	407a      	eors	r2, r7
 8000780:	2000      	movs	r0, #0
 8000782:	b2d2      	uxtb	r2, r2
 8000784:	1c5d      	adds	r5, r3, #1
 8000786:	2e0a      	cmp	r6, #10
 8000788:	dd00      	ble.n	800078c <__aeabi_fmul+0x218>
 800078a:	e726      	b.n	80005da <__aeabi_fmul+0x66>
 800078c:	e739      	b.n	8000602 <__aeabi_fmul+0x8e>
 800078e:	2101      	movs	r1, #1
 8000790:	1acb      	subs	r3, r1, r3
 8000792:	2b1b      	cmp	r3, #27
 8000794:	dd00      	ble.n	8000798 <__aeabi_fmul+0x224>
 8000796:	e73d      	b.n	8000614 <__aeabi_fmul+0xa0>
 8000798:	359e      	adds	r5, #158	; 0x9e
 800079a:	0021      	movs	r1, r4
 800079c:	40ac      	lsls	r4, r5
 800079e:	40d9      	lsrs	r1, r3
 80007a0:	1e63      	subs	r3, r4, #1
 80007a2:	419c      	sbcs	r4, r3
 80007a4:	4321      	orrs	r1, r4
 80007a6:	074b      	lsls	r3, r1, #29
 80007a8:	d004      	beq.n	80007b4 <__aeabi_fmul+0x240>
 80007aa:	230f      	movs	r3, #15
 80007ac:	400b      	ands	r3, r1
 80007ae:	2b04      	cmp	r3, #4
 80007b0:	d000      	beq.n	80007b4 <__aeabi_fmul+0x240>
 80007b2:	3104      	adds	r1, #4
 80007b4:	014b      	lsls	r3, r1, #5
 80007b6:	d504      	bpl.n	80007c2 <__aeabi_fmul+0x24e>
 80007b8:	2001      	movs	r0, #1
 80007ba:	2100      	movs	r1, #0
 80007bc:	e72c      	b.n	8000618 <__aeabi_fmul+0xa4>
 80007be:	001d      	movs	r5, r3
 80007c0:	e78f      	b.n	80006e2 <__aeabi_fmul+0x16e>
 80007c2:	0189      	lsls	r1, r1, #6
 80007c4:	2000      	movs	r0, #0
 80007c6:	0a49      	lsrs	r1, r1, #9
 80007c8:	e726      	b.n	8000618 <__aeabi_fmul+0xa4>
 80007ca:	2302      	movs	r3, #2
 80007cc:	2e0f      	cmp	r6, #15
 80007ce:	d10c      	bne.n	80007ea <__aeabi_fmul+0x276>
 80007d0:	2180      	movs	r1, #128	; 0x80
 80007d2:	464b      	mov	r3, r9
 80007d4:	03c9      	lsls	r1, r1, #15
 80007d6:	420b      	tst	r3, r1
 80007d8:	d00d      	beq.n	80007f6 <__aeabi_fmul+0x282>
 80007da:	420c      	tst	r4, r1
 80007dc:	d10b      	bne.n	80007f6 <__aeabi_fmul+0x282>
 80007de:	4321      	orrs	r1, r4
 80007e0:	0249      	lsls	r1, r1, #9
 80007e2:	003a      	movs	r2, r7
 80007e4:	20ff      	movs	r0, #255	; 0xff
 80007e6:	0a49      	lsrs	r1, r1, #9
 80007e8:	e716      	b.n	8000618 <__aeabi_fmul+0xa4>
 80007ea:	2e0b      	cmp	r6, #11
 80007ec:	d000      	beq.n	80007f0 <__aeabi_fmul+0x27c>
 80007ee:	e6f7      	b.n	80005e0 <__aeabi_fmul+0x6c>
 80007f0:	46a1      	mov	r9, r4
 80007f2:	469a      	mov	sl, r3
 80007f4:	e736      	b.n	8000664 <__aeabi_fmul+0xf0>
 80007f6:	2180      	movs	r1, #128	; 0x80
 80007f8:	464b      	mov	r3, r9
 80007fa:	03c9      	lsls	r1, r1, #15
 80007fc:	4319      	orrs	r1, r3
 80007fe:	0249      	lsls	r1, r1, #9
 8000800:	4642      	mov	r2, r8
 8000802:	20ff      	movs	r0, #255	; 0xff
 8000804:	0a49      	lsrs	r1, r1, #9
 8000806:	e707      	b.n	8000618 <__aeabi_fmul+0xa4>
 8000808:	2303      	movs	r3, #3
 800080a:	e7df      	b.n	80007cc <__aeabi_fmul+0x258>
 800080c:	f7ffffff 	.word	0xf7ffffff

08000810 <__aeabi_fsub>:
 8000810:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000812:	46c6      	mov	lr, r8
 8000814:	0243      	lsls	r3, r0, #9
 8000816:	0a5b      	lsrs	r3, r3, #9
 8000818:	0045      	lsls	r5, r0, #1
 800081a:	00da      	lsls	r2, r3, #3
 800081c:	0fc4      	lsrs	r4, r0, #31
 800081e:	0248      	lsls	r0, r1, #9
 8000820:	004f      	lsls	r7, r1, #1
 8000822:	4694      	mov	ip, r2
 8000824:	0a42      	lsrs	r2, r0, #9
 8000826:	001e      	movs	r6, r3
 8000828:	4690      	mov	r8, r2
 800082a:	b500      	push	{lr}
 800082c:	0e2d      	lsrs	r5, r5, #24
 800082e:	0e3f      	lsrs	r7, r7, #24
 8000830:	0fc9      	lsrs	r1, r1, #31
 8000832:	0980      	lsrs	r0, r0, #6
 8000834:	2fff      	cmp	r7, #255	; 0xff
 8000836:	d059      	beq.n	80008ec <__aeabi_fsub+0xdc>
 8000838:	2201      	movs	r2, #1
 800083a:	4051      	eors	r1, r2
 800083c:	428c      	cmp	r4, r1
 800083e:	d039      	beq.n	80008b4 <__aeabi_fsub+0xa4>
 8000840:	1bea      	subs	r2, r5, r7
 8000842:	2a00      	cmp	r2, #0
 8000844:	dd58      	ble.n	80008f8 <__aeabi_fsub+0xe8>
 8000846:	2f00      	cmp	r7, #0
 8000848:	d068      	beq.n	800091c <__aeabi_fsub+0x10c>
 800084a:	2dff      	cmp	r5, #255	; 0xff
 800084c:	d100      	bne.n	8000850 <__aeabi_fsub+0x40>
 800084e:	e0d1      	b.n	80009f4 <__aeabi_fsub+0x1e4>
 8000850:	2380      	movs	r3, #128	; 0x80
 8000852:	04db      	lsls	r3, r3, #19
 8000854:	4318      	orrs	r0, r3
 8000856:	2a1b      	cmp	r2, #27
 8000858:	dc00      	bgt.n	800085c <__aeabi_fsub+0x4c>
 800085a:	e0e3      	b.n	8000a24 <__aeabi_fsub+0x214>
 800085c:	2301      	movs	r3, #1
 800085e:	4662      	mov	r2, ip
 8000860:	1ad3      	subs	r3, r2, r3
 8000862:	015a      	lsls	r2, r3, #5
 8000864:	d400      	bmi.n	8000868 <__aeabi_fsub+0x58>
 8000866:	e0ac      	b.n	80009c2 <__aeabi_fsub+0x1b2>
 8000868:	019b      	lsls	r3, r3, #6
 800086a:	099e      	lsrs	r6, r3, #6
 800086c:	0030      	movs	r0, r6
 800086e:	f001 f8a7 	bl	80019c0 <__clzsi2>
 8000872:	0033      	movs	r3, r6
 8000874:	3805      	subs	r0, #5
 8000876:	4083      	lsls	r3, r0
 8000878:	4285      	cmp	r5, r0
 800087a:	dc00      	bgt.n	800087e <__aeabi_fsub+0x6e>
 800087c:	e0c6      	b.n	8000a0c <__aeabi_fsub+0x1fc>
 800087e:	4ab2      	ldr	r2, [pc, #712]	; (8000b48 <__aeabi_fsub+0x338>)
 8000880:	1a2d      	subs	r5, r5, r0
 8000882:	4013      	ands	r3, r2
 8000884:	075a      	lsls	r2, r3, #29
 8000886:	d004      	beq.n	8000892 <__aeabi_fsub+0x82>
 8000888:	220f      	movs	r2, #15
 800088a:	401a      	ands	r2, r3
 800088c:	2a04      	cmp	r2, #4
 800088e:	d000      	beq.n	8000892 <__aeabi_fsub+0x82>
 8000890:	3304      	adds	r3, #4
 8000892:	015a      	lsls	r2, r3, #5
 8000894:	d400      	bmi.n	8000898 <__aeabi_fsub+0x88>
 8000896:	e097      	b.n	80009c8 <__aeabi_fsub+0x1b8>
 8000898:	1c6a      	adds	r2, r5, #1
 800089a:	2dfe      	cmp	r5, #254	; 0xfe
 800089c:	d100      	bne.n	80008a0 <__aeabi_fsub+0x90>
 800089e:	e084      	b.n	80009aa <__aeabi_fsub+0x19a>
 80008a0:	019b      	lsls	r3, r3, #6
 80008a2:	0a5e      	lsrs	r6, r3, #9
 80008a4:	b2d2      	uxtb	r2, r2
 80008a6:	05d0      	lsls	r0, r2, #23
 80008a8:	4330      	orrs	r0, r6
 80008aa:	07e4      	lsls	r4, r4, #31
 80008ac:	4320      	orrs	r0, r4
 80008ae:	bc80      	pop	{r7}
 80008b0:	46b8      	mov	r8, r7
 80008b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008b4:	1bea      	subs	r2, r5, r7
 80008b6:	2a00      	cmp	r2, #0
 80008b8:	dd41      	ble.n	800093e <__aeabi_fsub+0x12e>
 80008ba:	2f00      	cmp	r7, #0
 80008bc:	d06b      	beq.n	8000996 <__aeabi_fsub+0x186>
 80008be:	2dff      	cmp	r5, #255	; 0xff
 80008c0:	d100      	bne.n	80008c4 <__aeabi_fsub+0xb4>
 80008c2:	e097      	b.n	80009f4 <__aeabi_fsub+0x1e4>
 80008c4:	2380      	movs	r3, #128	; 0x80
 80008c6:	04db      	lsls	r3, r3, #19
 80008c8:	4318      	orrs	r0, r3
 80008ca:	2a1b      	cmp	r2, #27
 80008cc:	dc00      	bgt.n	80008d0 <__aeabi_fsub+0xc0>
 80008ce:	e0cc      	b.n	8000a6a <__aeabi_fsub+0x25a>
 80008d0:	2301      	movs	r3, #1
 80008d2:	4463      	add	r3, ip
 80008d4:	015a      	lsls	r2, r3, #5
 80008d6:	d574      	bpl.n	80009c2 <__aeabi_fsub+0x1b2>
 80008d8:	3501      	adds	r5, #1
 80008da:	2dff      	cmp	r5, #255	; 0xff
 80008dc:	d065      	beq.n	80009aa <__aeabi_fsub+0x19a>
 80008de:	2201      	movs	r2, #1
 80008e0:	499a      	ldr	r1, [pc, #616]	; (8000b4c <__aeabi_fsub+0x33c>)
 80008e2:	401a      	ands	r2, r3
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	400b      	ands	r3, r1
 80008e8:	4313      	orrs	r3, r2
 80008ea:	e7cb      	b.n	8000884 <__aeabi_fsub+0x74>
 80008ec:	2800      	cmp	r0, #0
 80008ee:	d01f      	beq.n	8000930 <__aeabi_fsub+0x120>
 80008f0:	428c      	cmp	r4, r1
 80008f2:	d022      	beq.n	800093a <__aeabi_fsub+0x12a>
 80008f4:	002a      	movs	r2, r5
 80008f6:	3aff      	subs	r2, #255	; 0xff
 80008f8:	2a00      	cmp	r2, #0
 80008fa:	d035      	beq.n	8000968 <__aeabi_fsub+0x158>
 80008fc:	1b7a      	subs	r2, r7, r5
 80008fe:	2d00      	cmp	r5, #0
 8000900:	d000      	beq.n	8000904 <__aeabi_fsub+0xf4>
 8000902:	e099      	b.n	8000a38 <__aeabi_fsub+0x228>
 8000904:	4663      	mov	r3, ip
 8000906:	2b00      	cmp	r3, #0
 8000908:	d100      	bne.n	800090c <__aeabi_fsub+0xfc>
 800090a:	e0dd      	b.n	8000ac8 <__aeabi_fsub+0x2b8>
 800090c:	1e53      	subs	r3, r2, #1
 800090e:	2a01      	cmp	r2, #1
 8000910:	d100      	bne.n	8000914 <__aeabi_fsub+0x104>
 8000912:	e105      	b.n	8000b20 <__aeabi_fsub+0x310>
 8000914:	2aff      	cmp	r2, #255	; 0xff
 8000916:	d06b      	beq.n	80009f0 <__aeabi_fsub+0x1e0>
 8000918:	001a      	movs	r2, r3
 800091a:	e094      	b.n	8000a46 <__aeabi_fsub+0x236>
 800091c:	2800      	cmp	r0, #0
 800091e:	d073      	beq.n	8000a08 <__aeabi_fsub+0x1f8>
 8000920:	1e51      	subs	r1, r2, #1
 8000922:	2a01      	cmp	r2, #1
 8000924:	d100      	bne.n	8000928 <__aeabi_fsub+0x118>
 8000926:	e0df      	b.n	8000ae8 <__aeabi_fsub+0x2d8>
 8000928:	2aff      	cmp	r2, #255	; 0xff
 800092a:	d063      	beq.n	80009f4 <__aeabi_fsub+0x1e4>
 800092c:	000a      	movs	r2, r1
 800092e:	e792      	b.n	8000856 <__aeabi_fsub+0x46>
 8000930:	2201      	movs	r2, #1
 8000932:	4051      	eors	r1, r2
 8000934:	42a1      	cmp	r1, r4
 8000936:	d000      	beq.n	800093a <__aeabi_fsub+0x12a>
 8000938:	e782      	b.n	8000840 <__aeabi_fsub+0x30>
 800093a:	002a      	movs	r2, r5
 800093c:	3aff      	subs	r2, #255	; 0xff
 800093e:	2a00      	cmp	r2, #0
 8000940:	d036      	beq.n	80009b0 <__aeabi_fsub+0x1a0>
 8000942:	1b7a      	subs	r2, r7, r5
 8000944:	2d00      	cmp	r5, #0
 8000946:	d100      	bne.n	800094a <__aeabi_fsub+0x13a>
 8000948:	e0aa      	b.n	8000aa0 <__aeabi_fsub+0x290>
 800094a:	2fff      	cmp	r7, #255	; 0xff
 800094c:	d100      	bne.n	8000950 <__aeabi_fsub+0x140>
 800094e:	e0da      	b.n	8000b06 <__aeabi_fsub+0x2f6>
 8000950:	2380      	movs	r3, #128	; 0x80
 8000952:	4661      	mov	r1, ip
 8000954:	04db      	lsls	r3, r3, #19
 8000956:	4319      	orrs	r1, r3
 8000958:	468c      	mov	ip, r1
 800095a:	2a1b      	cmp	r2, #27
 800095c:	dc00      	bgt.n	8000960 <__aeabi_fsub+0x150>
 800095e:	e0d4      	b.n	8000b0a <__aeabi_fsub+0x2fa>
 8000960:	2301      	movs	r3, #1
 8000962:	003d      	movs	r5, r7
 8000964:	181b      	adds	r3, r3, r0
 8000966:	e7b5      	b.n	80008d4 <__aeabi_fsub+0xc4>
 8000968:	27fe      	movs	r7, #254	; 0xfe
 800096a:	1c6a      	adds	r2, r5, #1
 800096c:	4217      	tst	r7, r2
 800096e:	d171      	bne.n	8000a54 <__aeabi_fsub+0x244>
 8000970:	2d00      	cmp	r5, #0
 8000972:	d000      	beq.n	8000976 <__aeabi_fsub+0x166>
 8000974:	e09e      	b.n	8000ab4 <__aeabi_fsub+0x2a4>
 8000976:	4663      	mov	r3, ip
 8000978:	2b00      	cmp	r3, #0
 800097a:	d100      	bne.n	800097e <__aeabi_fsub+0x16e>
 800097c:	e0d5      	b.n	8000b2a <__aeabi_fsub+0x31a>
 800097e:	2200      	movs	r2, #0
 8000980:	2800      	cmp	r0, #0
 8000982:	d100      	bne.n	8000986 <__aeabi_fsub+0x176>
 8000984:	e78f      	b.n	80008a6 <__aeabi_fsub+0x96>
 8000986:	1a1b      	subs	r3, r3, r0
 8000988:	015e      	lsls	r6, r3, #5
 800098a:	d400      	bmi.n	800098e <__aeabi_fsub+0x17e>
 800098c:	e0d6      	b.n	8000b3c <__aeabi_fsub+0x32c>
 800098e:	4663      	mov	r3, ip
 8000990:	000c      	movs	r4, r1
 8000992:	1ac3      	subs	r3, r0, r3
 8000994:	e776      	b.n	8000884 <__aeabi_fsub+0x74>
 8000996:	2800      	cmp	r0, #0
 8000998:	d036      	beq.n	8000a08 <__aeabi_fsub+0x1f8>
 800099a:	1e51      	subs	r1, r2, #1
 800099c:	2a01      	cmp	r2, #1
 800099e:	d100      	bne.n	80009a2 <__aeabi_fsub+0x192>
 80009a0:	e09a      	b.n	8000ad8 <__aeabi_fsub+0x2c8>
 80009a2:	2aff      	cmp	r2, #255	; 0xff
 80009a4:	d026      	beq.n	80009f4 <__aeabi_fsub+0x1e4>
 80009a6:	000a      	movs	r2, r1
 80009a8:	e78f      	b.n	80008ca <__aeabi_fsub+0xba>
 80009aa:	22ff      	movs	r2, #255	; 0xff
 80009ac:	2600      	movs	r6, #0
 80009ae:	e77a      	b.n	80008a6 <__aeabi_fsub+0x96>
 80009b0:	27fe      	movs	r7, #254	; 0xfe
 80009b2:	1c6a      	adds	r2, r5, #1
 80009b4:	4217      	tst	r7, r2
 80009b6:	d062      	beq.n	8000a7e <__aeabi_fsub+0x26e>
 80009b8:	2aff      	cmp	r2, #255	; 0xff
 80009ba:	d0f6      	beq.n	80009aa <__aeabi_fsub+0x19a>
 80009bc:	0015      	movs	r5, r2
 80009be:	4460      	add	r0, ip
 80009c0:	0843      	lsrs	r3, r0, #1
 80009c2:	075a      	lsls	r2, r3, #29
 80009c4:	d000      	beq.n	80009c8 <__aeabi_fsub+0x1b8>
 80009c6:	e75f      	b.n	8000888 <__aeabi_fsub+0x78>
 80009c8:	08db      	lsrs	r3, r3, #3
 80009ca:	2dff      	cmp	r5, #255	; 0xff
 80009cc:	d012      	beq.n	80009f4 <__aeabi_fsub+0x1e4>
 80009ce:	025b      	lsls	r3, r3, #9
 80009d0:	0a5e      	lsrs	r6, r3, #9
 80009d2:	b2ea      	uxtb	r2, r5
 80009d4:	e767      	b.n	80008a6 <__aeabi_fsub+0x96>
 80009d6:	4662      	mov	r2, ip
 80009d8:	2a00      	cmp	r2, #0
 80009da:	d100      	bne.n	80009de <__aeabi_fsub+0x1ce>
 80009dc:	e093      	b.n	8000b06 <__aeabi_fsub+0x2f6>
 80009de:	2800      	cmp	r0, #0
 80009e0:	d008      	beq.n	80009f4 <__aeabi_fsub+0x1e4>
 80009e2:	2280      	movs	r2, #128	; 0x80
 80009e4:	03d2      	lsls	r2, r2, #15
 80009e6:	4213      	tst	r3, r2
 80009e8:	d004      	beq.n	80009f4 <__aeabi_fsub+0x1e4>
 80009ea:	4640      	mov	r0, r8
 80009ec:	4210      	tst	r0, r2
 80009ee:	d101      	bne.n	80009f4 <__aeabi_fsub+0x1e4>
 80009f0:	000c      	movs	r4, r1
 80009f2:	4643      	mov	r3, r8
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d0d8      	beq.n	80009aa <__aeabi_fsub+0x19a>
 80009f8:	2680      	movs	r6, #128	; 0x80
 80009fa:	03f6      	lsls	r6, r6, #15
 80009fc:	431e      	orrs	r6, r3
 80009fe:	0276      	lsls	r6, r6, #9
 8000a00:	22ff      	movs	r2, #255	; 0xff
 8000a02:	0a76      	lsrs	r6, r6, #9
 8000a04:	e74f      	b.n	80008a6 <__aeabi_fsub+0x96>
 8000a06:	4643      	mov	r3, r8
 8000a08:	0015      	movs	r5, r2
 8000a0a:	e7de      	b.n	80009ca <__aeabi_fsub+0x1ba>
 8000a0c:	2220      	movs	r2, #32
 8000a0e:	1b40      	subs	r0, r0, r5
 8000a10:	3001      	adds	r0, #1
 8000a12:	1a12      	subs	r2, r2, r0
 8000a14:	0019      	movs	r1, r3
 8000a16:	4093      	lsls	r3, r2
 8000a18:	40c1      	lsrs	r1, r0
 8000a1a:	1e5a      	subs	r2, r3, #1
 8000a1c:	4193      	sbcs	r3, r2
 8000a1e:	2500      	movs	r5, #0
 8000a20:	430b      	orrs	r3, r1
 8000a22:	e72f      	b.n	8000884 <__aeabi_fsub+0x74>
 8000a24:	2320      	movs	r3, #32
 8000a26:	1a9b      	subs	r3, r3, r2
 8000a28:	0001      	movs	r1, r0
 8000a2a:	4098      	lsls	r0, r3
 8000a2c:	0003      	movs	r3, r0
 8000a2e:	40d1      	lsrs	r1, r2
 8000a30:	1e5a      	subs	r2, r3, #1
 8000a32:	4193      	sbcs	r3, r2
 8000a34:	430b      	orrs	r3, r1
 8000a36:	e712      	b.n	800085e <__aeabi_fsub+0x4e>
 8000a38:	2fff      	cmp	r7, #255	; 0xff
 8000a3a:	d0d9      	beq.n	80009f0 <__aeabi_fsub+0x1e0>
 8000a3c:	2380      	movs	r3, #128	; 0x80
 8000a3e:	4664      	mov	r4, ip
 8000a40:	04db      	lsls	r3, r3, #19
 8000a42:	431c      	orrs	r4, r3
 8000a44:	46a4      	mov	ip, r4
 8000a46:	2a1b      	cmp	r2, #27
 8000a48:	dd52      	ble.n	8000af0 <__aeabi_fsub+0x2e0>
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	000c      	movs	r4, r1
 8000a4e:	003d      	movs	r5, r7
 8000a50:	1ac3      	subs	r3, r0, r3
 8000a52:	e706      	b.n	8000862 <__aeabi_fsub+0x52>
 8000a54:	4663      	mov	r3, ip
 8000a56:	1a1e      	subs	r6, r3, r0
 8000a58:	0173      	lsls	r3, r6, #5
 8000a5a:	d439      	bmi.n	8000ad0 <__aeabi_fsub+0x2c0>
 8000a5c:	2e00      	cmp	r6, #0
 8000a5e:	d000      	beq.n	8000a62 <__aeabi_fsub+0x252>
 8000a60:	e704      	b.n	800086c <__aeabi_fsub+0x5c>
 8000a62:	2400      	movs	r4, #0
 8000a64:	2200      	movs	r2, #0
 8000a66:	2600      	movs	r6, #0
 8000a68:	e71d      	b.n	80008a6 <__aeabi_fsub+0x96>
 8000a6a:	2320      	movs	r3, #32
 8000a6c:	1a9b      	subs	r3, r3, r2
 8000a6e:	0001      	movs	r1, r0
 8000a70:	4098      	lsls	r0, r3
 8000a72:	0003      	movs	r3, r0
 8000a74:	40d1      	lsrs	r1, r2
 8000a76:	1e5a      	subs	r2, r3, #1
 8000a78:	4193      	sbcs	r3, r2
 8000a7a:	430b      	orrs	r3, r1
 8000a7c:	e729      	b.n	80008d2 <__aeabi_fsub+0xc2>
 8000a7e:	2d00      	cmp	r5, #0
 8000a80:	d1a9      	bne.n	80009d6 <__aeabi_fsub+0x1c6>
 8000a82:	4663      	mov	r3, ip
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d056      	beq.n	8000b36 <__aeabi_fsub+0x326>
 8000a88:	2200      	movs	r2, #0
 8000a8a:	2800      	cmp	r0, #0
 8000a8c:	d100      	bne.n	8000a90 <__aeabi_fsub+0x280>
 8000a8e:	e70a      	b.n	80008a6 <__aeabi_fsub+0x96>
 8000a90:	0003      	movs	r3, r0
 8000a92:	4463      	add	r3, ip
 8000a94:	015a      	lsls	r2, r3, #5
 8000a96:	d594      	bpl.n	80009c2 <__aeabi_fsub+0x1b2>
 8000a98:	4a2b      	ldr	r2, [pc, #172]	; (8000b48 <__aeabi_fsub+0x338>)
 8000a9a:	3501      	adds	r5, #1
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	e790      	b.n	80009c2 <__aeabi_fsub+0x1b2>
 8000aa0:	4663      	mov	r3, ip
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d0af      	beq.n	8000a06 <__aeabi_fsub+0x1f6>
 8000aa6:	1e53      	subs	r3, r2, #1
 8000aa8:	2a01      	cmp	r2, #1
 8000aaa:	d015      	beq.n	8000ad8 <__aeabi_fsub+0x2c8>
 8000aac:	2aff      	cmp	r2, #255	; 0xff
 8000aae:	d02a      	beq.n	8000b06 <__aeabi_fsub+0x2f6>
 8000ab0:	001a      	movs	r2, r3
 8000ab2:	e752      	b.n	800095a <__aeabi_fsub+0x14a>
 8000ab4:	4662      	mov	r2, ip
 8000ab6:	2a00      	cmp	r2, #0
 8000ab8:	d191      	bne.n	80009de <__aeabi_fsub+0x1ce>
 8000aba:	2800      	cmp	r0, #0
 8000abc:	d198      	bne.n	80009f0 <__aeabi_fsub+0x1e0>
 8000abe:	2680      	movs	r6, #128	; 0x80
 8000ac0:	2400      	movs	r4, #0
 8000ac2:	22ff      	movs	r2, #255	; 0xff
 8000ac4:	03f6      	lsls	r6, r6, #15
 8000ac6:	e6ee      	b.n	80008a6 <__aeabi_fsub+0x96>
 8000ac8:	000c      	movs	r4, r1
 8000aca:	4643      	mov	r3, r8
 8000acc:	0015      	movs	r5, r2
 8000ace:	e77c      	b.n	80009ca <__aeabi_fsub+0x1ba>
 8000ad0:	4663      	mov	r3, ip
 8000ad2:	000c      	movs	r4, r1
 8000ad4:	1ac6      	subs	r6, r0, r3
 8000ad6:	e6c9      	b.n	800086c <__aeabi_fsub+0x5c>
 8000ad8:	0003      	movs	r3, r0
 8000ada:	4463      	add	r3, ip
 8000adc:	2501      	movs	r5, #1
 8000ade:	015a      	lsls	r2, r3, #5
 8000ae0:	d400      	bmi.n	8000ae4 <__aeabi_fsub+0x2d4>
 8000ae2:	e76e      	b.n	80009c2 <__aeabi_fsub+0x1b2>
 8000ae4:	2502      	movs	r5, #2
 8000ae6:	e6fa      	b.n	80008de <__aeabi_fsub+0xce>
 8000ae8:	4663      	mov	r3, ip
 8000aea:	2501      	movs	r5, #1
 8000aec:	1a1b      	subs	r3, r3, r0
 8000aee:	e6b8      	b.n	8000862 <__aeabi_fsub+0x52>
 8000af0:	4664      	mov	r4, ip
 8000af2:	2320      	movs	r3, #32
 8000af4:	40d4      	lsrs	r4, r2
 8000af6:	1a9b      	subs	r3, r3, r2
 8000af8:	4662      	mov	r2, ip
 8000afa:	409a      	lsls	r2, r3
 8000afc:	0013      	movs	r3, r2
 8000afe:	1e5a      	subs	r2, r3, #1
 8000b00:	4193      	sbcs	r3, r2
 8000b02:	4323      	orrs	r3, r4
 8000b04:	e7a2      	b.n	8000a4c <__aeabi_fsub+0x23c>
 8000b06:	4643      	mov	r3, r8
 8000b08:	e774      	b.n	80009f4 <__aeabi_fsub+0x1e4>
 8000b0a:	4661      	mov	r1, ip
 8000b0c:	2320      	movs	r3, #32
 8000b0e:	40d1      	lsrs	r1, r2
 8000b10:	1a9b      	subs	r3, r3, r2
 8000b12:	4662      	mov	r2, ip
 8000b14:	409a      	lsls	r2, r3
 8000b16:	0013      	movs	r3, r2
 8000b18:	1e5a      	subs	r2, r3, #1
 8000b1a:	4193      	sbcs	r3, r2
 8000b1c:	430b      	orrs	r3, r1
 8000b1e:	e720      	b.n	8000962 <__aeabi_fsub+0x152>
 8000b20:	4663      	mov	r3, ip
 8000b22:	000c      	movs	r4, r1
 8000b24:	2501      	movs	r5, #1
 8000b26:	1ac3      	subs	r3, r0, r3
 8000b28:	e69b      	b.n	8000862 <__aeabi_fsub+0x52>
 8000b2a:	2800      	cmp	r0, #0
 8000b2c:	d099      	beq.n	8000a62 <__aeabi_fsub+0x252>
 8000b2e:	000c      	movs	r4, r1
 8000b30:	4646      	mov	r6, r8
 8000b32:	2200      	movs	r2, #0
 8000b34:	e6b7      	b.n	80008a6 <__aeabi_fsub+0x96>
 8000b36:	4646      	mov	r6, r8
 8000b38:	2200      	movs	r2, #0
 8000b3a:	e6b4      	b.n	80008a6 <__aeabi_fsub+0x96>
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d000      	beq.n	8000b42 <__aeabi_fsub+0x332>
 8000b40:	e73f      	b.n	80009c2 <__aeabi_fsub+0x1b2>
 8000b42:	2400      	movs	r4, #0
 8000b44:	2600      	movs	r6, #0
 8000b46:	e6ae      	b.n	80008a6 <__aeabi_fsub+0x96>
 8000b48:	fbffffff 	.word	0xfbffffff
 8000b4c:	7dffffff 	.word	0x7dffffff

08000b50 <__aeabi_f2iz>:
 8000b50:	0241      	lsls	r1, r0, #9
 8000b52:	0042      	lsls	r2, r0, #1
 8000b54:	0fc3      	lsrs	r3, r0, #31
 8000b56:	0a49      	lsrs	r1, r1, #9
 8000b58:	2000      	movs	r0, #0
 8000b5a:	0e12      	lsrs	r2, r2, #24
 8000b5c:	2a7e      	cmp	r2, #126	; 0x7e
 8000b5e:	dd03      	ble.n	8000b68 <__aeabi_f2iz+0x18>
 8000b60:	2a9d      	cmp	r2, #157	; 0x9d
 8000b62:	dd02      	ble.n	8000b6a <__aeabi_f2iz+0x1a>
 8000b64:	4a09      	ldr	r2, [pc, #36]	; (8000b8c <__aeabi_f2iz+0x3c>)
 8000b66:	1898      	adds	r0, r3, r2
 8000b68:	4770      	bx	lr
 8000b6a:	2080      	movs	r0, #128	; 0x80
 8000b6c:	0400      	lsls	r0, r0, #16
 8000b6e:	4301      	orrs	r1, r0
 8000b70:	2a95      	cmp	r2, #149	; 0x95
 8000b72:	dc07      	bgt.n	8000b84 <__aeabi_f2iz+0x34>
 8000b74:	2096      	movs	r0, #150	; 0x96
 8000b76:	1a82      	subs	r2, r0, r2
 8000b78:	40d1      	lsrs	r1, r2
 8000b7a:	4248      	negs	r0, r1
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d1f3      	bne.n	8000b68 <__aeabi_f2iz+0x18>
 8000b80:	0008      	movs	r0, r1
 8000b82:	e7f1      	b.n	8000b68 <__aeabi_f2iz+0x18>
 8000b84:	3a96      	subs	r2, #150	; 0x96
 8000b86:	4091      	lsls	r1, r2
 8000b88:	e7f7      	b.n	8000b7a <__aeabi_f2iz+0x2a>
 8000b8a:	46c0      	nop			; (mov r8, r8)
 8000b8c:	7fffffff 	.word	0x7fffffff

08000b90 <__aeabi_i2f>:
 8000b90:	b570      	push	{r4, r5, r6, lr}
 8000b92:	2800      	cmp	r0, #0
 8000b94:	d013      	beq.n	8000bbe <__aeabi_i2f+0x2e>
 8000b96:	17c3      	asrs	r3, r0, #31
 8000b98:	18c5      	adds	r5, r0, r3
 8000b9a:	405d      	eors	r5, r3
 8000b9c:	0fc4      	lsrs	r4, r0, #31
 8000b9e:	0028      	movs	r0, r5
 8000ba0:	f000 ff0e 	bl	80019c0 <__clzsi2>
 8000ba4:	239e      	movs	r3, #158	; 0x9e
 8000ba6:	0001      	movs	r1, r0
 8000ba8:	1a1b      	subs	r3, r3, r0
 8000baa:	2b96      	cmp	r3, #150	; 0x96
 8000bac:	dc0f      	bgt.n	8000bce <__aeabi_i2f+0x3e>
 8000bae:	2808      	cmp	r0, #8
 8000bb0:	d031      	beq.n	8000c16 <__aeabi_i2f+0x86>
 8000bb2:	3908      	subs	r1, #8
 8000bb4:	408d      	lsls	r5, r1
 8000bb6:	026d      	lsls	r5, r5, #9
 8000bb8:	0a6d      	lsrs	r5, r5, #9
 8000bba:	b2d8      	uxtb	r0, r3
 8000bbc:	e002      	b.n	8000bc4 <__aeabi_i2f+0x34>
 8000bbe:	2400      	movs	r4, #0
 8000bc0:	2000      	movs	r0, #0
 8000bc2:	2500      	movs	r5, #0
 8000bc4:	05c0      	lsls	r0, r0, #23
 8000bc6:	4328      	orrs	r0, r5
 8000bc8:	07e4      	lsls	r4, r4, #31
 8000bca:	4320      	orrs	r0, r4
 8000bcc:	bd70      	pop	{r4, r5, r6, pc}
 8000bce:	2b99      	cmp	r3, #153	; 0x99
 8000bd0:	dd0c      	ble.n	8000bec <__aeabi_i2f+0x5c>
 8000bd2:	2205      	movs	r2, #5
 8000bd4:	1a12      	subs	r2, r2, r0
 8000bd6:	0028      	movs	r0, r5
 8000bd8:	40d0      	lsrs	r0, r2
 8000bda:	0002      	movs	r2, r0
 8000bdc:	0008      	movs	r0, r1
 8000bde:	301b      	adds	r0, #27
 8000be0:	4085      	lsls	r5, r0
 8000be2:	0028      	movs	r0, r5
 8000be4:	1e45      	subs	r5, r0, #1
 8000be6:	41a8      	sbcs	r0, r5
 8000be8:	4302      	orrs	r2, r0
 8000bea:	0015      	movs	r5, r2
 8000bec:	2905      	cmp	r1, #5
 8000bee:	dc16      	bgt.n	8000c1e <__aeabi_i2f+0x8e>
 8000bf0:	002a      	movs	r2, r5
 8000bf2:	480f      	ldr	r0, [pc, #60]	; (8000c30 <__aeabi_i2f+0xa0>)
 8000bf4:	4002      	ands	r2, r0
 8000bf6:	076e      	lsls	r6, r5, #29
 8000bf8:	d009      	beq.n	8000c0e <__aeabi_i2f+0x7e>
 8000bfa:	260f      	movs	r6, #15
 8000bfc:	4035      	ands	r5, r6
 8000bfe:	2d04      	cmp	r5, #4
 8000c00:	d005      	beq.n	8000c0e <__aeabi_i2f+0x7e>
 8000c02:	3204      	adds	r2, #4
 8000c04:	0155      	lsls	r5, r2, #5
 8000c06:	d502      	bpl.n	8000c0e <__aeabi_i2f+0x7e>
 8000c08:	239f      	movs	r3, #159	; 0x9f
 8000c0a:	4002      	ands	r2, r0
 8000c0c:	1a5b      	subs	r3, r3, r1
 8000c0e:	0192      	lsls	r2, r2, #6
 8000c10:	0a55      	lsrs	r5, r2, #9
 8000c12:	b2d8      	uxtb	r0, r3
 8000c14:	e7d6      	b.n	8000bc4 <__aeabi_i2f+0x34>
 8000c16:	026d      	lsls	r5, r5, #9
 8000c18:	2096      	movs	r0, #150	; 0x96
 8000c1a:	0a6d      	lsrs	r5, r5, #9
 8000c1c:	e7d2      	b.n	8000bc4 <__aeabi_i2f+0x34>
 8000c1e:	1f4a      	subs	r2, r1, #5
 8000c20:	4095      	lsls	r5, r2
 8000c22:	002a      	movs	r2, r5
 8000c24:	4802      	ldr	r0, [pc, #8]	; (8000c30 <__aeabi_i2f+0xa0>)
 8000c26:	4002      	ands	r2, r0
 8000c28:	076e      	lsls	r6, r5, #29
 8000c2a:	d0f0      	beq.n	8000c0e <__aeabi_i2f+0x7e>
 8000c2c:	e7e5      	b.n	8000bfa <__aeabi_i2f+0x6a>
 8000c2e:	46c0      	nop			; (mov r8, r8)
 8000c30:	fbffffff 	.word	0xfbffffff

08000c34 <__aeabi_ui2f>:
 8000c34:	b570      	push	{r4, r5, r6, lr}
 8000c36:	1e04      	subs	r4, r0, #0
 8000c38:	d00e      	beq.n	8000c58 <__aeabi_ui2f+0x24>
 8000c3a:	f000 fec1 	bl	80019c0 <__clzsi2>
 8000c3e:	239e      	movs	r3, #158	; 0x9e
 8000c40:	0001      	movs	r1, r0
 8000c42:	1a1b      	subs	r3, r3, r0
 8000c44:	2b96      	cmp	r3, #150	; 0x96
 8000c46:	dc0c      	bgt.n	8000c62 <__aeabi_ui2f+0x2e>
 8000c48:	2808      	cmp	r0, #8
 8000c4a:	d02c      	beq.n	8000ca6 <__aeabi_ui2f+0x72>
 8000c4c:	3908      	subs	r1, #8
 8000c4e:	408c      	lsls	r4, r1
 8000c50:	0264      	lsls	r4, r4, #9
 8000c52:	0a64      	lsrs	r4, r4, #9
 8000c54:	b2d8      	uxtb	r0, r3
 8000c56:	e001      	b.n	8000c5c <__aeabi_ui2f+0x28>
 8000c58:	2000      	movs	r0, #0
 8000c5a:	2400      	movs	r4, #0
 8000c5c:	05c0      	lsls	r0, r0, #23
 8000c5e:	4320      	orrs	r0, r4
 8000c60:	bd70      	pop	{r4, r5, r6, pc}
 8000c62:	2b99      	cmp	r3, #153	; 0x99
 8000c64:	dd0a      	ble.n	8000c7c <__aeabi_ui2f+0x48>
 8000c66:	0002      	movs	r2, r0
 8000c68:	0020      	movs	r0, r4
 8000c6a:	321b      	adds	r2, #27
 8000c6c:	4090      	lsls	r0, r2
 8000c6e:	0002      	movs	r2, r0
 8000c70:	1e50      	subs	r0, r2, #1
 8000c72:	4182      	sbcs	r2, r0
 8000c74:	2005      	movs	r0, #5
 8000c76:	1a40      	subs	r0, r0, r1
 8000c78:	40c4      	lsrs	r4, r0
 8000c7a:	4314      	orrs	r4, r2
 8000c7c:	2905      	cmp	r1, #5
 8000c7e:	dc16      	bgt.n	8000cae <__aeabi_ui2f+0x7a>
 8000c80:	0022      	movs	r2, r4
 8000c82:	480f      	ldr	r0, [pc, #60]	; (8000cc0 <__aeabi_ui2f+0x8c>)
 8000c84:	4002      	ands	r2, r0
 8000c86:	0765      	lsls	r5, r4, #29
 8000c88:	d009      	beq.n	8000c9e <__aeabi_ui2f+0x6a>
 8000c8a:	250f      	movs	r5, #15
 8000c8c:	402c      	ands	r4, r5
 8000c8e:	2c04      	cmp	r4, #4
 8000c90:	d005      	beq.n	8000c9e <__aeabi_ui2f+0x6a>
 8000c92:	3204      	adds	r2, #4
 8000c94:	0154      	lsls	r4, r2, #5
 8000c96:	d502      	bpl.n	8000c9e <__aeabi_ui2f+0x6a>
 8000c98:	239f      	movs	r3, #159	; 0x9f
 8000c9a:	4002      	ands	r2, r0
 8000c9c:	1a5b      	subs	r3, r3, r1
 8000c9e:	0192      	lsls	r2, r2, #6
 8000ca0:	0a54      	lsrs	r4, r2, #9
 8000ca2:	b2d8      	uxtb	r0, r3
 8000ca4:	e7da      	b.n	8000c5c <__aeabi_ui2f+0x28>
 8000ca6:	0264      	lsls	r4, r4, #9
 8000ca8:	2096      	movs	r0, #150	; 0x96
 8000caa:	0a64      	lsrs	r4, r4, #9
 8000cac:	e7d6      	b.n	8000c5c <__aeabi_ui2f+0x28>
 8000cae:	1f4a      	subs	r2, r1, #5
 8000cb0:	4094      	lsls	r4, r2
 8000cb2:	0022      	movs	r2, r4
 8000cb4:	4802      	ldr	r0, [pc, #8]	; (8000cc0 <__aeabi_ui2f+0x8c>)
 8000cb6:	4002      	ands	r2, r0
 8000cb8:	0765      	lsls	r5, r4, #29
 8000cba:	d0f0      	beq.n	8000c9e <__aeabi_ui2f+0x6a>
 8000cbc:	e7e5      	b.n	8000c8a <__aeabi_ui2f+0x56>
 8000cbe:	46c0      	nop			; (mov r8, r8)
 8000cc0:	fbffffff 	.word	0xfbffffff

08000cc4 <__aeabi_ddiv>:
 8000cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cc6:	4657      	mov	r7, sl
 8000cc8:	464e      	mov	r6, r9
 8000cca:	4645      	mov	r5, r8
 8000ccc:	46de      	mov	lr, fp
 8000cce:	b5e0      	push	{r5, r6, r7, lr}
 8000cd0:	030c      	lsls	r4, r1, #12
 8000cd2:	001f      	movs	r7, r3
 8000cd4:	004b      	lsls	r3, r1, #1
 8000cd6:	4681      	mov	r9, r0
 8000cd8:	4692      	mov	sl, r2
 8000cda:	0005      	movs	r5, r0
 8000cdc:	b085      	sub	sp, #20
 8000cde:	0b24      	lsrs	r4, r4, #12
 8000ce0:	0d5b      	lsrs	r3, r3, #21
 8000ce2:	0fce      	lsrs	r6, r1, #31
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d100      	bne.n	8000cea <__aeabi_ddiv+0x26>
 8000ce8:	e152      	b.n	8000f90 <__aeabi_ddiv+0x2cc>
 8000cea:	4ad2      	ldr	r2, [pc, #840]	; (8001034 <__aeabi_ddiv+0x370>)
 8000cec:	4293      	cmp	r3, r2
 8000cee:	d100      	bne.n	8000cf2 <__aeabi_ddiv+0x2e>
 8000cf0:	e16e      	b.n	8000fd0 <__aeabi_ddiv+0x30c>
 8000cf2:	0f42      	lsrs	r2, r0, #29
 8000cf4:	00e4      	lsls	r4, r4, #3
 8000cf6:	4314      	orrs	r4, r2
 8000cf8:	2280      	movs	r2, #128	; 0x80
 8000cfa:	0412      	lsls	r2, r2, #16
 8000cfc:	4322      	orrs	r2, r4
 8000cfe:	4690      	mov	r8, r2
 8000d00:	4acd      	ldr	r2, [pc, #820]	; (8001038 <__aeabi_ddiv+0x374>)
 8000d02:	00c5      	lsls	r5, r0, #3
 8000d04:	4693      	mov	fp, r2
 8000d06:	449b      	add	fp, r3
 8000d08:	2300      	movs	r3, #0
 8000d0a:	4699      	mov	r9, r3
 8000d0c:	9300      	str	r3, [sp, #0]
 8000d0e:	033c      	lsls	r4, r7, #12
 8000d10:	007b      	lsls	r3, r7, #1
 8000d12:	4650      	mov	r0, sl
 8000d14:	0b24      	lsrs	r4, r4, #12
 8000d16:	0d5b      	lsrs	r3, r3, #21
 8000d18:	0fff      	lsrs	r7, r7, #31
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d100      	bne.n	8000d20 <__aeabi_ddiv+0x5c>
 8000d1e:	e11a      	b.n	8000f56 <__aeabi_ddiv+0x292>
 8000d20:	4ac4      	ldr	r2, [pc, #784]	; (8001034 <__aeabi_ddiv+0x370>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d100      	bne.n	8000d28 <__aeabi_ddiv+0x64>
 8000d26:	e15e      	b.n	8000fe6 <__aeabi_ddiv+0x322>
 8000d28:	0f42      	lsrs	r2, r0, #29
 8000d2a:	00e4      	lsls	r4, r4, #3
 8000d2c:	4322      	orrs	r2, r4
 8000d2e:	2480      	movs	r4, #128	; 0x80
 8000d30:	0424      	lsls	r4, r4, #16
 8000d32:	4314      	orrs	r4, r2
 8000d34:	4ac0      	ldr	r2, [pc, #768]	; (8001038 <__aeabi_ddiv+0x374>)
 8000d36:	00c1      	lsls	r1, r0, #3
 8000d38:	4694      	mov	ip, r2
 8000d3a:	465a      	mov	r2, fp
 8000d3c:	4463      	add	r3, ip
 8000d3e:	1ad3      	subs	r3, r2, r3
 8000d40:	469b      	mov	fp, r3
 8000d42:	2000      	movs	r0, #0
 8000d44:	0033      	movs	r3, r6
 8000d46:	407b      	eors	r3, r7
 8000d48:	469a      	mov	sl, r3
 8000d4a:	464b      	mov	r3, r9
 8000d4c:	2b0f      	cmp	r3, #15
 8000d4e:	d827      	bhi.n	8000da0 <__aeabi_ddiv+0xdc>
 8000d50:	4aba      	ldr	r2, [pc, #744]	; (800103c <__aeabi_ddiv+0x378>)
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	58d3      	ldr	r3, [r2, r3]
 8000d56:	469f      	mov	pc, r3
 8000d58:	46b2      	mov	sl, r6
 8000d5a:	9b00      	ldr	r3, [sp, #0]
 8000d5c:	2b02      	cmp	r3, #2
 8000d5e:	d016      	beq.n	8000d8e <__aeabi_ddiv+0xca>
 8000d60:	2b03      	cmp	r3, #3
 8000d62:	d100      	bne.n	8000d66 <__aeabi_ddiv+0xa2>
 8000d64:	e287      	b.n	8001276 <__aeabi_ddiv+0x5b2>
 8000d66:	2b01      	cmp	r3, #1
 8000d68:	d000      	beq.n	8000d6c <__aeabi_ddiv+0xa8>
 8000d6a:	e0d5      	b.n	8000f18 <__aeabi_ddiv+0x254>
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2500      	movs	r5, #0
 8000d72:	051b      	lsls	r3, r3, #20
 8000d74:	4313      	orrs	r3, r2
 8000d76:	4652      	mov	r2, sl
 8000d78:	07d2      	lsls	r2, r2, #31
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	0028      	movs	r0, r5
 8000d7e:	0019      	movs	r1, r3
 8000d80:	b005      	add	sp, #20
 8000d82:	bcf0      	pop	{r4, r5, r6, r7}
 8000d84:	46bb      	mov	fp, r7
 8000d86:	46b2      	mov	sl, r6
 8000d88:	46a9      	mov	r9, r5
 8000d8a:	46a0      	mov	r8, r4
 8000d8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d8e:	2200      	movs	r2, #0
 8000d90:	2500      	movs	r5, #0
 8000d92:	4ba8      	ldr	r3, [pc, #672]	; (8001034 <__aeabi_ddiv+0x370>)
 8000d94:	e7ed      	b.n	8000d72 <__aeabi_ddiv+0xae>
 8000d96:	46ba      	mov	sl, r7
 8000d98:	46a0      	mov	r8, r4
 8000d9a:	000d      	movs	r5, r1
 8000d9c:	9000      	str	r0, [sp, #0]
 8000d9e:	e7dc      	b.n	8000d5a <__aeabi_ddiv+0x96>
 8000da0:	4544      	cmp	r4, r8
 8000da2:	d200      	bcs.n	8000da6 <__aeabi_ddiv+0xe2>
 8000da4:	e1c4      	b.n	8001130 <__aeabi_ddiv+0x46c>
 8000da6:	d100      	bne.n	8000daa <__aeabi_ddiv+0xe6>
 8000da8:	e1bf      	b.n	800112a <__aeabi_ddiv+0x466>
 8000daa:	2301      	movs	r3, #1
 8000dac:	425b      	negs	r3, r3
 8000dae:	469c      	mov	ip, r3
 8000db0:	002e      	movs	r6, r5
 8000db2:	4640      	mov	r0, r8
 8000db4:	2500      	movs	r5, #0
 8000db6:	44e3      	add	fp, ip
 8000db8:	0223      	lsls	r3, r4, #8
 8000dba:	0e0c      	lsrs	r4, r1, #24
 8000dbc:	431c      	orrs	r4, r3
 8000dbe:	0c1b      	lsrs	r3, r3, #16
 8000dc0:	4699      	mov	r9, r3
 8000dc2:	0423      	lsls	r3, r4, #16
 8000dc4:	020a      	lsls	r2, r1, #8
 8000dc6:	0c1f      	lsrs	r7, r3, #16
 8000dc8:	4649      	mov	r1, r9
 8000dca:	9200      	str	r2, [sp, #0]
 8000dcc:	9701      	str	r7, [sp, #4]
 8000dce:	f7ff fa2b 	bl	8000228 <__aeabi_uidivmod>
 8000dd2:	0002      	movs	r2, r0
 8000dd4:	437a      	muls	r2, r7
 8000dd6:	040b      	lsls	r3, r1, #16
 8000dd8:	0c31      	lsrs	r1, r6, #16
 8000dda:	4680      	mov	r8, r0
 8000ddc:	4319      	orrs	r1, r3
 8000dde:	428a      	cmp	r2, r1
 8000de0:	d907      	bls.n	8000df2 <__aeabi_ddiv+0x12e>
 8000de2:	2301      	movs	r3, #1
 8000de4:	425b      	negs	r3, r3
 8000de6:	469c      	mov	ip, r3
 8000de8:	1909      	adds	r1, r1, r4
 8000dea:	44e0      	add	r8, ip
 8000dec:	428c      	cmp	r4, r1
 8000dee:	d800      	bhi.n	8000df2 <__aeabi_ddiv+0x12e>
 8000df0:	e201      	b.n	80011f6 <__aeabi_ddiv+0x532>
 8000df2:	1a88      	subs	r0, r1, r2
 8000df4:	4649      	mov	r1, r9
 8000df6:	f7ff fa17 	bl	8000228 <__aeabi_uidivmod>
 8000dfa:	9a01      	ldr	r2, [sp, #4]
 8000dfc:	0436      	lsls	r6, r6, #16
 8000dfe:	4342      	muls	r2, r0
 8000e00:	0409      	lsls	r1, r1, #16
 8000e02:	0c36      	lsrs	r6, r6, #16
 8000e04:	0003      	movs	r3, r0
 8000e06:	430e      	orrs	r6, r1
 8000e08:	42b2      	cmp	r2, r6
 8000e0a:	d904      	bls.n	8000e16 <__aeabi_ddiv+0x152>
 8000e0c:	1936      	adds	r6, r6, r4
 8000e0e:	3b01      	subs	r3, #1
 8000e10:	42b4      	cmp	r4, r6
 8000e12:	d800      	bhi.n	8000e16 <__aeabi_ddiv+0x152>
 8000e14:	e1e9      	b.n	80011ea <__aeabi_ddiv+0x526>
 8000e16:	1ab0      	subs	r0, r6, r2
 8000e18:	4642      	mov	r2, r8
 8000e1a:	9e00      	ldr	r6, [sp, #0]
 8000e1c:	0412      	lsls	r2, r2, #16
 8000e1e:	431a      	orrs	r2, r3
 8000e20:	0c33      	lsrs	r3, r6, #16
 8000e22:	001f      	movs	r7, r3
 8000e24:	0c11      	lsrs	r1, r2, #16
 8000e26:	4690      	mov	r8, r2
 8000e28:	9302      	str	r3, [sp, #8]
 8000e2a:	0413      	lsls	r3, r2, #16
 8000e2c:	0432      	lsls	r2, r6, #16
 8000e2e:	0c16      	lsrs	r6, r2, #16
 8000e30:	0032      	movs	r2, r6
 8000e32:	0c1b      	lsrs	r3, r3, #16
 8000e34:	435a      	muls	r2, r3
 8000e36:	9603      	str	r6, [sp, #12]
 8000e38:	437b      	muls	r3, r7
 8000e3a:	434e      	muls	r6, r1
 8000e3c:	4379      	muls	r1, r7
 8000e3e:	0c17      	lsrs	r7, r2, #16
 8000e40:	46bc      	mov	ip, r7
 8000e42:	199b      	adds	r3, r3, r6
 8000e44:	4463      	add	r3, ip
 8000e46:	429e      	cmp	r6, r3
 8000e48:	d903      	bls.n	8000e52 <__aeabi_ddiv+0x18e>
 8000e4a:	2680      	movs	r6, #128	; 0x80
 8000e4c:	0276      	lsls	r6, r6, #9
 8000e4e:	46b4      	mov	ip, r6
 8000e50:	4461      	add	r1, ip
 8000e52:	0c1e      	lsrs	r6, r3, #16
 8000e54:	1871      	adds	r1, r6, r1
 8000e56:	0416      	lsls	r6, r2, #16
 8000e58:	041b      	lsls	r3, r3, #16
 8000e5a:	0c36      	lsrs	r6, r6, #16
 8000e5c:	199e      	adds	r6, r3, r6
 8000e5e:	4288      	cmp	r0, r1
 8000e60:	d302      	bcc.n	8000e68 <__aeabi_ddiv+0x1a4>
 8000e62:	d112      	bne.n	8000e8a <__aeabi_ddiv+0x1c6>
 8000e64:	42b5      	cmp	r5, r6
 8000e66:	d210      	bcs.n	8000e8a <__aeabi_ddiv+0x1c6>
 8000e68:	4643      	mov	r3, r8
 8000e6a:	1e5a      	subs	r2, r3, #1
 8000e6c:	9b00      	ldr	r3, [sp, #0]
 8000e6e:	469c      	mov	ip, r3
 8000e70:	4465      	add	r5, ip
 8000e72:	001f      	movs	r7, r3
 8000e74:	429d      	cmp	r5, r3
 8000e76:	419b      	sbcs	r3, r3
 8000e78:	425b      	negs	r3, r3
 8000e7a:	191b      	adds	r3, r3, r4
 8000e7c:	18c0      	adds	r0, r0, r3
 8000e7e:	4284      	cmp	r4, r0
 8000e80:	d200      	bcs.n	8000e84 <__aeabi_ddiv+0x1c0>
 8000e82:	e19e      	b.n	80011c2 <__aeabi_ddiv+0x4fe>
 8000e84:	d100      	bne.n	8000e88 <__aeabi_ddiv+0x1c4>
 8000e86:	e199      	b.n	80011bc <__aeabi_ddiv+0x4f8>
 8000e88:	4690      	mov	r8, r2
 8000e8a:	1bae      	subs	r6, r5, r6
 8000e8c:	42b5      	cmp	r5, r6
 8000e8e:	41ad      	sbcs	r5, r5
 8000e90:	1a40      	subs	r0, r0, r1
 8000e92:	426d      	negs	r5, r5
 8000e94:	1b40      	subs	r0, r0, r5
 8000e96:	4284      	cmp	r4, r0
 8000e98:	d100      	bne.n	8000e9c <__aeabi_ddiv+0x1d8>
 8000e9a:	e1d2      	b.n	8001242 <__aeabi_ddiv+0x57e>
 8000e9c:	4649      	mov	r1, r9
 8000e9e:	f7ff f9c3 	bl	8000228 <__aeabi_uidivmod>
 8000ea2:	9a01      	ldr	r2, [sp, #4]
 8000ea4:	040b      	lsls	r3, r1, #16
 8000ea6:	4342      	muls	r2, r0
 8000ea8:	0c31      	lsrs	r1, r6, #16
 8000eaa:	0005      	movs	r5, r0
 8000eac:	4319      	orrs	r1, r3
 8000eae:	428a      	cmp	r2, r1
 8000eb0:	d900      	bls.n	8000eb4 <__aeabi_ddiv+0x1f0>
 8000eb2:	e16c      	b.n	800118e <__aeabi_ddiv+0x4ca>
 8000eb4:	1a88      	subs	r0, r1, r2
 8000eb6:	4649      	mov	r1, r9
 8000eb8:	f7ff f9b6 	bl	8000228 <__aeabi_uidivmod>
 8000ebc:	9a01      	ldr	r2, [sp, #4]
 8000ebe:	0436      	lsls	r6, r6, #16
 8000ec0:	4342      	muls	r2, r0
 8000ec2:	0409      	lsls	r1, r1, #16
 8000ec4:	0c36      	lsrs	r6, r6, #16
 8000ec6:	0003      	movs	r3, r0
 8000ec8:	430e      	orrs	r6, r1
 8000eca:	42b2      	cmp	r2, r6
 8000ecc:	d900      	bls.n	8000ed0 <__aeabi_ddiv+0x20c>
 8000ece:	e153      	b.n	8001178 <__aeabi_ddiv+0x4b4>
 8000ed0:	9803      	ldr	r0, [sp, #12]
 8000ed2:	1ab6      	subs	r6, r6, r2
 8000ed4:	0002      	movs	r2, r0
 8000ed6:	042d      	lsls	r5, r5, #16
 8000ed8:	431d      	orrs	r5, r3
 8000eda:	9f02      	ldr	r7, [sp, #8]
 8000edc:	042b      	lsls	r3, r5, #16
 8000ede:	0c1b      	lsrs	r3, r3, #16
 8000ee0:	435a      	muls	r2, r3
 8000ee2:	437b      	muls	r3, r7
 8000ee4:	469c      	mov	ip, r3
 8000ee6:	0c29      	lsrs	r1, r5, #16
 8000ee8:	4348      	muls	r0, r1
 8000eea:	0c13      	lsrs	r3, r2, #16
 8000eec:	4484      	add	ip, r0
 8000eee:	4463      	add	r3, ip
 8000ef0:	4379      	muls	r1, r7
 8000ef2:	4298      	cmp	r0, r3
 8000ef4:	d903      	bls.n	8000efe <__aeabi_ddiv+0x23a>
 8000ef6:	2080      	movs	r0, #128	; 0x80
 8000ef8:	0240      	lsls	r0, r0, #9
 8000efa:	4684      	mov	ip, r0
 8000efc:	4461      	add	r1, ip
 8000efe:	0c18      	lsrs	r0, r3, #16
 8000f00:	0412      	lsls	r2, r2, #16
 8000f02:	041b      	lsls	r3, r3, #16
 8000f04:	0c12      	lsrs	r2, r2, #16
 8000f06:	1840      	adds	r0, r0, r1
 8000f08:	189b      	adds	r3, r3, r2
 8000f0a:	4286      	cmp	r6, r0
 8000f0c:	d200      	bcs.n	8000f10 <__aeabi_ddiv+0x24c>
 8000f0e:	e100      	b.n	8001112 <__aeabi_ddiv+0x44e>
 8000f10:	d100      	bne.n	8000f14 <__aeabi_ddiv+0x250>
 8000f12:	e0fb      	b.n	800110c <__aeabi_ddiv+0x448>
 8000f14:	2301      	movs	r3, #1
 8000f16:	431d      	orrs	r5, r3
 8000f18:	4b49      	ldr	r3, [pc, #292]	; (8001040 <__aeabi_ddiv+0x37c>)
 8000f1a:	445b      	add	r3, fp
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	dc00      	bgt.n	8000f22 <__aeabi_ddiv+0x25e>
 8000f20:	e0aa      	b.n	8001078 <__aeabi_ddiv+0x3b4>
 8000f22:	076a      	lsls	r2, r5, #29
 8000f24:	d000      	beq.n	8000f28 <__aeabi_ddiv+0x264>
 8000f26:	e13d      	b.n	80011a4 <__aeabi_ddiv+0x4e0>
 8000f28:	08e9      	lsrs	r1, r5, #3
 8000f2a:	4642      	mov	r2, r8
 8000f2c:	01d2      	lsls	r2, r2, #7
 8000f2e:	d506      	bpl.n	8000f3e <__aeabi_ddiv+0x27a>
 8000f30:	4642      	mov	r2, r8
 8000f32:	4b44      	ldr	r3, [pc, #272]	; (8001044 <__aeabi_ddiv+0x380>)
 8000f34:	401a      	ands	r2, r3
 8000f36:	2380      	movs	r3, #128	; 0x80
 8000f38:	4690      	mov	r8, r2
 8000f3a:	00db      	lsls	r3, r3, #3
 8000f3c:	445b      	add	r3, fp
 8000f3e:	4a42      	ldr	r2, [pc, #264]	; (8001048 <__aeabi_ddiv+0x384>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	dd00      	ble.n	8000f46 <__aeabi_ddiv+0x282>
 8000f44:	e723      	b.n	8000d8e <__aeabi_ddiv+0xca>
 8000f46:	4642      	mov	r2, r8
 8000f48:	055b      	lsls	r3, r3, #21
 8000f4a:	0755      	lsls	r5, r2, #29
 8000f4c:	0252      	lsls	r2, r2, #9
 8000f4e:	430d      	orrs	r5, r1
 8000f50:	0b12      	lsrs	r2, r2, #12
 8000f52:	0d5b      	lsrs	r3, r3, #21
 8000f54:	e70d      	b.n	8000d72 <__aeabi_ddiv+0xae>
 8000f56:	4651      	mov	r1, sl
 8000f58:	4321      	orrs	r1, r4
 8000f5a:	d100      	bne.n	8000f5e <__aeabi_ddiv+0x29a>
 8000f5c:	e07c      	b.n	8001058 <__aeabi_ddiv+0x394>
 8000f5e:	2c00      	cmp	r4, #0
 8000f60:	d100      	bne.n	8000f64 <__aeabi_ddiv+0x2a0>
 8000f62:	e0fb      	b.n	800115c <__aeabi_ddiv+0x498>
 8000f64:	0020      	movs	r0, r4
 8000f66:	f000 fd2b 	bl	80019c0 <__clzsi2>
 8000f6a:	0002      	movs	r2, r0
 8000f6c:	3a0b      	subs	r2, #11
 8000f6e:	231d      	movs	r3, #29
 8000f70:	1a9b      	subs	r3, r3, r2
 8000f72:	4652      	mov	r2, sl
 8000f74:	0001      	movs	r1, r0
 8000f76:	40da      	lsrs	r2, r3
 8000f78:	4653      	mov	r3, sl
 8000f7a:	3908      	subs	r1, #8
 8000f7c:	408b      	lsls	r3, r1
 8000f7e:	408c      	lsls	r4, r1
 8000f80:	0019      	movs	r1, r3
 8000f82:	4314      	orrs	r4, r2
 8000f84:	4b31      	ldr	r3, [pc, #196]	; (800104c <__aeabi_ddiv+0x388>)
 8000f86:	4458      	add	r0, fp
 8000f88:	469b      	mov	fp, r3
 8000f8a:	4483      	add	fp, r0
 8000f8c:	2000      	movs	r0, #0
 8000f8e:	e6d9      	b.n	8000d44 <__aeabi_ddiv+0x80>
 8000f90:	0003      	movs	r3, r0
 8000f92:	4323      	orrs	r3, r4
 8000f94:	4698      	mov	r8, r3
 8000f96:	d044      	beq.n	8001022 <__aeabi_ddiv+0x35e>
 8000f98:	2c00      	cmp	r4, #0
 8000f9a:	d100      	bne.n	8000f9e <__aeabi_ddiv+0x2da>
 8000f9c:	e0cf      	b.n	800113e <__aeabi_ddiv+0x47a>
 8000f9e:	0020      	movs	r0, r4
 8000fa0:	f000 fd0e 	bl	80019c0 <__clzsi2>
 8000fa4:	0001      	movs	r1, r0
 8000fa6:	0002      	movs	r2, r0
 8000fa8:	390b      	subs	r1, #11
 8000faa:	231d      	movs	r3, #29
 8000fac:	1a5b      	subs	r3, r3, r1
 8000fae:	4649      	mov	r1, r9
 8000fb0:	0010      	movs	r0, r2
 8000fb2:	40d9      	lsrs	r1, r3
 8000fb4:	3808      	subs	r0, #8
 8000fb6:	4084      	lsls	r4, r0
 8000fb8:	000b      	movs	r3, r1
 8000fba:	464d      	mov	r5, r9
 8000fbc:	4323      	orrs	r3, r4
 8000fbe:	4698      	mov	r8, r3
 8000fc0:	4085      	lsls	r5, r0
 8000fc2:	4b23      	ldr	r3, [pc, #140]	; (8001050 <__aeabi_ddiv+0x38c>)
 8000fc4:	1a9b      	subs	r3, r3, r2
 8000fc6:	469b      	mov	fp, r3
 8000fc8:	2300      	movs	r3, #0
 8000fca:	4699      	mov	r9, r3
 8000fcc:	9300      	str	r3, [sp, #0]
 8000fce:	e69e      	b.n	8000d0e <__aeabi_ddiv+0x4a>
 8000fd0:	0002      	movs	r2, r0
 8000fd2:	4322      	orrs	r2, r4
 8000fd4:	4690      	mov	r8, r2
 8000fd6:	d11d      	bne.n	8001014 <__aeabi_ddiv+0x350>
 8000fd8:	2208      	movs	r2, #8
 8000fda:	469b      	mov	fp, r3
 8000fdc:	2302      	movs	r3, #2
 8000fde:	2500      	movs	r5, #0
 8000fe0:	4691      	mov	r9, r2
 8000fe2:	9300      	str	r3, [sp, #0]
 8000fe4:	e693      	b.n	8000d0e <__aeabi_ddiv+0x4a>
 8000fe6:	4651      	mov	r1, sl
 8000fe8:	4321      	orrs	r1, r4
 8000fea:	d109      	bne.n	8001000 <__aeabi_ddiv+0x33c>
 8000fec:	2302      	movs	r3, #2
 8000fee:	464a      	mov	r2, r9
 8000ff0:	431a      	orrs	r2, r3
 8000ff2:	4b18      	ldr	r3, [pc, #96]	; (8001054 <__aeabi_ddiv+0x390>)
 8000ff4:	4691      	mov	r9, r2
 8000ff6:	469c      	mov	ip, r3
 8000ff8:	2400      	movs	r4, #0
 8000ffa:	2002      	movs	r0, #2
 8000ffc:	44e3      	add	fp, ip
 8000ffe:	e6a1      	b.n	8000d44 <__aeabi_ddiv+0x80>
 8001000:	2303      	movs	r3, #3
 8001002:	464a      	mov	r2, r9
 8001004:	431a      	orrs	r2, r3
 8001006:	4b13      	ldr	r3, [pc, #76]	; (8001054 <__aeabi_ddiv+0x390>)
 8001008:	4691      	mov	r9, r2
 800100a:	469c      	mov	ip, r3
 800100c:	4651      	mov	r1, sl
 800100e:	2003      	movs	r0, #3
 8001010:	44e3      	add	fp, ip
 8001012:	e697      	b.n	8000d44 <__aeabi_ddiv+0x80>
 8001014:	220c      	movs	r2, #12
 8001016:	469b      	mov	fp, r3
 8001018:	2303      	movs	r3, #3
 800101a:	46a0      	mov	r8, r4
 800101c:	4691      	mov	r9, r2
 800101e:	9300      	str	r3, [sp, #0]
 8001020:	e675      	b.n	8000d0e <__aeabi_ddiv+0x4a>
 8001022:	2304      	movs	r3, #4
 8001024:	4699      	mov	r9, r3
 8001026:	2300      	movs	r3, #0
 8001028:	469b      	mov	fp, r3
 800102a:	3301      	adds	r3, #1
 800102c:	2500      	movs	r5, #0
 800102e:	9300      	str	r3, [sp, #0]
 8001030:	e66d      	b.n	8000d0e <__aeabi_ddiv+0x4a>
 8001032:	46c0      	nop			; (mov r8, r8)
 8001034:	000007ff 	.word	0x000007ff
 8001038:	fffffc01 	.word	0xfffffc01
 800103c:	0800591c 	.word	0x0800591c
 8001040:	000003ff 	.word	0x000003ff
 8001044:	feffffff 	.word	0xfeffffff
 8001048:	000007fe 	.word	0x000007fe
 800104c:	000003f3 	.word	0x000003f3
 8001050:	fffffc0d 	.word	0xfffffc0d
 8001054:	fffff801 	.word	0xfffff801
 8001058:	464a      	mov	r2, r9
 800105a:	2301      	movs	r3, #1
 800105c:	431a      	orrs	r2, r3
 800105e:	4691      	mov	r9, r2
 8001060:	2400      	movs	r4, #0
 8001062:	2001      	movs	r0, #1
 8001064:	e66e      	b.n	8000d44 <__aeabi_ddiv+0x80>
 8001066:	2300      	movs	r3, #0
 8001068:	2280      	movs	r2, #128	; 0x80
 800106a:	469a      	mov	sl, r3
 800106c:	2500      	movs	r5, #0
 800106e:	4b88      	ldr	r3, [pc, #544]	; (8001290 <__aeabi_ddiv+0x5cc>)
 8001070:	0312      	lsls	r2, r2, #12
 8001072:	e67e      	b.n	8000d72 <__aeabi_ddiv+0xae>
 8001074:	2501      	movs	r5, #1
 8001076:	426d      	negs	r5, r5
 8001078:	2201      	movs	r2, #1
 800107a:	1ad2      	subs	r2, r2, r3
 800107c:	2a38      	cmp	r2, #56	; 0x38
 800107e:	dd00      	ble.n	8001082 <__aeabi_ddiv+0x3be>
 8001080:	e674      	b.n	8000d6c <__aeabi_ddiv+0xa8>
 8001082:	2a1f      	cmp	r2, #31
 8001084:	dc00      	bgt.n	8001088 <__aeabi_ddiv+0x3c4>
 8001086:	e0bd      	b.n	8001204 <__aeabi_ddiv+0x540>
 8001088:	211f      	movs	r1, #31
 800108a:	4249      	negs	r1, r1
 800108c:	1acb      	subs	r3, r1, r3
 800108e:	4641      	mov	r1, r8
 8001090:	40d9      	lsrs	r1, r3
 8001092:	000b      	movs	r3, r1
 8001094:	2a20      	cmp	r2, #32
 8001096:	d004      	beq.n	80010a2 <__aeabi_ddiv+0x3de>
 8001098:	4641      	mov	r1, r8
 800109a:	4a7e      	ldr	r2, [pc, #504]	; (8001294 <__aeabi_ddiv+0x5d0>)
 800109c:	445a      	add	r2, fp
 800109e:	4091      	lsls	r1, r2
 80010a0:	430d      	orrs	r5, r1
 80010a2:	0029      	movs	r1, r5
 80010a4:	1e4a      	subs	r2, r1, #1
 80010a6:	4191      	sbcs	r1, r2
 80010a8:	4319      	orrs	r1, r3
 80010aa:	2307      	movs	r3, #7
 80010ac:	001d      	movs	r5, r3
 80010ae:	2200      	movs	r2, #0
 80010b0:	400d      	ands	r5, r1
 80010b2:	420b      	tst	r3, r1
 80010b4:	d100      	bne.n	80010b8 <__aeabi_ddiv+0x3f4>
 80010b6:	e0d0      	b.n	800125a <__aeabi_ddiv+0x596>
 80010b8:	220f      	movs	r2, #15
 80010ba:	2300      	movs	r3, #0
 80010bc:	400a      	ands	r2, r1
 80010be:	2a04      	cmp	r2, #4
 80010c0:	d100      	bne.n	80010c4 <__aeabi_ddiv+0x400>
 80010c2:	e0c7      	b.n	8001254 <__aeabi_ddiv+0x590>
 80010c4:	1d0a      	adds	r2, r1, #4
 80010c6:	428a      	cmp	r2, r1
 80010c8:	4189      	sbcs	r1, r1
 80010ca:	4249      	negs	r1, r1
 80010cc:	185b      	adds	r3, r3, r1
 80010ce:	0011      	movs	r1, r2
 80010d0:	021a      	lsls	r2, r3, #8
 80010d2:	d400      	bmi.n	80010d6 <__aeabi_ddiv+0x412>
 80010d4:	e0be      	b.n	8001254 <__aeabi_ddiv+0x590>
 80010d6:	2301      	movs	r3, #1
 80010d8:	2200      	movs	r2, #0
 80010da:	2500      	movs	r5, #0
 80010dc:	e649      	b.n	8000d72 <__aeabi_ddiv+0xae>
 80010de:	2280      	movs	r2, #128	; 0x80
 80010e0:	4643      	mov	r3, r8
 80010e2:	0312      	lsls	r2, r2, #12
 80010e4:	4213      	tst	r3, r2
 80010e6:	d008      	beq.n	80010fa <__aeabi_ddiv+0x436>
 80010e8:	4214      	tst	r4, r2
 80010ea:	d106      	bne.n	80010fa <__aeabi_ddiv+0x436>
 80010ec:	4322      	orrs	r2, r4
 80010ee:	0312      	lsls	r2, r2, #12
 80010f0:	46ba      	mov	sl, r7
 80010f2:	000d      	movs	r5, r1
 80010f4:	4b66      	ldr	r3, [pc, #408]	; (8001290 <__aeabi_ddiv+0x5cc>)
 80010f6:	0b12      	lsrs	r2, r2, #12
 80010f8:	e63b      	b.n	8000d72 <__aeabi_ddiv+0xae>
 80010fa:	2280      	movs	r2, #128	; 0x80
 80010fc:	4643      	mov	r3, r8
 80010fe:	0312      	lsls	r2, r2, #12
 8001100:	431a      	orrs	r2, r3
 8001102:	0312      	lsls	r2, r2, #12
 8001104:	46b2      	mov	sl, r6
 8001106:	4b62      	ldr	r3, [pc, #392]	; (8001290 <__aeabi_ddiv+0x5cc>)
 8001108:	0b12      	lsrs	r2, r2, #12
 800110a:	e632      	b.n	8000d72 <__aeabi_ddiv+0xae>
 800110c:	2b00      	cmp	r3, #0
 800110e:	d100      	bne.n	8001112 <__aeabi_ddiv+0x44e>
 8001110:	e702      	b.n	8000f18 <__aeabi_ddiv+0x254>
 8001112:	19a6      	adds	r6, r4, r6
 8001114:	1e6a      	subs	r2, r5, #1
 8001116:	42a6      	cmp	r6, r4
 8001118:	d200      	bcs.n	800111c <__aeabi_ddiv+0x458>
 800111a:	e089      	b.n	8001230 <__aeabi_ddiv+0x56c>
 800111c:	4286      	cmp	r6, r0
 800111e:	d200      	bcs.n	8001122 <__aeabi_ddiv+0x45e>
 8001120:	e09f      	b.n	8001262 <__aeabi_ddiv+0x59e>
 8001122:	d100      	bne.n	8001126 <__aeabi_ddiv+0x462>
 8001124:	e0af      	b.n	8001286 <__aeabi_ddiv+0x5c2>
 8001126:	0015      	movs	r5, r2
 8001128:	e6f4      	b.n	8000f14 <__aeabi_ddiv+0x250>
 800112a:	42a9      	cmp	r1, r5
 800112c:	d900      	bls.n	8001130 <__aeabi_ddiv+0x46c>
 800112e:	e63c      	b.n	8000daa <__aeabi_ddiv+0xe6>
 8001130:	4643      	mov	r3, r8
 8001132:	07de      	lsls	r6, r3, #31
 8001134:	0858      	lsrs	r0, r3, #1
 8001136:	086b      	lsrs	r3, r5, #1
 8001138:	431e      	orrs	r6, r3
 800113a:	07ed      	lsls	r5, r5, #31
 800113c:	e63c      	b.n	8000db8 <__aeabi_ddiv+0xf4>
 800113e:	f000 fc3f 	bl	80019c0 <__clzsi2>
 8001142:	0001      	movs	r1, r0
 8001144:	0002      	movs	r2, r0
 8001146:	3115      	adds	r1, #21
 8001148:	3220      	adds	r2, #32
 800114a:	291c      	cmp	r1, #28
 800114c:	dc00      	bgt.n	8001150 <__aeabi_ddiv+0x48c>
 800114e:	e72c      	b.n	8000faa <__aeabi_ddiv+0x2e6>
 8001150:	464b      	mov	r3, r9
 8001152:	3808      	subs	r0, #8
 8001154:	4083      	lsls	r3, r0
 8001156:	2500      	movs	r5, #0
 8001158:	4698      	mov	r8, r3
 800115a:	e732      	b.n	8000fc2 <__aeabi_ddiv+0x2fe>
 800115c:	f000 fc30 	bl	80019c0 <__clzsi2>
 8001160:	0003      	movs	r3, r0
 8001162:	001a      	movs	r2, r3
 8001164:	3215      	adds	r2, #21
 8001166:	3020      	adds	r0, #32
 8001168:	2a1c      	cmp	r2, #28
 800116a:	dc00      	bgt.n	800116e <__aeabi_ddiv+0x4aa>
 800116c:	e6ff      	b.n	8000f6e <__aeabi_ddiv+0x2aa>
 800116e:	4654      	mov	r4, sl
 8001170:	3b08      	subs	r3, #8
 8001172:	2100      	movs	r1, #0
 8001174:	409c      	lsls	r4, r3
 8001176:	e705      	b.n	8000f84 <__aeabi_ddiv+0x2c0>
 8001178:	1936      	adds	r6, r6, r4
 800117a:	3b01      	subs	r3, #1
 800117c:	42b4      	cmp	r4, r6
 800117e:	d900      	bls.n	8001182 <__aeabi_ddiv+0x4be>
 8001180:	e6a6      	b.n	8000ed0 <__aeabi_ddiv+0x20c>
 8001182:	42b2      	cmp	r2, r6
 8001184:	d800      	bhi.n	8001188 <__aeabi_ddiv+0x4c4>
 8001186:	e6a3      	b.n	8000ed0 <__aeabi_ddiv+0x20c>
 8001188:	1e83      	subs	r3, r0, #2
 800118a:	1936      	adds	r6, r6, r4
 800118c:	e6a0      	b.n	8000ed0 <__aeabi_ddiv+0x20c>
 800118e:	1909      	adds	r1, r1, r4
 8001190:	3d01      	subs	r5, #1
 8001192:	428c      	cmp	r4, r1
 8001194:	d900      	bls.n	8001198 <__aeabi_ddiv+0x4d4>
 8001196:	e68d      	b.n	8000eb4 <__aeabi_ddiv+0x1f0>
 8001198:	428a      	cmp	r2, r1
 800119a:	d800      	bhi.n	800119e <__aeabi_ddiv+0x4da>
 800119c:	e68a      	b.n	8000eb4 <__aeabi_ddiv+0x1f0>
 800119e:	1e85      	subs	r5, r0, #2
 80011a0:	1909      	adds	r1, r1, r4
 80011a2:	e687      	b.n	8000eb4 <__aeabi_ddiv+0x1f0>
 80011a4:	220f      	movs	r2, #15
 80011a6:	402a      	ands	r2, r5
 80011a8:	2a04      	cmp	r2, #4
 80011aa:	d100      	bne.n	80011ae <__aeabi_ddiv+0x4ea>
 80011ac:	e6bc      	b.n	8000f28 <__aeabi_ddiv+0x264>
 80011ae:	1d29      	adds	r1, r5, #4
 80011b0:	42a9      	cmp	r1, r5
 80011b2:	41ad      	sbcs	r5, r5
 80011b4:	426d      	negs	r5, r5
 80011b6:	08c9      	lsrs	r1, r1, #3
 80011b8:	44a8      	add	r8, r5
 80011ba:	e6b6      	b.n	8000f2a <__aeabi_ddiv+0x266>
 80011bc:	42af      	cmp	r7, r5
 80011be:	d900      	bls.n	80011c2 <__aeabi_ddiv+0x4fe>
 80011c0:	e662      	b.n	8000e88 <__aeabi_ddiv+0x1c4>
 80011c2:	4281      	cmp	r1, r0
 80011c4:	d804      	bhi.n	80011d0 <__aeabi_ddiv+0x50c>
 80011c6:	d000      	beq.n	80011ca <__aeabi_ddiv+0x506>
 80011c8:	e65e      	b.n	8000e88 <__aeabi_ddiv+0x1c4>
 80011ca:	42ae      	cmp	r6, r5
 80011cc:	d800      	bhi.n	80011d0 <__aeabi_ddiv+0x50c>
 80011ce:	e65b      	b.n	8000e88 <__aeabi_ddiv+0x1c4>
 80011d0:	2302      	movs	r3, #2
 80011d2:	425b      	negs	r3, r3
 80011d4:	469c      	mov	ip, r3
 80011d6:	9b00      	ldr	r3, [sp, #0]
 80011d8:	44e0      	add	r8, ip
 80011da:	469c      	mov	ip, r3
 80011dc:	4465      	add	r5, ip
 80011de:	429d      	cmp	r5, r3
 80011e0:	419b      	sbcs	r3, r3
 80011e2:	425b      	negs	r3, r3
 80011e4:	191b      	adds	r3, r3, r4
 80011e6:	18c0      	adds	r0, r0, r3
 80011e8:	e64f      	b.n	8000e8a <__aeabi_ddiv+0x1c6>
 80011ea:	42b2      	cmp	r2, r6
 80011ec:	d800      	bhi.n	80011f0 <__aeabi_ddiv+0x52c>
 80011ee:	e612      	b.n	8000e16 <__aeabi_ddiv+0x152>
 80011f0:	1e83      	subs	r3, r0, #2
 80011f2:	1936      	adds	r6, r6, r4
 80011f4:	e60f      	b.n	8000e16 <__aeabi_ddiv+0x152>
 80011f6:	428a      	cmp	r2, r1
 80011f8:	d800      	bhi.n	80011fc <__aeabi_ddiv+0x538>
 80011fa:	e5fa      	b.n	8000df2 <__aeabi_ddiv+0x12e>
 80011fc:	1e83      	subs	r3, r0, #2
 80011fe:	4698      	mov	r8, r3
 8001200:	1909      	adds	r1, r1, r4
 8001202:	e5f6      	b.n	8000df2 <__aeabi_ddiv+0x12e>
 8001204:	4b24      	ldr	r3, [pc, #144]	; (8001298 <__aeabi_ddiv+0x5d4>)
 8001206:	0028      	movs	r0, r5
 8001208:	445b      	add	r3, fp
 800120a:	4641      	mov	r1, r8
 800120c:	409d      	lsls	r5, r3
 800120e:	4099      	lsls	r1, r3
 8001210:	40d0      	lsrs	r0, r2
 8001212:	1e6b      	subs	r3, r5, #1
 8001214:	419d      	sbcs	r5, r3
 8001216:	4643      	mov	r3, r8
 8001218:	4301      	orrs	r1, r0
 800121a:	4329      	orrs	r1, r5
 800121c:	40d3      	lsrs	r3, r2
 800121e:	074a      	lsls	r2, r1, #29
 8001220:	d100      	bne.n	8001224 <__aeabi_ddiv+0x560>
 8001222:	e755      	b.n	80010d0 <__aeabi_ddiv+0x40c>
 8001224:	220f      	movs	r2, #15
 8001226:	400a      	ands	r2, r1
 8001228:	2a04      	cmp	r2, #4
 800122a:	d000      	beq.n	800122e <__aeabi_ddiv+0x56a>
 800122c:	e74a      	b.n	80010c4 <__aeabi_ddiv+0x400>
 800122e:	e74f      	b.n	80010d0 <__aeabi_ddiv+0x40c>
 8001230:	0015      	movs	r5, r2
 8001232:	4286      	cmp	r6, r0
 8001234:	d000      	beq.n	8001238 <__aeabi_ddiv+0x574>
 8001236:	e66d      	b.n	8000f14 <__aeabi_ddiv+0x250>
 8001238:	9a00      	ldr	r2, [sp, #0]
 800123a:	429a      	cmp	r2, r3
 800123c:	d000      	beq.n	8001240 <__aeabi_ddiv+0x57c>
 800123e:	e669      	b.n	8000f14 <__aeabi_ddiv+0x250>
 8001240:	e66a      	b.n	8000f18 <__aeabi_ddiv+0x254>
 8001242:	4b16      	ldr	r3, [pc, #88]	; (800129c <__aeabi_ddiv+0x5d8>)
 8001244:	445b      	add	r3, fp
 8001246:	2b00      	cmp	r3, #0
 8001248:	dc00      	bgt.n	800124c <__aeabi_ddiv+0x588>
 800124a:	e713      	b.n	8001074 <__aeabi_ddiv+0x3b0>
 800124c:	2501      	movs	r5, #1
 800124e:	2100      	movs	r1, #0
 8001250:	44a8      	add	r8, r5
 8001252:	e66a      	b.n	8000f2a <__aeabi_ddiv+0x266>
 8001254:	075d      	lsls	r5, r3, #29
 8001256:	025b      	lsls	r3, r3, #9
 8001258:	0b1a      	lsrs	r2, r3, #12
 800125a:	08c9      	lsrs	r1, r1, #3
 800125c:	2300      	movs	r3, #0
 800125e:	430d      	orrs	r5, r1
 8001260:	e587      	b.n	8000d72 <__aeabi_ddiv+0xae>
 8001262:	9900      	ldr	r1, [sp, #0]
 8001264:	3d02      	subs	r5, #2
 8001266:	004a      	lsls	r2, r1, #1
 8001268:	428a      	cmp	r2, r1
 800126a:	41bf      	sbcs	r7, r7
 800126c:	427f      	negs	r7, r7
 800126e:	193f      	adds	r7, r7, r4
 8001270:	19f6      	adds	r6, r6, r7
 8001272:	9200      	str	r2, [sp, #0]
 8001274:	e7dd      	b.n	8001232 <__aeabi_ddiv+0x56e>
 8001276:	2280      	movs	r2, #128	; 0x80
 8001278:	4643      	mov	r3, r8
 800127a:	0312      	lsls	r2, r2, #12
 800127c:	431a      	orrs	r2, r3
 800127e:	0312      	lsls	r2, r2, #12
 8001280:	4b03      	ldr	r3, [pc, #12]	; (8001290 <__aeabi_ddiv+0x5cc>)
 8001282:	0b12      	lsrs	r2, r2, #12
 8001284:	e575      	b.n	8000d72 <__aeabi_ddiv+0xae>
 8001286:	9900      	ldr	r1, [sp, #0]
 8001288:	4299      	cmp	r1, r3
 800128a:	d3ea      	bcc.n	8001262 <__aeabi_ddiv+0x59e>
 800128c:	0015      	movs	r5, r2
 800128e:	e7d3      	b.n	8001238 <__aeabi_ddiv+0x574>
 8001290:	000007ff 	.word	0x000007ff
 8001294:	0000043e 	.word	0x0000043e
 8001298:	0000041e 	.word	0x0000041e
 800129c:	000003ff 	.word	0x000003ff

080012a0 <__aeabi_dmul>:
 80012a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012a2:	4645      	mov	r5, r8
 80012a4:	46de      	mov	lr, fp
 80012a6:	4657      	mov	r7, sl
 80012a8:	464e      	mov	r6, r9
 80012aa:	b5e0      	push	{r5, r6, r7, lr}
 80012ac:	001f      	movs	r7, r3
 80012ae:	030b      	lsls	r3, r1, #12
 80012b0:	0b1b      	lsrs	r3, r3, #12
 80012b2:	469b      	mov	fp, r3
 80012b4:	004d      	lsls	r5, r1, #1
 80012b6:	0fcb      	lsrs	r3, r1, #31
 80012b8:	0004      	movs	r4, r0
 80012ba:	4691      	mov	r9, r2
 80012bc:	4698      	mov	r8, r3
 80012be:	b087      	sub	sp, #28
 80012c0:	0d6d      	lsrs	r5, r5, #21
 80012c2:	d100      	bne.n	80012c6 <__aeabi_dmul+0x26>
 80012c4:	e1cd      	b.n	8001662 <__aeabi_dmul+0x3c2>
 80012c6:	4bce      	ldr	r3, [pc, #824]	; (8001600 <__aeabi_dmul+0x360>)
 80012c8:	429d      	cmp	r5, r3
 80012ca:	d100      	bne.n	80012ce <__aeabi_dmul+0x2e>
 80012cc:	e1e9      	b.n	80016a2 <__aeabi_dmul+0x402>
 80012ce:	465a      	mov	r2, fp
 80012d0:	0f43      	lsrs	r3, r0, #29
 80012d2:	00d2      	lsls	r2, r2, #3
 80012d4:	4313      	orrs	r3, r2
 80012d6:	2280      	movs	r2, #128	; 0x80
 80012d8:	0412      	lsls	r2, r2, #16
 80012da:	431a      	orrs	r2, r3
 80012dc:	00c3      	lsls	r3, r0, #3
 80012de:	469a      	mov	sl, r3
 80012e0:	4bc8      	ldr	r3, [pc, #800]	; (8001604 <__aeabi_dmul+0x364>)
 80012e2:	4693      	mov	fp, r2
 80012e4:	469c      	mov	ip, r3
 80012e6:	2300      	movs	r3, #0
 80012e8:	2600      	movs	r6, #0
 80012ea:	4465      	add	r5, ip
 80012ec:	9300      	str	r3, [sp, #0]
 80012ee:	033c      	lsls	r4, r7, #12
 80012f0:	007b      	lsls	r3, r7, #1
 80012f2:	4648      	mov	r0, r9
 80012f4:	0b24      	lsrs	r4, r4, #12
 80012f6:	0d5b      	lsrs	r3, r3, #21
 80012f8:	0fff      	lsrs	r7, r7, #31
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d100      	bne.n	8001300 <__aeabi_dmul+0x60>
 80012fe:	e189      	b.n	8001614 <__aeabi_dmul+0x374>
 8001300:	4abf      	ldr	r2, [pc, #764]	; (8001600 <__aeabi_dmul+0x360>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d019      	beq.n	800133a <__aeabi_dmul+0x9a>
 8001306:	0f42      	lsrs	r2, r0, #29
 8001308:	00e4      	lsls	r4, r4, #3
 800130a:	4322      	orrs	r2, r4
 800130c:	2480      	movs	r4, #128	; 0x80
 800130e:	0424      	lsls	r4, r4, #16
 8001310:	4314      	orrs	r4, r2
 8001312:	4abc      	ldr	r2, [pc, #752]	; (8001604 <__aeabi_dmul+0x364>)
 8001314:	2100      	movs	r1, #0
 8001316:	4694      	mov	ip, r2
 8001318:	4642      	mov	r2, r8
 800131a:	4463      	add	r3, ip
 800131c:	195b      	adds	r3, r3, r5
 800131e:	9301      	str	r3, [sp, #4]
 8001320:	9b01      	ldr	r3, [sp, #4]
 8001322:	407a      	eors	r2, r7
 8001324:	3301      	adds	r3, #1
 8001326:	00c0      	lsls	r0, r0, #3
 8001328:	b2d2      	uxtb	r2, r2
 800132a:	9302      	str	r3, [sp, #8]
 800132c:	2e0a      	cmp	r6, #10
 800132e:	dd1c      	ble.n	800136a <__aeabi_dmul+0xca>
 8001330:	003a      	movs	r2, r7
 8001332:	2e0b      	cmp	r6, #11
 8001334:	d05e      	beq.n	80013f4 <__aeabi_dmul+0x154>
 8001336:	4647      	mov	r7, r8
 8001338:	e056      	b.n	80013e8 <__aeabi_dmul+0x148>
 800133a:	4649      	mov	r1, r9
 800133c:	4bb0      	ldr	r3, [pc, #704]	; (8001600 <__aeabi_dmul+0x360>)
 800133e:	4321      	orrs	r1, r4
 8001340:	18eb      	adds	r3, r5, r3
 8001342:	9301      	str	r3, [sp, #4]
 8001344:	2900      	cmp	r1, #0
 8001346:	d12a      	bne.n	800139e <__aeabi_dmul+0xfe>
 8001348:	2080      	movs	r0, #128	; 0x80
 800134a:	2202      	movs	r2, #2
 800134c:	0100      	lsls	r0, r0, #4
 800134e:	002b      	movs	r3, r5
 8001350:	4684      	mov	ip, r0
 8001352:	4316      	orrs	r6, r2
 8001354:	4642      	mov	r2, r8
 8001356:	4463      	add	r3, ip
 8001358:	407a      	eors	r2, r7
 800135a:	b2d2      	uxtb	r2, r2
 800135c:	9302      	str	r3, [sp, #8]
 800135e:	2e0a      	cmp	r6, #10
 8001360:	dd00      	ble.n	8001364 <__aeabi_dmul+0xc4>
 8001362:	e231      	b.n	80017c8 <__aeabi_dmul+0x528>
 8001364:	2000      	movs	r0, #0
 8001366:	2400      	movs	r4, #0
 8001368:	2102      	movs	r1, #2
 800136a:	2e02      	cmp	r6, #2
 800136c:	dc26      	bgt.n	80013bc <__aeabi_dmul+0x11c>
 800136e:	3e01      	subs	r6, #1
 8001370:	2e01      	cmp	r6, #1
 8001372:	d852      	bhi.n	800141a <__aeabi_dmul+0x17a>
 8001374:	2902      	cmp	r1, #2
 8001376:	d04c      	beq.n	8001412 <__aeabi_dmul+0x172>
 8001378:	2901      	cmp	r1, #1
 800137a:	d000      	beq.n	800137e <__aeabi_dmul+0xde>
 800137c:	e118      	b.n	80015b0 <__aeabi_dmul+0x310>
 800137e:	2300      	movs	r3, #0
 8001380:	2400      	movs	r4, #0
 8001382:	2500      	movs	r5, #0
 8001384:	051b      	lsls	r3, r3, #20
 8001386:	4323      	orrs	r3, r4
 8001388:	07d2      	lsls	r2, r2, #31
 800138a:	4313      	orrs	r3, r2
 800138c:	0028      	movs	r0, r5
 800138e:	0019      	movs	r1, r3
 8001390:	b007      	add	sp, #28
 8001392:	bcf0      	pop	{r4, r5, r6, r7}
 8001394:	46bb      	mov	fp, r7
 8001396:	46b2      	mov	sl, r6
 8001398:	46a9      	mov	r9, r5
 800139a:	46a0      	mov	r8, r4
 800139c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800139e:	2180      	movs	r1, #128	; 0x80
 80013a0:	2203      	movs	r2, #3
 80013a2:	0109      	lsls	r1, r1, #4
 80013a4:	002b      	movs	r3, r5
 80013a6:	468c      	mov	ip, r1
 80013a8:	4316      	orrs	r6, r2
 80013aa:	4642      	mov	r2, r8
 80013ac:	4463      	add	r3, ip
 80013ae:	407a      	eors	r2, r7
 80013b0:	b2d2      	uxtb	r2, r2
 80013b2:	9302      	str	r3, [sp, #8]
 80013b4:	2e0a      	cmp	r6, #10
 80013b6:	dd00      	ble.n	80013ba <__aeabi_dmul+0x11a>
 80013b8:	e228      	b.n	800180c <__aeabi_dmul+0x56c>
 80013ba:	2103      	movs	r1, #3
 80013bc:	2501      	movs	r5, #1
 80013be:	40b5      	lsls	r5, r6
 80013c0:	46ac      	mov	ip, r5
 80013c2:	26a6      	movs	r6, #166	; 0xa6
 80013c4:	4663      	mov	r3, ip
 80013c6:	00f6      	lsls	r6, r6, #3
 80013c8:	4035      	ands	r5, r6
 80013ca:	4233      	tst	r3, r6
 80013cc:	d10b      	bne.n	80013e6 <__aeabi_dmul+0x146>
 80013ce:	2690      	movs	r6, #144	; 0x90
 80013d0:	00b6      	lsls	r6, r6, #2
 80013d2:	4233      	tst	r3, r6
 80013d4:	d118      	bne.n	8001408 <__aeabi_dmul+0x168>
 80013d6:	3eb9      	subs	r6, #185	; 0xb9
 80013d8:	3eff      	subs	r6, #255	; 0xff
 80013da:	421e      	tst	r6, r3
 80013dc:	d01d      	beq.n	800141a <__aeabi_dmul+0x17a>
 80013de:	46a3      	mov	fp, r4
 80013e0:	4682      	mov	sl, r0
 80013e2:	9100      	str	r1, [sp, #0]
 80013e4:	e000      	b.n	80013e8 <__aeabi_dmul+0x148>
 80013e6:	0017      	movs	r7, r2
 80013e8:	9900      	ldr	r1, [sp, #0]
 80013ea:	003a      	movs	r2, r7
 80013ec:	2902      	cmp	r1, #2
 80013ee:	d010      	beq.n	8001412 <__aeabi_dmul+0x172>
 80013f0:	465c      	mov	r4, fp
 80013f2:	4650      	mov	r0, sl
 80013f4:	2903      	cmp	r1, #3
 80013f6:	d1bf      	bne.n	8001378 <__aeabi_dmul+0xd8>
 80013f8:	2380      	movs	r3, #128	; 0x80
 80013fa:	031b      	lsls	r3, r3, #12
 80013fc:	431c      	orrs	r4, r3
 80013fe:	0324      	lsls	r4, r4, #12
 8001400:	0005      	movs	r5, r0
 8001402:	4b7f      	ldr	r3, [pc, #508]	; (8001600 <__aeabi_dmul+0x360>)
 8001404:	0b24      	lsrs	r4, r4, #12
 8001406:	e7bd      	b.n	8001384 <__aeabi_dmul+0xe4>
 8001408:	2480      	movs	r4, #128	; 0x80
 800140a:	2200      	movs	r2, #0
 800140c:	4b7c      	ldr	r3, [pc, #496]	; (8001600 <__aeabi_dmul+0x360>)
 800140e:	0324      	lsls	r4, r4, #12
 8001410:	e7b8      	b.n	8001384 <__aeabi_dmul+0xe4>
 8001412:	2400      	movs	r4, #0
 8001414:	2500      	movs	r5, #0
 8001416:	4b7a      	ldr	r3, [pc, #488]	; (8001600 <__aeabi_dmul+0x360>)
 8001418:	e7b4      	b.n	8001384 <__aeabi_dmul+0xe4>
 800141a:	4653      	mov	r3, sl
 800141c:	041e      	lsls	r6, r3, #16
 800141e:	0c36      	lsrs	r6, r6, #16
 8001420:	0c1f      	lsrs	r7, r3, #16
 8001422:	0033      	movs	r3, r6
 8001424:	0c01      	lsrs	r1, r0, #16
 8001426:	0400      	lsls	r0, r0, #16
 8001428:	0c00      	lsrs	r0, r0, #16
 800142a:	4343      	muls	r3, r0
 800142c:	4698      	mov	r8, r3
 800142e:	0003      	movs	r3, r0
 8001430:	437b      	muls	r3, r7
 8001432:	4699      	mov	r9, r3
 8001434:	0033      	movs	r3, r6
 8001436:	434b      	muls	r3, r1
 8001438:	469c      	mov	ip, r3
 800143a:	4643      	mov	r3, r8
 800143c:	000d      	movs	r5, r1
 800143e:	0c1b      	lsrs	r3, r3, #16
 8001440:	469a      	mov	sl, r3
 8001442:	437d      	muls	r5, r7
 8001444:	44cc      	add	ip, r9
 8001446:	44d4      	add	ip, sl
 8001448:	9500      	str	r5, [sp, #0]
 800144a:	45e1      	cmp	r9, ip
 800144c:	d904      	bls.n	8001458 <__aeabi_dmul+0x1b8>
 800144e:	2380      	movs	r3, #128	; 0x80
 8001450:	025b      	lsls	r3, r3, #9
 8001452:	4699      	mov	r9, r3
 8001454:	444d      	add	r5, r9
 8001456:	9500      	str	r5, [sp, #0]
 8001458:	4663      	mov	r3, ip
 800145a:	0c1b      	lsrs	r3, r3, #16
 800145c:	001d      	movs	r5, r3
 800145e:	4663      	mov	r3, ip
 8001460:	041b      	lsls	r3, r3, #16
 8001462:	469c      	mov	ip, r3
 8001464:	4643      	mov	r3, r8
 8001466:	041b      	lsls	r3, r3, #16
 8001468:	0c1b      	lsrs	r3, r3, #16
 800146a:	4698      	mov	r8, r3
 800146c:	4663      	mov	r3, ip
 800146e:	4443      	add	r3, r8
 8001470:	9303      	str	r3, [sp, #12]
 8001472:	0c23      	lsrs	r3, r4, #16
 8001474:	4698      	mov	r8, r3
 8001476:	0033      	movs	r3, r6
 8001478:	0424      	lsls	r4, r4, #16
 800147a:	0c24      	lsrs	r4, r4, #16
 800147c:	4363      	muls	r3, r4
 800147e:	469c      	mov	ip, r3
 8001480:	0023      	movs	r3, r4
 8001482:	437b      	muls	r3, r7
 8001484:	4699      	mov	r9, r3
 8001486:	4643      	mov	r3, r8
 8001488:	435e      	muls	r6, r3
 800148a:	435f      	muls	r7, r3
 800148c:	444e      	add	r6, r9
 800148e:	4663      	mov	r3, ip
 8001490:	46b2      	mov	sl, r6
 8001492:	0c1e      	lsrs	r6, r3, #16
 8001494:	4456      	add	r6, sl
 8001496:	45b1      	cmp	r9, r6
 8001498:	d903      	bls.n	80014a2 <__aeabi_dmul+0x202>
 800149a:	2380      	movs	r3, #128	; 0x80
 800149c:	025b      	lsls	r3, r3, #9
 800149e:	4699      	mov	r9, r3
 80014a0:	444f      	add	r7, r9
 80014a2:	0c33      	lsrs	r3, r6, #16
 80014a4:	4699      	mov	r9, r3
 80014a6:	003b      	movs	r3, r7
 80014a8:	444b      	add	r3, r9
 80014aa:	9305      	str	r3, [sp, #20]
 80014ac:	4663      	mov	r3, ip
 80014ae:	46ac      	mov	ip, r5
 80014b0:	041f      	lsls	r7, r3, #16
 80014b2:	0c3f      	lsrs	r7, r7, #16
 80014b4:	0436      	lsls	r6, r6, #16
 80014b6:	19f6      	adds	r6, r6, r7
 80014b8:	44b4      	add	ip, r6
 80014ba:	4663      	mov	r3, ip
 80014bc:	9304      	str	r3, [sp, #16]
 80014be:	465b      	mov	r3, fp
 80014c0:	0c1b      	lsrs	r3, r3, #16
 80014c2:	469c      	mov	ip, r3
 80014c4:	465b      	mov	r3, fp
 80014c6:	041f      	lsls	r7, r3, #16
 80014c8:	0c3f      	lsrs	r7, r7, #16
 80014ca:	003b      	movs	r3, r7
 80014cc:	4343      	muls	r3, r0
 80014ce:	4699      	mov	r9, r3
 80014d0:	4663      	mov	r3, ip
 80014d2:	4343      	muls	r3, r0
 80014d4:	469a      	mov	sl, r3
 80014d6:	464b      	mov	r3, r9
 80014d8:	4660      	mov	r0, ip
 80014da:	0c1b      	lsrs	r3, r3, #16
 80014dc:	469b      	mov	fp, r3
 80014de:	4348      	muls	r0, r1
 80014e0:	4379      	muls	r1, r7
 80014e2:	4451      	add	r1, sl
 80014e4:	4459      	add	r1, fp
 80014e6:	458a      	cmp	sl, r1
 80014e8:	d903      	bls.n	80014f2 <__aeabi_dmul+0x252>
 80014ea:	2380      	movs	r3, #128	; 0x80
 80014ec:	025b      	lsls	r3, r3, #9
 80014ee:	469a      	mov	sl, r3
 80014f0:	4450      	add	r0, sl
 80014f2:	0c0b      	lsrs	r3, r1, #16
 80014f4:	469a      	mov	sl, r3
 80014f6:	464b      	mov	r3, r9
 80014f8:	041b      	lsls	r3, r3, #16
 80014fa:	0c1b      	lsrs	r3, r3, #16
 80014fc:	4699      	mov	r9, r3
 80014fe:	003b      	movs	r3, r7
 8001500:	4363      	muls	r3, r4
 8001502:	0409      	lsls	r1, r1, #16
 8001504:	4645      	mov	r5, r8
 8001506:	4449      	add	r1, r9
 8001508:	4699      	mov	r9, r3
 800150a:	4663      	mov	r3, ip
 800150c:	435c      	muls	r4, r3
 800150e:	436b      	muls	r3, r5
 8001510:	469c      	mov	ip, r3
 8001512:	464b      	mov	r3, r9
 8001514:	0c1b      	lsrs	r3, r3, #16
 8001516:	4698      	mov	r8, r3
 8001518:	436f      	muls	r7, r5
 800151a:	193f      	adds	r7, r7, r4
 800151c:	4447      	add	r7, r8
 800151e:	4450      	add	r0, sl
 8001520:	42bc      	cmp	r4, r7
 8001522:	d903      	bls.n	800152c <__aeabi_dmul+0x28c>
 8001524:	2380      	movs	r3, #128	; 0x80
 8001526:	025b      	lsls	r3, r3, #9
 8001528:	4698      	mov	r8, r3
 800152a:	44c4      	add	ip, r8
 800152c:	9b04      	ldr	r3, [sp, #16]
 800152e:	9d00      	ldr	r5, [sp, #0]
 8001530:	4698      	mov	r8, r3
 8001532:	4445      	add	r5, r8
 8001534:	42b5      	cmp	r5, r6
 8001536:	41b6      	sbcs	r6, r6
 8001538:	4273      	negs	r3, r6
 800153a:	4698      	mov	r8, r3
 800153c:	464b      	mov	r3, r9
 800153e:	041e      	lsls	r6, r3, #16
 8001540:	9b05      	ldr	r3, [sp, #20]
 8001542:	043c      	lsls	r4, r7, #16
 8001544:	4699      	mov	r9, r3
 8001546:	0c36      	lsrs	r6, r6, #16
 8001548:	19a4      	adds	r4, r4, r6
 800154a:	444c      	add	r4, r9
 800154c:	46a1      	mov	r9, r4
 800154e:	4683      	mov	fp, r0
 8001550:	186e      	adds	r6, r5, r1
 8001552:	44c1      	add	r9, r8
 8001554:	428e      	cmp	r6, r1
 8001556:	4189      	sbcs	r1, r1
 8001558:	44cb      	add	fp, r9
 800155a:	465d      	mov	r5, fp
 800155c:	4249      	negs	r1, r1
 800155e:	186d      	adds	r5, r5, r1
 8001560:	429c      	cmp	r4, r3
 8001562:	41a4      	sbcs	r4, r4
 8001564:	45c1      	cmp	r9, r8
 8001566:	419b      	sbcs	r3, r3
 8001568:	4583      	cmp	fp, r0
 800156a:	4180      	sbcs	r0, r0
 800156c:	428d      	cmp	r5, r1
 800156e:	4189      	sbcs	r1, r1
 8001570:	425b      	negs	r3, r3
 8001572:	4264      	negs	r4, r4
 8001574:	431c      	orrs	r4, r3
 8001576:	4240      	negs	r0, r0
 8001578:	9b03      	ldr	r3, [sp, #12]
 800157a:	4249      	negs	r1, r1
 800157c:	4301      	orrs	r1, r0
 800157e:	0270      	lsls	r0, r6, #9
 8001580:	0c3f      	lsrs	r7, r7, #16
 8001582:	4318      	orrs	r0, r3
 8001584:	19e4      	adds	r4, r4, r7
 8001586:	1e47      	subs	r7, r0, #1
 8001588:	41b8      	sbcs	r0, r7
 800158a:	1864      	adds	r4, r4, r1
 800158c:	4464      	add	r4, ip
 800158e:	0df6      	lsrs	r6, r6, #23
 8001590:	0261      	lsls	r1, r4, #9
 8001592:	4330      	orrs	r0, r6
 8001594:	0dec      	lsrs	r4, r5, #23
 8001596:	026e      	lsls	r6, r5, #9
 8001598:	430c      	orrs	r4, r1
 800159a:	4330      	orrs	r0, r6
 800159c:	01c9      	lsls	r1, r1, #7
 800159e:	d400      	bmi.n	80015a2 <__aeabi_dmul+0x302>
 80015a0:	e0f1      	b.n	8001786 <__aeabi_dmul+0x4e6>
 80015a2:	2101      	movs	r1, #1
 80015a4:	0843      	lsrs	r3, r0, #1
 80015a6:	4001      	ands	r1, r0
 80015a8:	430b      	orrs	r3, r1
 80015aa:	07e0      	lsls	r0, r4, #31
 80015ac:	4318      	orrs	r0, r3
 80015ae:	0864      	lsrs	r4, r4, #1
 80015b0:	4915      	ldr	r1, [pc, #84]	; (8001608 <__aeabi_dmul+0x368>)
 80015b2:	9b02      	ldr	r3, [sp, #8]
 80015b4:	468c      	mov	ip, r1
 80015b6:	4463      	add	r3, ip
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	dc00      	bgt.n	80015be <__aeabi_dmul+0x31e>
 80015bc:	e097      	b.n	80016ee <__aeabi_dmul+0x44e>
 80015be:	0741      	lsls	r1, r0, #29
 80015c0:	d009      	beq.n	80015d6 <__aeabi_dmul+0x336>
 80015c2:	210f      	movs	r1, #15
 80015c4:	4001      	ands	r1, r0
 80015c6:	2904      	cmp	r1, #4
 80015c8:	d005      	beq.n	80015d6 <__aeabi_dmul+0x336>
 80015ca:	1d01      	adds	r1, r0, #4
 80015cc:	4281      	cmp	r1, r0
 80015ce:	4180      	sbcs	r0, r0
 80015d0:	4240      	negs	r0, r0
 80015d2:	1824      	adds	r4, r4, r0
 80015d4:	0008      	movs	r0, r1
 80015d6:	01e1      	lsls	r1, r4, #7
 80015d8:	d506      	bpl.n	80015e8 <__aeabi_dmul+0x348>
 80015da:	2180      	movs	r1, #128	; 0x80
 80015dc:	00c9      	lsls	r1, r1, #3
 80015de:	468c      	mov	ip, r1
 80015e0:	4b0a      	ldr	r3, [pc, #40]	; (800160c <__aeabi_dmul+0x36c>)
 80015e2:	401c      	ands	r4, r3
 80015e4:	9b02      	ldr	r3, [sp, #8]
 80015e6:	4463      	add	r3, ip
 80015e8:	4909      	ldr	r1, [pc, #36]	; (8001610 <__aeabi_dmul+0x370>)
 80015ea:	428b      	cmp	r3, r1
 80015ec:	dd00      	ble.n	80015f0 <__aeabi_dmul+0x350>
 80015ee:	e710      	b.n	8001412 <__aeabi_dmul+0x172>
 80015f0:	0761      	lsls	r1, r4, #29
 80015f2:	08c5      	lsrs	r5, r0, #3
 80015f4:	0264      	lsls	r4, r4, #9
 80015f6:	055b      	lsls	r3, r3, #21
 80015f8:	430d      	orrs	r5, r1
 80015fa:	0b24      	lsrs	r4, r4, #12
 80015fc:	0d5b      	lsrs	r3, r3, #21
 80015fe:	e6c1      	b.n	8001384 <__aeabi_dmul+0xe4>
 8001600:	000007ff 	.word	0x000007ff
 8001604:	fffffc01 	.word	0xfffffc01
 8001608:	000003ff 	.word	0x000003ff
 800160c:	feffffff 	.word	0xfeffffff
 8001610:	000007fe 	.word	0x000007fe
 8001614:	464b      	mov	r3, r9
 8001616:	4323      	orrs	r3, r4
 8001618:	d059      	beq.n	80016ce <__aeabi_dmul+0x42e>
 800161a:	2c00      	cmp	r4, #0
 800161c:	d100      	bne.n	8001620 <__aeabi_dmul+0x380>
 800161e:	e0a3      	b.n	8001768 <__aeabi_dmul+0x4c8>
 8001620:	0020      	movs	r0, r4
 8001622:	f000 f9cd 	bl	80019c0 <__clzsi2>
 8001626:	0001      	movs	r1, r0
 8001628:	0003      	movs	r3, r0
 800162a:	390b      	subs	r1, #11
 800162c:	221d      	movs	r2, #29
 800162e:	1a52      	subs	r2, r2, r1
 8001630:	4649      	mov	r1, r9
 8001632:	0018      	movs	r0, r3
 8001634:	40d1      	lsrs	r1, r2
 8001636:	464a      	mov	r2, r9
 8001638:	3808      	subs	r0, #8
 800163a:	4082      	lsls	r2, r0
 800163c:	4084      	lsls	r4, r0
 800163e:	0010      	movs	r0, r2
 8001640:	430c      	orrs	r4, r1
 8001642:	4a74      	ldr	r2, [pc, #464]	; (8001814 <__aeabi_dmul+0x574>)
 8001644:	1aeb      	subs	r3, r5, r3
 8001646:	4694      	mov	ip, r2
 8001648:	4642      	mov	r2, r8
 800164a:	4463      	add	r3, ip
 800164c:	9301      	str	r3, [sp, #4]
 800164e:	9b01      	ldr	r3, [sp, #4]
 8001650:	407a      	eors	r2, r7
 8001652:	3301      	adds	r3, #1
 8001654:	2100      	movs	r1, #0
 8001656:	b2d2      	uxtb	r2, r2
 8001658:	9302      	str	r3, [sp, #8]
 800165a:	2e0a      	cmp	r6, #10
 800165c:	dd00      	ble.n	8001660 <__aeabi_dmul+0x3c0>
 800165e:	e667      	b.n	8001330 <__aeabi_dmul+0x90>
 8001660:	e683      	b.n	800136a <__aeabi_dmul+0xca>
 8001662:	465b      	mov	r3, fp
 8001664:	4303      	orrs	r3, r0
 8001666:	469a      	mov	sl, r3
 8001668:	d02a      	beq.n	80016c0 <__aeabi_dmul+0x420>
 800166a:	465b      	mov	r3, fp
 800166c:	2b00      	cmp	r3, #0
 800166e:	d06d      	beq.n	800174c <__aeabi_dmul+0x4ac>
 8001670:	4658      	mov	r0, fp
 8001672:	f000 f9a5 	bl	80019c0 <__clzsi2>
 8001676:	0001      	movs	r1, r0
 8001678:	0003      	movs	r3, r0
 800167a:	390b      	subs	r1, #11
 800167c:	221d      	movs	r2, #29
 800167e:	1a52      	subs	r2, r2, r1
 8001680:	0021      	movs	r1, r4
 8001682:	0018      	movs	r0, r3
 8001684:	465d      	mov	r5, fp
 8001686:	40d1      	lsrs	r1, r2
 8001688:	3808      	subs	r0, #8
 800168a:	4085      	lsls	r5, r0
 800168c:	000a      	movs	r2, r1
 800168e:	4084      	lsls	r4, r0
 8001690:	432a      	orrs	r2, r5
 8001692:	4693      	mov	fp, r2
 8001694:	46a2      	mov	sl, r4
 8001696:	4d5f      	ldr	r5, [pc, #380]	; (8001814 <__aeabi_dmul+0x574>)
 8001698:	2600      	movs	r6, #0
 800169a:	1aed      	subs	r5, r5, r3
 800169c:	2300      	movs	r3, #0
 800169e:	9300      	str	r3, [sp, #0]
 80016a0:	e625      	b.n	80012ee <__aeabi_dmul+0x4e>
 80016a2:	465b      	mov	r3, fp
 80016a4:	4303      	orrs	r3, r0
 80016a6:	469a      	mov	sl, r3
 80016a8:	d105      	bne.n	80016b6 <__aeabi_dmul+0x416>
 80016aa:	2300      	movs	r3, #0
 80016ac:	469b      	mov	fp, r3
 80016ae:	3302      	adds	r3, #2
 80016b0:	2608      	movs	r6, #8
 80016b2:	9300      	str	r3, [sp, #0]
 80016b4:	e61b      	b.n	80012ee <__aeabi_dmul+0x4e>
 80016b6:	2303      	movs	r3, #3
 80016b8:	4682      	mov	sl, r0
 80016ba:	260c      	movs	r6, #12
 80016bc:	9300      	str	r3, [sp, #0]
 80016be:	e616      	b.n	80012ee <__aeabi_dmul+0x4e>
 80016c0:	2300      	movs	r3, #0
 80016c2:	469b      	mov	fp, r3
 80016c4:	3301      	adds	r3, #1
 80016c6:	2604      	movs	r6, #4
 80016c8:	2500      	movs	r5, #0
 80016ca:	9300      	str	r3, [sp, #0]
 80016cc:	e60f      	b.n	80012ee <__aeabi_dmul+0x4e>
 80016ce:	4642      	mov	r2, r8
 80016d0:	3301      	adds	r3, #1
 80016d2:	9501      	str	r5, [sp, #4]
 80016d4:	431e      	orrs	r6, r3
 80016d6:	9b01      	ldr	r3, [sp, #4]
 80016d8:	407a      	eors	r2, r7
 80016da:	3301      	adds	r3, #1
 80016dc:	2400      	movs	r4, #0
 80016de:	2000      	movs	r0, #0
 80016e0:	2101      	movs	r1, #1
 80016e2:	b2d2      	uxtb	r2, r2
 80016e4:	9302      	str	r3, [sp, #8]
 80016e6:	2e0a      	cmp	r6, #10
 80016e8:	dd00      	ble.n	80016ec <__aeabi_dmul+0x44c>
 80016ea:	e621      	b.n	8001330 <__aeabi_dmul+0x90>
 80016ec:	e63d      	b.n	800136a <__aeabi_dmul+0xca>
 80016ee:	2101      	movs	r1, #1
 80016f0:	1ac9      	subs	r1, r1, r3
 80016f2:	2938      	cmp	r1, #56	; 0x38
 80016f4:	dd00      	ble.n	80016f8 <__aeabi_dmul+0x458>
 80016f6:	e642      	b.n	800137e <__aeabi_dmul+0xde>
 80016f8:	291f      	cmp	r1, #31
 80016fa:	dd47      	ble.n	800178c <__aeabi_dmul+0x4ec>
 80016fc:	261f      	movs	r6, #31
 80016fe:	0025      	movs	r5, r4
 8001700:	4276      	negs	r6, r6
 8001702:	1af3      	subs	r3, r6, r3
 8001704:	40dd      	lsrs	r5, r3
 8001706:	002b      	movs	r3, r5
 8001708:	2920      	cmp	r1, #32
 800170a:	d005      	beq.n	8001718 <__aeabi_dmul+0x478>
 800170c:	4942      	ldr	r1, [pc, #264]	; (8001818 <__aeabi_dmul+0x578>)
 800170e:	9d02      	ldr	r5, [sp, #8]
 8001710:	468c      	mov	ip, r1
 8001712:	4465      	add	r5, ip
 8001714:	40ac      	lsls	r4, r5
 8001716:	4320      	orrs	r0, r4
 8001718:	1e41      	subs	r1, r0, #1
 800171a:	4188      	sbcs	r0, r1
 800171c:	4318      	orrs	r0, r3
 800171e:	2307      	movs	r3, #7
 8001720:	001d      	movs	r5, r3
 8001722:	2400      	movs	r4, #0
 8001724:	4005      	ands	r5, r0
 8001726:	4203      	tst	r3, r0
 8001728:	d04a      	beq.n	80017c0 <__aeabi_dmul+0x520>
 800172a:	230f      	movs	r3, #15
 800172c:	2400      	movs	r4, #0
 800172e:	4003      	ands	r3, r0
 8001730:	2b04      	cmp	r3, #4
 8001732:	d042      	beq.n	80017ba <__aeabi_dmul+0x51a>
 8001734:	1d03      	adds	r3, r0, #4
 8001736:	4283      	cmp	r3, r0
 8001738:	4180      	sbcs	r0, r0
 800173a:	4240      	negs	r0, r0
 800173c:	1824      	adds	r4, r4, r0
 800173e:	0018      	movs	r0, r3
 8001740:	0223      	lsls	r3, r4, #8
 8001742:	d53a      	bpl.n	80017ba <__aeabi_dmul+0x51a>
 8001744:	2301      	movs	r3, #1
 8001746:	2400      	movs	r4, #0
 8001748:	2500      	movs	r5, #0
 800174a:	e61b      	b.n	8001384 <__aeabi_dmul+0xe4>
 800174c:	f000 f938 	bl	80019c0 <__clzsi2>
 8001750:	0001      	movs	r1, r0
 8001752:	0003      	movs	r3, r0
 8001754:	3115      	adds	r1, #21
 8001756:	3320      	adds	r3, #32
 8001758:	291c      	cmp	r1, #28
 800175a:	dd8f      	ble.n	800167c <__aeabi_dmul+0x3dc>
 800175c:	3808      	subs	r0, #8
 800175e:	2200      	movs	r2, #0
 8001760:	4084      	lsls	r4, r0
 8001762:	4692      	mov	sl, r2
 8001764:	46a3      	mov	fp, r4
 8001766:	e796      	b.n	8001696 <__aeabi_dmul+0x3f6>
 8001768:	f000 f92a 	bl	80019c0 <__clzsi2>
 800176c:	0001      	movs	r1, r0
 800176e:	0003      	movs	r3, r0
 8001770:	3115      	adds	r1, #21
 8001772:	3320      	adds	r3, #32
 8001774:	291c      	cmp	r1, #28
 8001776:	dc00      	bgt.n	800177a <__aeabi_dmul+0x4da>
 8001778:	e758      	b.n	800162c <__aeabi_dmul+0x38c>
 800177a:	0002      	movs	r2, r0
 800177c:	464c      	mov	r4, r9
 800177e:	3a08      	subs	r2, #8
 8001780:	2000      	movs	r0, #0
 8001782:	4094      	lsls	r4, r2
 8001784:	e75d      	b.n	8001642 <__aeabi_dmul+0x3a2>
 8001786:	9b01      	ldr	r3, [sp, #4]
 8001788:	9302      	str	r3, [sp, #8]
 800178a:	e711      	b.n	80015b0 <__aeabi_dmul+0x310>
 800178c:	4b23      	ldr	r3, [pc, #140]	; (800181c <__aeabi_dmul+0x57c>)
 800178e:	0026      	movs	r6, r4
 8001790:	469c      	mov	ip, r3
 8001792:	0003      	movs	r3, r0
 8001794:	9d02      	ldr	r5, [sp, #8]
 8001796:	40cb      	lsrs	r3, r1
 8001798:	4465      	add	r5, ip
 800179a:	40ae      	lsls	r6, r5
 800179c:	431e      	orrs	r6, r3
 800179e:	0003      	movs	r3, r0
 80017a0:	40ab      	lsls	r3, r5
 80017a2:	1e58      	subs	r0, r3, #1
 80017a4:	4183      	sbcs	r3, r0
 80017a6:	0030      	movs	r0, r6
 80017a8:	4318      	orrs	r0, r3
 80017aa:	40cc      	lsrs	r4, r1
 80017ac:	0743      	lsls	r3, r0, #29
 80017ae:	d0c7      	beq.n	8001740 <__aeabi_dmul+0x4a0>
 80017b0:	230f      	movs	r3, #15
 80017b2:	4003      	ands	r3, r0
 80017b4:	2b04      	cmp	r3, #4
 80017b6:	d1bd      	bne.n	8001734 <__aeabi_dmul+0x494>
 80017b8:	e7c2      	b.n	8001740 <__aeabi_dmul+0x4a0>
 80017ba:	0765      	lsls	r5, r4, #29
 80017bc:	0264      	lsls	r4, r4, #9
 80017be:	0b24      	lsrs	r4, r4, #12
 80017c0:	08c0      	lsrs	r0, r0, #3
 80017c2:	2300      	movs	r3, #0
 80017c4:	4305      	orrs	r5, r0
 80017c6:	e5dd      	b.n	8001384 <__aeabi_dmul+0xe4>
 80017c8:	2500      	movs	r5, #0
 80017ca:	2302      	movs	r3, #2
 80017cc:	2e0f      	cmp	r6, #15
 80017ce:	d10c      	bne.n	80017ea <__aeabi_dmul+0x54a>
 80017d0:	2480      	movs	r4, #128	; 0x80
 80017d2:	465b      	mov	r3, fp
 80017d4:	0324      	lsls	r4, r4, #12
 80017d6:	4223      	tst	r3, r4
 80017d8:	d00e      	beq.n	80017f8 <__aeabi_dmul+0x558>
 80017da:	4221      	tst	r1, r4
 80017dc:	d10c      	bne.n	80017f8 <__aeabi_dmul+0x558>
 80017de:	430c      	orrs	r4, r1
 80017e0:	0324      	lsls	r4, r4, #12
 80017e2:	003a      	movs	r2, r7
 80017e4:	4b0e      	ldr	r3, [pc, #56]	; (8001820 <__aeabi_dmul+0x580>)
 80017e6:	0b24      	lsrs	r4, r4, #12
 80017e8:	e5cc      	b.n	8001384 <__aeabi_dmul+0xe4>
 80017ea:	2e0b      	cmp	r6, #11
 80017ec:	d000      	beq.n	80017f0 <__aeabi_dmul+0x550>
 80017ee:	e5a2      	b.n	8001336 <__aeabi_dmul+0x96>
 80017f0:	468b      	mov	fp, r1
 80017f2:	46aa      	mov	sl, r5
 80017f4:	9300      	str	r3, [sp, #0]
 80017f6:	e5f7      	b.n	80013e8 <__aeabi_dmul+0x148>
 80017f8:	2480      	movs	r4, #128	; 0x80
 80017fa:	465b      	mov	r3, fp
 80017fc:	0324      	lsls	r4, r4, #12
 80017fe:	431c      	orrs	r4, r3
 8001800:	0324      	lsls	r4, r4, #12
 8001802:	4642      	mov	r2, r8
 8001804:	4655      	mov	r5, sl
 8001806:	4b06      	ldr	r3, [pc, #24]	; (8001820 <__aeabi_dmul+0x580>)
 8001808:	0b24      	lsrs	r4, r4, #12
 800180a:	e5bb      	b.n	8001384 <__aeabi_dmul+0xe4>
 800180c:	464d      	mov	r5, r9
 800180e:	0021      	movs	r1, r4
 8001810:	2303      	movs	r3, #3
 8001812:	e7db      	b.n	80017cc <__aeabi_dmul+0x52c>
 8001814:	fffffc0d 	.word	0xfffffc0d
 8001818:	0000043e 	.word	0x0000043e
 800181c:	0000041e 	.word	0x0000041e
 8001820:	000007ff 	.word	0x000007ff

08001824 <__aeabi_f2d>:
 8001824:	b570      	push	{r4, r5, r6, lr}
 8001826:	0242      	lsls	r2, r0, #9
 8001828:	0043      	lsls	r3, r0, #1
 800182a:	0fc4      	lsrs	r4, r0, #31
 800182c:	20fe      	movs	r0, #254	; 0xfe
 800182e:	0e1b      	lsrs	r3, r3, #24
 8001830:	1c59      	adds	r1, r3, #1
 8001832:	0a55      	lsrs	r5, r2, #9
 8001834:	4208      	tst	r0, r1
 8001836:	d00c      	beq.n	8001852 <__aeabi_f2d+0x2e>
 8001838:	21e0      	movs	r1, #224	; 0xe0
 800183a:	0089      	lsls	r1, r1, #2
 800183c:	468c      	mov	ip, r1
 800183e:	076d      	lsls	r5, r5, #29
 8001840:	0b12      	lsrs	r2, r2, #12
 8001842:	4463      	add	r3, ip
 8001844:	051b      	lsls	r3, r3, #20
 8001846:	4313      	orrs	r3, r2
 8001848:	07e4      	lsls	r4, r4, #31
 800184a:	4323      	orrs	r3, r4
 800184c:	0028      	movs	r0, r5
 800184e:	0019      	movs	r1, r3
 8001850:	bd70      	pop	{r4, r5, r6, pc}
 8001852:	2b00      	cmp	r3, #0
 8001854:	d114      	bne.n	8001880 <__aeabi_f2d+0x5c>
 8001856:	2d00      	cmp	r5, #0
 8001858:	d01b      	beq.n	8001892 <__aeabi_f2d+0x6e>
 800185a:	0028      	movs	r0, r5
 800185c:	f000 f8b0 	bl	80019c0 <__clzsi2>
 8001860:	280a      	cmp	r0, #10
 8001862:	dc1c      	bgt.n	800189e <__aeabi_f2d+0x7a>
 8001864:	230b      	movs	r3, #11
 8001866:	002a      	movs	r2, r5
 8001868:	1a1b      	subs	r3, r3, r0
 800186a:	40da      	lsrs	r2, r3
 800186c:	0003      	movs	r3, r0
 800186e:	3315      	adds	r3, #21
 8001870:	409d      	lsls	r5, r3
 8001872:	4b0e      	ldr	r3, [pc, #56]	; (80018ac <__aeabi_f2d+0x88>)
 8001874:	0312      	lsls	r2, r2, #12
 8001876:	1a1b      	subs	r3, r3, r0
 8001878:	055b      	lsls	r3, r3, #21
 800187a:	0b12      	lsrs	r2, r2, #12
 800187c:	0d5b      	lsrs	r3, r3, #21
 800187e:	e7e1      	b.n	8001844 <__aeabi_f2d+0x20>
 8001880:	2d00      	cmp	r5, #0
 8001882:	d009      	beq.n	8001898 <__aeabi_f2d+0x74>
 8001884:	0b13      	lsrs	r3, r2, #12
 8001886:	2280      	movs	r2, #128	; 0x80
 8001888:	0312      	lsls	r2, r2, #12
 800188a:	431a      	orrs	r2, r3
 800188c:	076d      	lsls	r5, r5, #29
 800188e:	4b08      	ldr	r3, [pc, #32]	; (80018b0 <__aeabi_f2d+0x8c>)
 8001890:	e7d8      	b.n	8001844 <__aeabi_f2d+0x20>
 8001892:	2300      	movs	r3, #0
 8001894:	2200      	movs	r2, #0
 8001896:	e7d5      	b.n	8001844 <__aeabi_f2d+0x20>
 8001898:	2200      	movs	r2, #0
 800189a:	4b05      	ldr	r3, [pc, #20]	; (80018b0 <__aeabi_f2d+0x8c>)
 800189c:	e7d2      	b.n	8001844 <__aeabi_f2d+0x20>
 800189e:	0003      	movs	r3, r0
 80018a0:	002a      	movs	r2, r5
 80018a2:	3b0b      	subs	r3, #11
 80018a4:	409a      	lsls	r2, r3
 80018a6:	2500      	movs	r5, #0
 80018a8:	e7e3      	b.n	8001872 <__aeabi_f2d+0x4e>
 80018aa:	46c0      	nop			; (mov r8, r8)
 80018ac:	00000389 	.word	0x00000389
 80018b0:	000007ff 	.word	0x000007ff

080018b4 <__aeabi_d2f>:
 80018b4:	0002      	movs	r2, r0
 80018b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018b8:	004b      	lsls	r3, r1, #1
 80018ba:	030d      	lsls	r5, r1, #12
 80018bc:	0f40      	lsrs	r0, r0, #29
 80018be:	0d5b      	lsrs	r3, r3, #21
 80018c0:	0fcc      	lsrs	r4, r1, #31
 80018c2:	0a6d      	lsrs	r5, r5, #9
 80018c4:	493a      	ldr	r1, [pc, #232]	; (80019b0 <__aeabi_d2f+0xfc>)
 80018c6:	4305      	orrs	r5, r0
 80018c8:	1c58      	adds	r0, r3, #1
 80018ca:	00d7      	lsls	r7, r2, #3
 80018cc:	4208      	tst	r0, r1
 80018ce:	d00a      	beq.n	80018e6 <__aeabi_d2f+0x32>
 80018d0:	4938      	ldr	r1, [pc, #224]	; (80019b4 <__aeabi_d2f+0x100>)
 80018d2:	1859      	adds	r1, r3, r1
 80018d4:	29fe      	cmp	r1, #254	; 0xfe
 80018d6:	dd16      	ble.n	8001906 <__aeabi_d2f+0x52>
 80018d8:	20ff      	movs	r0, #255	; 0xff
 80018da:	2200      	movs	r2, #0
 80018dc:	05c0      	lsls	r0, r0, #23
 80018de:	4310      	orrs	r0, r2
 80018e0:	07e4      	lsls	r4, r4, #31
 80018e2:	4320      	orrs	r0, r4
 80018e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d106      	bne.n	80018f8 <__aeabi_d2f+0x44>
 80018ea:	433d      	orrs	r5, r7
 80018ec:	d026      	beq.n	800193c <__aeabi_d2f+0x88>
 80018ee:	2205      	movs	r2, #5
 80018f0:	0192      	lsls	r2, r2, #6
 80018f2:	0a52      	lsrs	r2, r2, #9
 80018f4:	b2d8      	uxtb	r0, r3
 80018f6:	e7f1      	b.n	80018dc <__aeabi_d2f+0x28>
 80018f8:	432f      	orrs	r7, r5
 80018fa:	d0ed      	beq.n	80018d8 <__aeabi_d2f+0x24>
 80018fc:	2280      	movs	r2, #128	; 0x80
 80018fe:	03d2      	lsls	r2, r2, #15
 8001900:	20ff      	movs	r0, #255	; 0xff
 8001902:	432a      	orrs	r2, r5
 8001904:	e7ea      	b.n	80018dc <__aeabi_d2f+0x28>
 8001906:	2900      	cmp	r1, #0
 8001908:	dd1b      	ble.n	8001942 <__aeabi_d2f+0x8e>
 800190a:	0192      	lsls	r2, r2, #6
 800190c:	1e50      	subs	r0, r2, #1
 800190e:	4182      	sbcs	r2, r0
 8001910:	00ed      	lsls	r5, r5, #3
 8001912:	0f7f      	lsrs	r7, r7, #29
 8001914:	432a      	orrs	r2, r5
 8001916:	433a      	orrs	r2, r7
 8001918:	0753      	lsls	r3, r2, #29
 800191a:	d047      	beq.n	80019ac <__aeabi_d2f+0xf8>
 800191c:	230f      	movs	r3, #15
 800191e:	4013      	ands	r3, r2
 8001920:	2b04      	cmp	r3, #4
 8001922:	d000      	beq.n	8001926 <__aeabi_d2f+0x72>
 8001924:	3204      	adds	r2, #4
 8001926:	2380      	movs	r3, #128	; 0x80
 8001928:	04db      	lsls	r3, r3, #19
 800192a:	4013      	ands	r3, r2
 800192c:	d03e      	beq.n	80019ac <__aeabi_d2f+0xf8>
 800192e:	1c48      	adds	r0, r1, #1
 8001930:	29fe      	cmp	r1, #254	; 0xfe
 8001932:	d0d1      	beq.n	80018d8 <__aeabi_d2f+0x24>
 8001934:	0192      	lsls	r2, r2, #6
 8001936:	0a52      	lsrs	r2, r2, #9
 8001938:	b2c0      	uxtb	r0, r0
 800193a:	e7cf      	b.n	80018dc <__aeabi_d2f+0x28>
 800193c:	2000      	movs	r0, #0
 800193e:	2200      	movs	r2, #0
 8001940:	e7cc      	b.n	80018dc <__aeabi_d2f+0x28>
 8001942:	000a      	movs	r2, r1
 8001944:	3217      	adds	r2, #23
 8001946:	db2f      	blt.n	80019a8 <__aeabi_d2f+0xf4>
 8001948:	2680      	movs	r6, #128	; 0x80
 800194a:	0436      	lsls	r6, r6, #16
 800194c:	432e      	orrs	r6, r5
 800194e:	251e      	movs	r5, #30
 8001950:	1a6d      	subs	r5, r5, r1
 8001952:	2d1f      	cmp	r5, #31
 8001954:	dd11      	ble.n	800197a <__aeabi_d2f+0xc6>
 8001956:	2202      	movs	r2, #2
 8001958:	4252      	negs	r2, r2
 800195a:	1a52      	subs	r2, r2, r1
 800195c:	0031      	movs	r1, r6
 800195e:	40d1      	lsrs	r1, r2
 8001960:	2d20      	cmp	r5, #32
 8001962:	d004      	beq.n	800196e <__aeabi_d2f+0xba>
 8001964:	4a14      	ldr	r2, [pc, #80]	; (80019b8 <__aeabi_d2f+0x104>)
 8001966:	4694      	mov	ip, r2
 8001968:	4463      	add	r3, ip
 800196a:	409e      	lsls	r6, r3
 800196c:	4337      	orrs	r7, r6
 800196e:	003a      	movs	r2, r7
 8001970:	1e53      	subs	r3, r2, #1
 8001972:	419a      	sbcs	r2, r3
 8001974:	430a      	orrs	r2, r1
 8001976:	2100      	movs	r1, #0
 8001978:	e7ce      	b.n	8001918 <__aeabi_d2f+0x64>
 800197a:	4a10      	ldr	r2, [pc, #64]	; (80019bc <__aeabi_d2f+0x108>)
 800197c:	0038      	movs	r0, r7
 800197e:	4694      	mov	ip, r2
 8001980:	4463      	add	r3, ip
 8001982:	4098      	lsls	r0, r3
 8001984:	003a      	movs	r2, r7
 8001986:	1e41      	subs	r1, r0, #1
 8001988:	4188      	sbcs	r0, r1
 800198a:	409e      	lsls	r6, r3
 800198c:	40ea      	lsrs	r2, r5
 800198e:	4330      	orrs	r0, r6
 8001990:	4302      	orrs	r2, r0
 8001992:	2100      	movs	r1, #0
 8001994:	0753      	lsls	r3, r2, #29
 8001996:	d1c1      	bne.n	800191c <__aeabi_d2f+0x68>
 8001998:	2180      	movs	r1, #128	; 0x80
 800199a:	0013      	movs	r3, r2
 800199c:	04c9      	lsls	r1, r1, #19
 800199e:	2001      	movs	r0, #1
 80019a0:	400b      	ands	r3, r1
 80019a2:	420a      	tst	r2, r1
 80019a4:	d1c6      	bne.n	8001934 <__aeabi_d2f+0x80>
 80019a6:	e7a3      	b.n	80018f0 <__aeabi_d2f+0x3c>
 80019a8:	2300      	movs	r3, #0
 80019aa:	e7a0      	b.n	80018ee <__aeabi_d2f+0x3a>
 80019ac:	000b      	movs	r3, r1
 80019ae:	e79f      	b.n	80018f0 <__aeabi_d2f+0x3c>
 80019b0:	000007fe 	.word	0x000007fe
 80019b4:	fffffc80 	.word	0xfffffc80
 80019b8:	fffffca2 	.word	0xfffffca2
 80019bc:	fffffc82 	.word	0xfffffc82

080019c0 <__clzsi2>:
 80019c0:	211c      	movs	r1, #28
 80019c2:	2301      	movs	r3, #1
 80019c4:	041b      	lsls	r3, r3, #16
 80019c6:	4298      	cmp	r0, r3
 80019c8:	d301      	bcc.n	80019ce <__clzsi2+0xe>
 80019ca:	0c00      	lsrs	r0, r0, #16
 80019cc:	3910      	subs	r1, #16
 80019ce:	0a1b      	lsrs	r3, r3, #8
 80019d0:	4298      	cmp	r0, r3
 80019d2:	d301      	bcc.n	80019d8 <__clzsi2+0x18>
 80019d4:	0a00      	lsrs	r0, r0, #8
 80019d6:	3908      	subs	r1, #8
 80019d8:	091b      	lsrs	r3, r3, #4
 80019da:	4298      	cmp	r0, r3
 80019dc:	d301      	bcc.n	80019e2 <__clzsi2+0x22>
 80019de:	0900      	lsrs	r0, r0, #4
 80019e0:	3904      	subs	r1, #4
 80019e2:	a202      	add	r2, pc, #8	; (adr r2, 80019ec <__clzsi2+0x2c>)
 80019e4:	5c10      	ldrb	r0, [r2, r0]
 80019e6:	1840      	adds	r0, r0, r1
 80019e8:	4770      	bx	lr
 80019ea:	46c0      	nop			; (mov r8, r8)
 80019ec:	02020304 	.word	0x02020304
 80019f0:	01010101 	.word	0x01010101
	...

080019fc <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
    if (ch == '\n') {
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2b0a      	cmp	r3, #10
 8001a08:	d10a      	bne.n	8001a20 <__io_putchar+0x24>
        uint8_t ch2 = '\r';
 8001a0a:	210f      	movs	r1, #15
 8001a0c:	187b      	adds	r3, r7, r1
 8001a0e:	220d      	movs	r2, #13
 8001a10:	701a      	strb	r2, [r3, #0]
        HAL_UART_Transmit(&huart2, &ch2, 1, HAL_MAX_DELAY);
 8001a12:	2301      	movs	r3, #1
 8001a14:	425b      	negs	r3, r3
 8001a16:	1879      	adds	r1, r7, r1
 8001a18:	4807      	ldr	r0, [pc, #28]	; (8001a38 <__io_putchar+0x3c>)
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	f002 fa1e 	bl	8003e5c <HAL_UART_Transmit>
    }

    HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001a20:	2301      	movs	r3, #1
 8001a22:	425b      	negs	r3, r3
 8001a24:	1d39      	adds	r1, r7, #4
 8001a26:	4804      	ldr	r0, [pc, #16]	; (8001a38 <__io_putchar+0x3c>)
 8001a28:	2201      	movs	r2, #1
 8001a2a:	f002 fa17 	bl	8003e5c <HAL_UART_Transmit>
    return 1;
 8001a2e:	2301      	movs	r3, #1
}
 8001a30:	0018      	movs	r0, r3
 8001a32:	46bd      	mov	sp, r7
 8001a34:	b004      	add	sp, #16
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	20000138 	.word	0x20000138

08001a3c <line_append>:

void line_append(uint8_t value)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	0002      	movs	r2, r0
 8001a44:	1dfb      	adds	r3, r7, #7
 8001a46:	701a      	strb	r2, [r3, #0]
	if (value == '\r' || value == '\n') {
 8001a48:	1dfb      	adds	r3, r7, #7
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	2b0d      	cmp	r3, #13
 8001a4e:	d003      	beq.n	8001a58 <line_append+0x1c>
 8001a50:	1dfb      	adds	r3, r7, #7
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	2b0a      	cmp	r3, #10
 8001a56:	d119      	bne.n	8001a8c <line_append+0x50>
		if (line_length > 0) {
 8001a58:	4b13      	ldr	r3, [pc, #76]	; (8001aa8 <line_append+0x6c>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d01f      	beq.n	8001aa0 <line_append+0x64>
			line_buffer[line_length] = '\0';
 8001a60:	4b11      	ldr	r3, [pc, #68]	; (8001aa8 <line_append+0x6c>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a11      	ldr	r2, [pc, #68]	; (8001aac <line_append+0x70>)
 8001a66:	2100      	movs	r1, #0
 8001a68:	54d1      	strb	r1, [r2, r3]
				printf("ZMIANA WARTOSCI ZADANEJ NA = %s\n", line_buffer);
 8001a6a:	4a10      	ldr	r2, [pc, #64]	; (8001aac <line_append+0x70>)
 8001a6c:	4b10      	ldr	r3, [pc, #64]	; (8001ab0 <line_append+0x74>)
 8001a6e:	0011      	movs	r1, r2
 8001a70:	0018      	movs	r0, r3
 8001a72:	f003 f885 	bl	8004b80 <iprintf>
				zadana_odleglosc = atoi(line_buffer);
 8001a76:	4b0d      	ldr	r3, [pc, #52]	; (8001aac <line_append+0x70>)
 8001a78:	0018      	movs	r0, r3
 8001a7a:	f002 ff25 	bl	80048c8 <atoi>
 8001a7e:	0002      	movs	r2, r0
 8001a80:	4b0c      	ldr	r3, [pc, #48]	; (8001ab4 <line_append+0x78>)
 8001a82:	601a      	str	r2, [r3, #0]
			line_length = 0;
 8001a84:	4b08      	ldr	r3, [pc, #32]	; (8001aa8 <line_append+0x6c>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	601a      	str	r2, [r3, #0]
		if (line_length > 0) {
 8001a8a:	e009      	b.n	8001aa0 <line_append+0x64>
		}
	}
	else {
			line_buffer[line_length++] = value;
 8001a8c:	4b06      	ldr	r3, [pc, #24]	; (8001aa8 <line_append+0x6c>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	1c59      	adds	r1, r3, #1
 8001a92:	4a05      	ldr	r2, [pc, #20]	; (8001aa8 <line_append+0x6c>)
 8001a94:	6011      	str	r1, [r2, #0]
 8001a96:	4a05      	ldr	r2, [pc, #20]	; (8001aac <line_append+0x70>)
 8001a98:	1df9      	adds	r1, r7, #7
 8001a9a:	7809      	ldrb	r1, [r1, #0]
 8001a9c:	54d1      	strb	r1, [r2, r3]
		}
}
 8001a9e:	46c0      	nop			; (mov r8, r8)
 8001aa0:	46c0      	nop			; (mov r8, r8)
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	b002      	add	sp, #8
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	20000094 	.word	0x20000094
 8001aac:	20000088 	.word	0x20000088
 8001ab0:	080058e4 	.word	0x080058e4
 8001ab4:	20000000 	.word	0x20000000

08001ab8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ab8:	b590      	push	{r4, r7, lr}
 8001aba:	b09f      	sub	sp, #124	; 0x7c
 8001abc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001abe:	f000 fdb4 	bl	800262a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ac2:	f000 f9f5 	bl	8001eb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ac6:	f000 fb07 	bl	80020d8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001aca:	f000 fa35 	bl	8001f38 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001ace:	f000 facf 	bl	8002070 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001ad2:	f000 fa71 	bl	8001fb8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8001ad6:	4bd6      	ldr	r3, [pc, #856]	; (8001e30 <main+0x378>)
 8001ad8:	0018      	movs	r0, r3
 8001ada:	f001 fee3 	bl	80038a4 <HAL_TIM_Base_Start>
  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 8001ade:	2380      	movs	r3, #128	; 0x80
 8001ae0:	00db      	lsls	r3, r3, #3
 8001ae2:	48d4      	ldr	r0, [pc, #848]	; (8001e34 <main+0x37c>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	0019      	movs	r1, r3
 8001ae8:	f001 f8ad 	bl	8002c46 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CLK_GPIO_Port, CLK_Pin, GPIO_PIN_RESET);
 8001aec:	4bd1      	ldr	r3, [pc, #836]	; (8001e34 <main+0x37c>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	2110      	movs	r1, #16
 8001af2:	0018      	movs	r0, r3
 8001af4:	f001 f8a7 	bl	8002c46 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, GPIO_PIN_SET);
 8001af8:	4bce      	ldr	r3, [pc, #824]	; (8001e34 <main+0x37c>)
 8001afa:	2201      	movs	r2, #1
 8001afc:	2120      	movs	r1, #32
 8001afe:	0018      	movs	r0, r3
 8001b00:	f001 f8a1 	bl	8002c46 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ENA_GPIO_Port, ENA_Pin, GPIO_PIN_SET);
 8001b04:	2380      	movs	r3, #128	; 0x80
 8001b06:	0219      	lsls	r1, r3, #8
 8001b08:	23a0      	movs	r3, #160	; 0xa0
 8001b0a:	05db      	lsls	r3, r3, #23
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	0018      	movs	r0, r3
 8001b10:	f001 f899 	bl	8002c46 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8001b14:	23fa      	movs	r3, #250	; 0xfa
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	0018      	movs	r0, r3
 8001b1a:	f000 fe03 	bl	8002724 <HAL_Delay>
  HAL_GPIO_WritePin(ENA_GPIO_Port, ENA_Pin, GPIO_PIN_RESET);
 8001b1e:	2380      	movs	r3, #128	; 0x80
 8001b20:	0219      	lsls	r1, r3, #8
 8001b22:	23a0      	movs	r3, #160	; 0xa0
 8001b24:	05db      	lsls	r3, r3, #23
 8001b26:	2200      	movs	r2, #0
 8001b28:	0018      	movs	r0, r3
 8001b2a:	f001 f88c 	bl	8002c46 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8001b2e:	23fa      	movs	r3, #250	; 0xfa
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	0018      	movs	r0, r3
 8001b34:	f000 fdf6 	bl	8002724 <HAL_Delay>

  for (int i=0; i<18*MIKROKROK; i++) {
 8001b38:	2300      	movs	r3, #0
 8001b3a:	677b      	str	r3, [r7, #116]	; 0x74
 8001b3c:	e014      	b.n	8001b68 <main+0xb0>
	  HAL_GPIO_WritePin(CLK_GPIO_Port, CLK_Pin, GPIO_PIN_RESET);
 8001b3e:	4bbd      	ldr	r3, [pc, #756]	; (8001e34 <main+0x37c>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	2110      	movs	r1, #16
 8001b44:	0018      	movs	r0, r3
 8001b46:	f001 f87e 	bl	8002c46 <HAL_GPIO_WritePin>
	  HAL_Delay(2);
 8001b4a:	2002      	movs	r0, #2
 8001b4c:	f000 fdea 	bl	8002724 <HAL_Delay>
	  HAL_GPIO_WritePin(CLK_GPIO_Port, CLK_Pin, GPIO_PIN_SET);
 8001b50:	4bb8      	ldr	r3, [pc, #736]	; (8001e34 <main+0x37c>)
 8001b52:	2201      	movs	r2, #1
 8001b54:	2110      	movs	r1, #16
 8001b56:	0018      	movs	r0, r3
 8001b58:	f001 f875 	bl	8002c46 <HAL_GPIO_WritePin>
	  HAL_Delay(2);
 8001b5c:	2002      	movs	r0, #2
 8001b5e:	f000 fde1 	bl	8002724 <HAL_Delay>
  for (int i=0; i<18*MIKROKROK; i++) {
 8001b62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b64:	3301      	adds	r3, #1
 8001b66:	677b      	str	r3, [r7, #116]	; 0x74
 8001b68:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001b6a:	2390      	movs	r3, #144	; 0x90
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	dbe5      	blt.n	8001b3e <main+0x86>
  }

  int angle = 0;
 8001b72:	2300      	movs	r3, #0
 8001b74:	673b      	str	r3, [r7, #112]	; 0x70
  float calka = 0;
 8001b76:	2300      	movs	r3, #0
 8001b78:	66fb      	str	r3, [r7, #108]	; 0x6c
  int kontrola[10] = {0,0,0,0,0,0,0,0,0,0};
 8001b7a:	1d3b      	adds	r3, r7, #4
 8001b7c:	0018      	movs	r0, r3
 8001b7e:	2328      	movs	r3, #40	; 0x28
 8001b80:	001a      	movs	r2, r3
 8001b82:	2100      	movs	r1, #0
 8001b84:	f003 f858 	bl	8004c38 <memset>
  float prev_uchyb = 0;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uint16_t czas_cyklu_start = __HAL_TIM_GET_COUNTER(&htim1);
 8001b8c:	4ba8      	ldr	r3, [pc, #672]	; (8001e30 <main+0x378>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b92:	2352      	movs	r3, #82	; 0x52
 8001b94:	18fb      	adds	r3, r7, r3
 8001b96:	801a      	strh	r2, [r3, #0]

	  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_SET);
 8001b98:	2380      	movs	r3, #128	; 0x80
 8001b9a:	00db      	lsls	r3, r3, #3
 8001b9c:	48a5      	ldr	r0, [pc, #660]	; (8001e34 <main+0x37c>)
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	0019      	movs	r1, r3
 8001ba2:	f001 f850 	bl	8002c46 <HAL_GPIO_WritePin>
	  while(__HAL_TIM_GET_COUNTER(&htim1)-czas_cyklu_start<=10) {}
 8001ba6:	46c0      	nop			; (mov r8, r8)
 8001ba8:	4ba1      	ldr	r3, [pc, #644]	; (8001e30 <main+0x378>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bae:	2352      	movs	r3, #82	; 0x52
 8001bb0:	18fb      	adds	r3, r7, r3
 8001bb2:	881b      	ldrh	r3, [r3, #0]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2b0a      	cmp	r3, #10
 8001bb8:	d9f6      	bls.n	8001ba8 <main+0xf0>
	  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 8001bba:	2380      	movs	r3, #128	; 0x80
 8001bbc:	00db      	lsls	r3, r3, #3
 8001bbe:	489d      	ldr	r0, [pc, #628]	; (8001e34 <main+0x37c>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	0019      	movs	r1, r3
 8001bc4:	f001 f83f 	bl	8002c46 <HAL_GPIO_WritePin>
	  while(!HAL_GPIO_ReadPin(ECHO_GPIO_Port, ECHO_Pin)) {}
 8001bc8:	46c0      	nop			; (mov r8, r8)
 8001bca:	4b9a      	ldr	r3, [pc, #616]	; (8001e34 <main+0x37c>)
 8001bcc:	2108      	movs	r1, #8
 8001bce:	0018      	movs	r0, r3
 8001bd0:	f001 f81c 	bl	8002c0c <HAL_GPIO_ReadPin>
 8001bd4:	1e03      	subs	r3, r0, #0
 8001bd6:	d0f8      	beq.n	8001bca <main+0x112>
	  uint16_t czas_ECHO_start = __HAL_TIM_GET_COUNTER(&htim1);
 8001bd8:	4b95      	ldr	r3, [pc, #596]	; (8001e30 <main+0x378>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bde:	2350      	movs	r3, #80	; 0x50
 8001be0:	18fb      	adds	r3, r7, r3
 8001be2:	801a      	strh	r2, [r3, #0]
	  while(HAL_GPIO_ReadPin(ECHO_GPIO_Port, ECHO_Pin)) {}
 8001be4:	46c0      	nop			; (mov r8, r8)
 8001be6:	4b93      	ldr	r3, [pc, #588]	; (8001e34 <main+0x37c>)
 8001be8:	2108      	movs	r1, #8
 8001bea:	0018      	movs	r0, r3
 8001bec:	f001 f80e 	bl	8002c0c <HAL_GPIO_ReadPin>
 8001bf0:	1e03      	subs	r3, r0, #0
 8001bf2:	d1f8      	bne.n	8001be6 <main+0x12e>
	  uint16_t czas_ECHO_stop = __HAL_TIM_GET_COUNTER(&htim1);
 8001bf4:	4b8e      	ldr	r3, [pc, #568]	; (8001e30 <main+0x378>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bfa:	214e      	movs	r1, #78	; 0x4e
 8001bfc:	187b      	adds	r3, r7, r1
 8001bfe:	801a      	strh	r2, [r3, #0]

	  uint16_t czas_us = czas_ECHO_stop-czas_ECHO_start;
 8001c00:	204c      	movs	r0, #76	; 0x4c
 8001c02:	183b      	adds	r3, r7, r0
 8001c04:	1879      	adds	r1, r7, r1
 8001c06:	2250      	movs	r2, #80	; 0x50
 8001c08:	18ba      	adds	r2, r7, r2
 8001c0a:	8809      	ldrh	r1, [r1, #0]
 8001c0c:	8812      	ldrh	r2, [r2, #0]
 8001c0e:	1a8a      	subs	r2, r1, r2
 8001c10:	801a      	strh	r2, [r3, #0]

	  float odleglosc_mm_float = (float)czas_us / 2.0 * 0.0343 * 10.0;
 8001c12:	183b      	adds	r3, r7, r0
 8001c14:	881b      	ldrh	r3, [r3, #0]
 8001c16:	0018      	movs	r0, r3
 8001c18:	f7ff f80c 	bl	8000c34 <__aeabi_ui2f>
 8001c1c:	1c03      	adds	r3, r0, #0
 8001c1e:	1c18      	adds	r0, r3, #0
 8001c20:	f7ff fe00 	bl	8001824 <__aeabi_f2d>
 8001c24:	2200      	movs	r2, #0
 8001c26:	2380      	movs	r3, #128	; 0x80
 8001c28:	05db      	lsls	r3, r3, #23
 8001c2a:	f7ff f84b 	bl	8000cc4 <__aeabi_ddiv>
 8001c2e:	0002      	movs	r2, r0
 8001c30:	000b      	movs	r3, r1
 8001c32:	0010      	movs	r0, r2
 8001c34:	0019      	movs	r1, r3
 8001c36:	4a80      	ldr	r2, [pc, #512]	; (8001e38 <main+0x380>)
 8001c38:	4b80      	ldr	r3, [pc, #512]	; (8001e3c <main+0x384>)
 8001c3a:	f7ff fb31 	bl	80012a0 <__aeabi_dmul>
 8001c3e:	0002      	movs	r2, r0
 8001c40:	000b      	movs	r3, r1
 8001c42:	0010      	movs	r0, r2
 8001c44:	0019      	movs	r1, r3
 8001c46:	2200      	movs	r2, #0
 8001c48:	4b7d      	ldr	r3, [pc, #500]	; (8001e40 <main+0x388>)
 8001c4a:	f7ff fb29 	bl	80012a0 <__aeabi_dmul>
 8001c4e:	0002      	movs	r2, r0
 8001c50:	000b      	movs	r3, r1
 8001c52:	0010      	movs	r0, r2
 8001c54:	0019      	movs	r1, r3
 8001c56:	f7ff fe2d 	bl	80018b4 <__aeabi_d2f>
 8001c5a:	1c03      	adds	r3, r0, #0
 8001c5c:	64bb      	str	r3, [r7, #72]	; 0x48

	  int odleglosc_mm = (int)(odleglosc_mm_float);
 8001c5e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001c60:	f7fe ff76 	bl	8000b50 <__aeabi_f2iz>
 8001c64:	0003      	movs	r3, r0
 8001c66:	647b      	str	r3, [r7, #68]	; 0x44

	  //https://forbot.pl/blog/kurs-stm32l4-komunikacja-przez-uart-debugger-stm32-uart-id46577
	  uint8_t value;
	  if (HAL_UART_Receive(&huart2, &value, 1, 0) == HAL_OK)
 8001c68:	1cf9      	adds	r1, r7, #3
 8001c6a:	4876      	ldr	r0, [pc, #472]	; (8001e44 <main+0x38c>)
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f002 f998 	bl	8003fa4 <HAL_UART_Receive>
 8001c74:	1e03      	subs	r3, r0, #0
 8001c76:	d104      	bne.n	8001c82 <main+0x1ca>
		  line_append(value);
 8001c78:	1cfb      	adds	r3, r7, #3
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	0018      	movs	r0, r3
 8001c7e:	f7ff fedd 	bl	8001a3c <line_append>

	  //printf("%d \n", odleglosc_mm);

	  float kp = 1.3;
 8001c82:	4b71      	ldr	r3, [pc, #452]	; (8001e48 <main+0x390>)
 8001c84:	643b      	str	r3, [r7, #64]	; 0x40
	  float ki = 0.1;
 8001c86:	4b71      	ldr	r3, [pc, #452]	; (8001e4c <main+0x394>)
 8001c88:	63fb      	str	r3, [r7, #60]	; 0x3c
	  float kd = 7.0;
 8001c8a:	4b71      	ldr	r3, [pc, #452]	; (8001e50 <main+0x398>)
 8001c8c:	63bb      	str	r3, [r7, #56]	; 0x38

	  int uchyb = zadana_odleglosc - odleglosc_mm;
 8001c8e:	4b71      	ldr	r3, [pc, #452]	; (8001e54 <main+0x39c>)
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	637b      	str	r3, [r7, #52]	; 0x34
	  if (abs(uchyb)<=70) calka+=uchyb;
 8001c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c9a:	3346      	adds	r3, #70	; 0x46
 8001c9c:	db0c      	blt.n	8001cb8 <main+0x200>
 8001c9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ca0:	2b46      	cmp	r3, #70	; 0x46
 8001ca2:	dc09      	bgt.n	8001cb8 <main+0x200>
 8001ca4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001ca6:	f7fe ff73 	bl	8000b90 <__aeabi_i2f>
 8001caa:	1c03      	adds	r3, r0, #0
 8001cac:	1c19      	adds	r1, r3, #0
 8001cae:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001cb0:	f7fe fac0 	bl	8000234 <__aeabi_fadd>
 8001cb4:	1c03      	adds	r3, r0, #0
 8001cb6:	66fb      	str	r3, [r7, #108]	; 0x6c

	  if (abs(uchyb)<=5) kontrola[0]=1;
 8001cb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cba:	3305      	adds	r3, #5
 8001cbc:	db06      	blt.n	8001ccc <main+0x214>
 8001cbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cc0:	2b05      	cmp	r3, #5
 8001cc2:	dc03      	bgt.n	8001ccc <main+0x214>
 8001cc4:	1d3b      	adds	r3, r7, #4
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	601a      	str	r2, [r3, #0]
 8001cca:	e002      	b.n	8001cd2 <main+0x21a>
	  else kontrola[0] = 0;
 8001ccc:	1d3b      	adds	r3, r7, #4
 8001cce:	2200      	movs	r2, #0
 8001cd0:	601a      	str	r2, [r3, #0]

	  for (int i=0; i<9; i++) {
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	667b      	str	r3, [r7, #100]	; 0x64
 8001cd6:	e00e      	b.n	8001cf6 <main+0x23e>
		  kontrola[9-i] = kontrola[8-i];
 8001cd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001cda:	2208      	movs	r2, #8
 8001cdc:	1ad1      	subs	r1, r2, r3
 8001cde:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001ce0:	2209      	movs	r2, #9
 8001ce2:	1ad2      	subs	r2, r2, r3
 8001ce4:	1d3b      	adds	r3, r7, #4
 8001ce6:	0089      	lsls	r1, r1, #2
 8001ce8:	58c9      	ldr	r1, [r1, r3]
 8001cea:	1d3b      	adds	r3, r7, #4
 8001cec:	0092      	lsls	r2, r2, #2
 8001cee:	50d1      	str	r1, [r2, r3]
	  for (int i=0; i<9; i++) {
 8001cf0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	667b      	str	r3, [r7, #100]	; 0x64
 8001cf6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001cf8:	2b08      	cmp	r3, #8
 8001cfa:	dded      	ble.n	8001cd8 <main+0x220>
	  }

	  int suma =0 ;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	663b      	str	r3, [r7, #96]	; 0x60
	  for (int i=0; i<10; i++) {
 8001d00:	2300      	movs	r3, #0
 8001d02:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001d04:	e009      	b.n	8001d1a <main+0x262>
		  suma+=kontrola[i];
 8001d06:	1d3b      	adds	r3, r7, #4
 8001d08:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001d0a:	0092      	lsls	r2, r2, #2
 8001d0c:	58d3      	ldr	r3, [r2, r3]
 8001d0e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001d10:	18d3      	adds	r3, r2, r3
 8001d12:	663b      	str	r3, [r7, #96]	; 0x60
	  for (int i=0; i<10; i++) {
 8001d14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d16:	3301      	adds	r3, #1
 8001d18:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001d1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d1c:	2b09      	cmp	r3, #9
 8001d1e:	ddf2      	ble.n	8001d06 <main+0x24e>
	  }
	  if (suma==10) calka=0;
 8001d20:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d22:	2b0a      	cmp	r3, #10
 8001d24:	d101      	bne.n	8001d2a <main+0x272>
 8001d26:	2300      	movs	r3, #0
 8001d28:	66fb      	str	r3, [r7, #108]	; 0x6c

	  float wychylenie = kp*uchyb+ki*calka+kd*(uchyb-prev_uchyb);
 8001d2a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001d2c:	f7fe ff30 	bl	8000b90 <__aeabi_i2f>
 8001d30:	1c03      	adds	r3, r0, #0
 8001d32:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001d34:	1c18      	adds	r0, r3, #0
 8001d36:	f7fe fc1d 	bl	8000574 <__aeabi_fmul>
 8001d3a:	1c03      	adds	r3, r0, #0
 8001d3c:	1c1c      	adds	r4, r3, #0
 8001d3e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001d40:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001d42:	f7fe fc17 	bl	8000574 <__aeabi_fmul>
 8001d46:	1c03      	adds	r3, r0, #0
 8001d48:	1c19      	adds	r1, r3, #0
 8001d4a:	1c20      	adds	r0, r4, #0
 8001d4c:	f7fe fa72 	bl	8000234 <__aeabi_fadd>
 8001d50:	1c03      	adds	r3, r0, #0
 8001d52:	1c1c      	adds	r4, r3, #0
 8001d54:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001d56:	f7fe ff1b 	bl	8000b90 <__aeabi_i2f>
 8001d5a:	1c03      	adds	r3, r0, #0
 8001d5c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001d5e:	1c18      	adds	r0, r3, #0
 8001d60:	f7fe fd56 	bl	8000810 <__aeabi_fsub>
 8001d64:	1c03      	adds	r3, r0, #0
 8001d66:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001d68:	1c18      	adds	r0, r3, #0
 8001d6a:	f7fe fc03 	bl	8000574 <__aeabi_fmul>
 8001d6e:	1c03      	adds	r3, r0, #0
 8001d70:	1c19      	adds	r1, r3, #0
 8001d72:	1c20      	adds	r0, r4, #0
 8001d74:	f7fe fa5e 	bl	8000234 <__aeabi_fadd>
 8001d78:	1c03      	adds	r3, r0, #0
 8001d7a:	633b      	str	r3, [r7, #48]	; 0x30

	  prev_uchyb = uchyb;
 8001d7c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001d7e:	f7fe ff07 	bl	8000b90 <__aeabi_i2f>
 8001d82:	1c03      	adds	r3, r0, #0
 8001d84:	66bb      	str	r3, [r7, #104]	; 0x68

	  int wychylenie_int = (int)(wychylenie);
 8001d86:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001d88:	f7fe fee2 	bl	8000b50 <__aeabi_f2iz>
 8001d8c:	0003      	movs	r3, r0
 8001d8e:	65bb      	str	r3, [r7, #88]	; 0x58

	  if (wychylenie_int<-18*MIKROKROK) wychylenie_int = -18*MIKROKROK;
 8001d90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d92:	4a31      	ldr	r2, [pc, #196]	; (8001e58 <main+0x3a0>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	da02      	bge.n	8001d9e <main+0x2e6>
 8001d98:	4b2f      	ldr	r3, [pc, #188]	; (8001e58 <main+0x3a0>)
 8001d9a:	65bb      	str	r3, [r7, #88]	; 0x58
 8001d9c:	e007      	b.n	8001dae <main+0x2f6>
	  else if (wychylenie_int>18*MIKROKROK) wychylenie_int = 18*MIKROKROK;
 8001d9e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001da0:	2390      	movs	r3, #144	; 0x90
 8001da2:	005b      	lsls	r3, r3, #1
 8001da4:	429a      	cmp	r2, r3
 8001da6:	dd02      	ble.n	8001dae <main+0x2f6>
 8001da8:	2390      	movs	r3, #144	; 0x90
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	65bb      	str	r3, [r7, #88]	; 0x58

	  uint16_t czas_zmiana_DIR_start = __HAL_TIM_GET_COUNTER(&htim1);
 8001dae:	4b20      	ldr	r3, [pc, #128]	; (8001e30 <main+0x378>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001db4:	232e      	movs	r3, #46	; 0x2e
 8001db6:	18fb      	adds	r3, r7, r3
 8001db8:	801a      	strh	r2, [r3, #0]
	  if ((wychylenie_int-angle)<0) HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, GPIO_PIN_SET);
 8001dba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001dbc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	d506      	bpl.n	8001dd0 <main+0x318>
 8001dc2:	4b1c      	ldr	r3, [pc, #112]	; (8001e34 <main+0x37c>)
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	2120      	movs	r1, #32
 8001dc8:	0018      	movs	r0, r3
 8001dca:	f000 ff3c 	bl	8002c46 <HAL_GPIO_WritePin>
 8001dce:	e005      	b.n	8001ddc <main+0x324>
	  else HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, GPIO_PIN_RESET);
 8001dd0:	4b18      	ldr	r3, [pc, #96]	; (8001e34 <main+0x37c>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	2120      	movs	r1, #32
 8001dd6:	0018      	movs	r0, r3
 8001dd8:	f000 ff35 	bl	8002c46 <HAL_GPIO_WritePin>
	  while(__HAL_TIM_GET_COUNTER(&htim1)-czas_zmiana_DIR_start<=10) {}
 8001ddc:	46c0      	nop			; (mov r8, r8)
 8001dde:	4b14      	ldr	r3, [pc, #80]	; (8001e30 <main+0x378>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001de4:	232e      	movs	r3, #46	; 0x2e
 8001de6:	18fb      	adds	r3, r7, r3
 8001de8:	881b      	ldrh	r3, [r3, #0]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	2b0a      	cmp	r3, #10
 8001dee:	d9f6      	bls.n	8001dde <main+0x326>

	  printf("Uchyb =\t %d mm\r\n", uchyb);
 8001df0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001df2:	4b1a      	ldr	r3, [pc, #104]	; (8001e5c <main+0x3a4>)
 8001df4:	0011      	movs	r1, r2
 8001df6:	0018      	movs	r0, r3
 8001df8:	f002 fec2 	bl	8004b80 <iprintf>
	  while(__HAL_TIM_GET_COUNTER(&htim1)-czas_cyklu_start<=20000) {}
 8001dfc:	46c0      	nop			; (mov r8, r8)
 8001dfe:	4b0c      	ldr	r3, [pc, #48]	; (8001e30 <main+0x378>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e04:	2352      	movs	r3, #82	; 0x52
 8001e06:	18fb      	adds	r3, r7, r3
 8001e08:	881b      	ldrh	r3, [r3, #0]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	4a14      	ldr	r2, [pc, #80]	; (8001e60 <main+0x3a8>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d9f5      	bls.n	8001dfe <main+0x346>

	  for (int i=0; i<40; i++) {
 8001e12:	2300      	movs	r3, #0
 8001e14:	657b      	str	r3, [r7, #84]	; 0x54
 8001e16:	e045      	b.n	8001ea4 <main+0x3ec>
		  if ((wychylenie_int-angle)==0) {
 8001e18:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001e1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d121      	bne.n	8001e64 <main+0x3ac>
			  HAL_Delay((40-i)*2);
 8001e20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e22:	2228      	movs	r2, #40	; 0x28
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	005b      	lsls	r3, r3, #1
 8001e28:	0018      	movs	r0, r3
 8001e2a:	f000 fc7b 	bl	8002724 <HAL_Delay>
			  break;
 8001e2e:	e03c      	b.n	8001eaa <main+0x3f2>
 8001e30:	200000ec 	.word	0x200000ec
 8001e34:	50000400 	.word	0x50000400
 8001e38:	04816f00 	.word	0x04816f00
 8001e3c:	3fa18fc5 	.word	0x3fa18fc5
 8001e40:	40240000 	.word	0x40240000
 8001e44:	20000138 	.word	0x20000138
 8001e48:	3fa66666 	.word	0x3fa66666
 8001e4c:	3dcccccd 	.word	0x3dcccccd
 8001e50:	40e00000 	.word	0x40e00000
 8001e54:	20000000 	.word	0x20000000
 8001e58:	fffffee0 	.word	0xfffffee0
 8001e5c:	08005908 	.word	0x08005908
 8001e60:	00004e20 	.word	0x00004e20
		  }

		  HAL_GPIO_WritePin(CLK_GPIO_Port, CLK_Pin, GPIO_PIN_RESET);
 8001e64:	4b11      	ldr	r3, [pc, #68]	; (8001eac <main+0x3f4>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	2110      	movs	r1, #16
 8001e6a:	0018      	movs	r0, r3
 8001e6c:	f000 feeb 	bl	8002c46 <HAL_GPIO_WritePin>
		  HAL_Delay(1);
 8001e70:	2001      	movs	r0, #1
 8001e72:	f000 fc57 	bl	8002724 <HAL_Delay>
		  HAL_GPIO_WritePin(CLK_GPIO_Port, CLK_Pin, GPIO_PIN_SET);
 8001e76:	4b0d      	ldr	r3, [pc, #52]	; (8001eac <main+0x3f4>)
 8001e78:	2201      	movs	r2, #1
 8001e7a:	2110      	movs	r1, #16
 8001e7c:	0018      	movs	r0, r3
 8001e7e:	f000 fee2 	bl	8002c46 <HAL_GPIO_WritePin>
		  HAL_Delay(1);
 8001e82:	2001      	movs	r0, #1
 8001e84:	f000 fc4e 	bl	8002724 <HAL_Delay>

		  if ((wychylenie_int-angle)<0) angle--;
 8001e88:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001e8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	d503      	bpl.n	8001e98 <main+0x3e0>
 8001e90:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e92:	3b01      	subs	r3, #1
 8001e94:	673b      	str	r3, [r7, #112]	; 0x70
 8001e96:	e002      	b.n	8001e9e <main+0x3e6>
		  else angle++;
 8001e98:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	673b      	str	r3, [r7, #112]	; 0x70
	  for (int i=0; i<40; i++) {
 8001e9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	657b      	str	r3, [r7, #84]	; 0x54
 8001ea4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ea6:	2b27      	cmp	r3, #39	; 0x27
 8001ea8:	ddb6      	ble.n	8001e18 <main+0x360>
  {
 8001eaa:	e66f      	b.n	8001b8c <main+0xd4>
 8001eac:	50000400 	.word	0x50000400

08001eb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001eb0:	b590      	push	{r4, r7, lr}
 8001eb2:	b08d      	sub	sp, #52	; 0x34
 8001eb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001eb6:	2414      	movs	r4, #20
 8001eb8:	193b      	adds	r3, r7, r4
 8001eba:	0018      	movs	r0, r3
 8001ebc:	231c      	movs	r3, #28
 8001ebe:	001a      	movs	r2, r3
 8001ec0:	2100      	movs	r1, #0
 8001ec2:	f002 feb9 	bl	8004c38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ec6:	003b      	movs	r3, r7
 8001ec8:	0018      	movs	r0, r3
 8001eca:	2314      	movs	r3, #20
 8001ecc:	001a      	movs	r2, r3
 8001ece:	2100      	movs	r1, #0
 8001ed0:	f002 feb2 	bl	8004c38 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ed4:	193b      	adds	r3, r7, r4
 8001ed6:	2202      	movs	r2, #2
 8001ed8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001eda:	193b      	adds	r3, r7, r4
 8001edc:	2280      	movs	r2, #128	; 0x80
 8001ede:	0052      	lsls	r2, r2, #1
 8001ee0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001ee2:	193b      	adds	r3, r7, r4
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ee8:	193b      	adds	r3, r7, r4
 8001eea:	2240      	movs	r2, #64	; 0x40
 8001eec:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001eee:	193b      	adds	r3, r7, r4
 8001ef0:	0018      	movs	r0, r3
 8001ef2:	f001 f841 	bl	8002f78 <HAL_RCC_OscConfig>
 8001ef6:	1e03      	subs	r3, r0, #0
 8001ef8:	d001      	beq.n	8001efe <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8001efa:	f000 f9af 	bl	800225c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001efe:	003b      	movs	r3, r7
 8001f00:	2207      	movs	r2, #7
 8001f02:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001f04:	003b      	movs	r3, r7
 8001f06:	2200      	movs	r2, #0
 8001f08:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001f0a:	003b      	movs	r3, r7
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001f10:	003b      	movs	r3, r7
 8001f12:	2200      	movs	r2, #0
 8001f14:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001f16:	003b      	movs	r3, r7
 8001f18:	2200      	movs	r2, #0
 8001f1a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001f1c:	003b      	movs	r3, r7
 8001f1e:	2101      	movs	r1, #1
 8001f20:	0018      	movs	r0, r3
 8001f22:	f001 fa0d 	bl	8003340 <HAL_RCC_ClockConfig>
 8001f26:	1e03      	subs	r3, r0, #0
 8001f28:	d001      	beq.n	8001f2e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8001f2a:	f000 f997 	bl	800225c <Error_Handler>
  }
}
 8001f2e:	46c0      	nop			; (mov r8, r8)
 8001f30:	46bd      	mov	sp, r7
 8001f32:	b00d      	add	sp, #52	; 0x34
 8001f34:	bd90      	pop	{r4, r7, pc}
	...

08001f38 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f3c:	4b1b      	ldr	r3, [pc, #108]	; (8001fac <MX_I2C1_Init+0x74>)
 8001f3e:	4a1c      	ldr	r2, [pc, #112]	; (8001fb0 <MX_I2C1_Init+0x78>)
 8001f40:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8001f42:	4b1a      	ldr	r3, [pc, #104]	; (8001fac <MX_I2C1_Init+0x74>)
 8001f44:	4a1b      	ldr	r2, [pc, #108]	; (8001fb4 <MX_I2C1_Init+0x7c>)
 8001f46:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001f48:	4b18      	ldr	r3, [pc, #96]	; (8001fac <MX_I2C1_Init+0x74>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f4e:	4b17      	ldr	r3, [pc, #92]	; (8001fac <MX_I2C1_Init+0x74>)
 8001f50:	2201      	movs	r2, #1
 8001f52:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f54:	4b15      	ldr	r3, [pc, #84]	; (8001fac <MX_I2C1_Init+0x74>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001f5a:	4b14      	ldr	r3, [pc, #80]	; (8001fac <MX_I2C1_Init+0x74>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001f60:	4b12      	ldr	r3, [pc, #72]	; (8001fac <MX_I2C1_Init+0x74>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f66:	4b11      	ldr	r3, [pc, #68]	; (8001fac <MX_I2C1_Init+0x74>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f6c:	4b0f      	ldr	r3, [pc, #60]	; (8001fac <MX_I2C1_Init+0x74>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f72:	4b0e      	ldr	r3, [pc, #56]	; (8001fac <MX_I2C1_Init+0x74>)
 8001f74:	0018      	movs	r0, r3
 8001f76:	f000 fec1 	bl	8002cfc <HAL_I2C_Init>
 8001f7a:	1e03      	subs	r3, r0, #0
 8001f7c:	d001      	beq.n	8001f82 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001f7e:	f000 f96d 	bl	800225c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001f82:	4b0a      	ldr	r3, [pc, #40]	; (8001fac <MX_I2C1_Init+0x74>)
 8001f84:	2100      	movs	r1, #0
 8001f86:	0018      	movs	r0, r3
 8001f88:	f000 ff5e 	bl	8002e48 <HAL_I2CEx_ConfigAnalogFilter>
 8001f8c:	1e03      	subs	r3, r0, #0
 8001f8e:	d001      	beq.n	8001f94 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001f90:	f000 f964 	bl	800225c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001f94:	4b05      	ldr	r3, [pc, #20]	; (8001fac <MX_I2C1_Init+0x74>)
 8001f96:	2100      	movs	r1, #0
 8001f98:	0018      	movs	r0, r3
 8001f9a:	f000 ffa1 	bl	8002ee0 <HAL_I2CEx_ConfigDigitalFilter>
 8001f9e:	1e03      	subs	r3, r0, #0
 8001fa0:	d001      	beq.n	8001fa6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001fa2:	f000 f95b 	bl	800225c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001fa6:	46c0      	nop			; (mov r8, r8)
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	20000098 	.word	0x20000098
 8001fb0:	40005400 	.word	0x40005400
 8001fb4:	20303e5d 	.word	0x20303e5d

08001fb8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b088      	sub	sp, #32
 8001fbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fbe:	2310      	movs	r3, #16
 8001fc0:	18fb      	adds	r3, r7, r3
 8001fc2:	0018      	movs	r0, r3
 8001fc4:	2310      	movs	r3, #16
 8001fc6:	001a      	movs	r2, r3
 8001fc8:	2100      	movs	r1, #0
 8001fca:	f002 fe35 	bl	8004c38 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fce:	1d3b      	adds	r3, r7, #4
 8001fd0:	0018      	movs	r0, r3
 8001fd2:	230c      	movs	r3, #12
 8001fd4:	001a      	movs	r2, r3
 8001fd6:	2100      	movs	r1, #0
 8001fd8:	f002 fe2e 	bl	8004c38 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001fdc:	4b21      	ldr	r3, [pc, #132]	; (8002064 <MX_TIM1_Init+0xac>)
 8001fde:	4a22      	ldr	r2, [pc, #136]	; (8002068 <MX_TIM1_Init+0xb0>)
 8001fe0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 47;
 8001fe2:	4b20      	ldr	r3, [pc, #128]	; (8002064 <MX_TIM1_Init+0xac>)
 8001fe4:	222f      	movs	r2, #47	; 0x2f
 8001fe6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fe8:	4b1e      	ldr	r3, [pc, #120]	; (8002064 <MX_TIM1_Init+0xac>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001fee:	4b1d      	ldr	r3, [pc, #116]	; (8002064 <MX_TIM1_Init+0xac>)
 8001ff0:	4a1e      	ldr	r2, [pc, #120]	; (800206c <MX_TIM1_Init+0xb4>)
 8001ff2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ff4:	4b1b      	ldr	r3, [pc, #108]	; (8002064 <MX_TIM1_Init+0xac>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ffa:	4b1a      	ldr	r3, [pc, #104]	; (8002064 <MX_TIM1_Init+0xac>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002000:	4b18      	ldr	r3, [pc, #96]	; (8002064 <MX_TIM1_Init+0xac>)
 8002002:	2200      	movs	r2, #0
 8002004:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002006:	4b17      	ldr	r3, [pc, #92]	; (8002064 <MX_TIM1_Init+0xac>)
 8002008:	0018      	movs	r0, r3
 800200a:	f001 fbf3 	bl	80037f4 <HAL_TIM_Base_Init>
 800200e:	1e03      	subs	r3, r0, #0
 8002010:	d001      	beq.n	8002016 <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 8002012:	f000 f923 	bl	800225c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002016:	2110      	movs	r1, #16
 8002018:	187b      	adds	r3, r7, r1
 800201a:	2280      	movs	r2, #128	; 0x80
 800201c:	0152      	lsls	r2, r2, #5
 800201e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002020:	187a      	adds	r2, r7, r1
 8002022:	4b10      	ldr	r3, [pc, #64]	; (8002064 <MX_TIM1_Init+0xac>)
 8002024:	0011      	movs	r1, r2
 8002026:	0018      	movs	r0, r3
 8002028:	f001 fc82 	bl	8003930 <HAL_TIM_ConfigClockSource>
 800202c:	1e03      	subs	r3, r0, #0
 800202e:	d001      	beq.n	8002034 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002030:	f000 f914 	bl	800225c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002034:	1d3b      	adds	r3, r7, #4
 8002036:	2200      	movs	r2, #0
 8002038:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800203a:	1d3b      	adds	r3, r7, #4
 800203c:	2200      	movs	r2, #0
 800203e:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002040:	1d3b      	adds	r3, r7, #4
 8002042:	2200      	movs	r2, #0
 8002044:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002046:	1d3a      	adds	r2, r7, #4
 8002048:	4b06      	ldr	r3, [pc, #24]	; (8002064 <MX_TIM1_Init+0xac>)
 800204a:	0011      	movs	r1, r2
 800204c:	0018      	movs	r0, r3
 800204e:	f001 fe4d 	bl	8003cec <HAL_TIMEx_MasterConfigSynchronization>
 8002052:	1e03      	subs	r3, r0, #0
 8002054:	d001      	beq.n	800205a <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8002056:	f000 f901 	bl	800225c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800205a:	46c0      	nop			; (mov r8, r8)
 800205c:	46bd      	mov	sp, r7
 800205e:	b008      	add	sp, #32
 8002060:	bd80      	pop	{r7, pc}
 8002062:	46c0      	nop			; (mov r8, r8)
 8002064:	200000ec 	.word	0x200000ec
 8002068:	40012c00 	.word	0x40012c00
 800206c:	0000ffff 	.word	0x0000ffff

08002070 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002074:	4b16      	ldr	r3, [pc, #88]	; (80020d0 <MX_USART2_UART_Init+0x60>)
 8002076:	4a17      	ldr	r2, [pc, #92]	; (80020d4 <MX_USART2_UART_Init+0x64>)
 8002078:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800207a:	4b15      	ldr	r3, [pc, #84]	; (80020d0 <MX_USART2_UART_Init+0x60>)
 800207c:	2296      	movs	r2, #150	; 0x96
 800207e:	0192      	lsls	r2, r2, #6
 8002080:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002082:	4b13      	ldr	r3, [pc, #76]	; (80020d0 <MX_USART2_UART_Init+0x60>)
 8002084:	2200      	movs	r2, #0
 8002086:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002088:	4b11      	ldr	r3, [pc, #68]	; (80020d0 <MX_USART2_UART_Init+0x60>)
 800208a:	2200      	movs	r2, #0
 800208c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800208e:	4b10      	ldr	r3, [pc, #64]	; (80020d0 <MX_USART2_UART_Init+0x60>)
 8002090:	2200      	movs	r2, #0
 8002092:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002094:	4b0e      	ldr	r3, [pc, #56]	; (80020d0 <MX_USART2_UART_Init+0x60>)
 8002096:	220c      	movs	r2, #12
 8002098:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800209a:	4b0d      	ldr	r3, [pc, #52]	; (80020d0 <MX_USART2_UART_Init+0x60>)
 800209c:	2200      	movs	r2, #0
 800209e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80020a0:	4b0b      	ldr	r3, [pc, #44]	; (80020d0 <MX_USART2_UART_Init+0x60>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020a6:	4b0a      	ldr	r3, [pc, #40]	; (80020d0 <MX_USART2_UART_Init+0x60>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80020ac:	4b08      	ldr	r3, [pc, #32]	; (80020d0 <MX_USART2_UART_Init+0x60>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020b2:	4b07      	ldr	r3, [pc, #28]	; (80020d0 <MX_USART2_UART_Init+0x60>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020b8:	4b05      	ldr	r3, [pc, #20]	; (80020d0 <MX_USART2_UART_Init+0x60>)
 80020ba:	0018      	movs	r0, r3
 80020bc:	f001 fe78 	bl	8003db0 <HAL_UART_Init>
 80020c0:	1e03      	subs	r3, r0, #0
 80020c2:	d001      	beq.n	80020c8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80020c4:	f000 f8ca 	bl	800225c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80020c8:	46c0      	nop			; (mov r8, r8)
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	46c0      	nop			; (mov r8, r8)
 80020d0:	20000138 	.word	0x20000138
 80020d4:	40004400 	.word	0x40004400

080020d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020d8:	b590      	push	{r4, r7, lr}
 80020da:	b08b      	sub	sp, #44	; 0x2c
 80020dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020de:	2414      	movs	r4, #20
 80020e0:	193b      	adds	r3, r7, r4
 80020e2:	0018      	movs	r0, r3
 80020e4:	2314      	movs	r3, #20
 80020e6:	001a      	movs	r2, r3
 80020e8:	2100      	movs	r1, #0
 80020ea:	f002 fda5 	bl	8004c38 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020ee:	4b57      	ldr	r3, [pc, #348]	; (800224c <MX_GPIO_Init+0x174>)
 80020f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020f2:	4b56      	ldr	r3, [pc, #344]	; (800224c <MX_GPIO_Init+0x174>)
 80020f4:	2104      	movs	r1, #4
 80020f6:	430a      	orrs	r2, r1
 80020f8:	635a      	str	r2, [r3, #52]	; 0x34
 80020fa:	4b54      	ldr	r3, [pc, #336]	; (800224c <MX_GPIO_Init+0x174>)
 80020fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020fe:	2204      	movs	r2, #4
 8002100:	4013      	ands	r3, r2
 8002102:	613b      	str	r3, [r7, #16]
 8002104:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002106:	4b51      	ldr	r3, [pc, #324]	; (800224c <MX_GPIO_Init+0x174>)
 8002108:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800210a:	4b50      	ldr	r3, [pc, #320]	; (800224c <MX_GPIO_Init+0x174>)
 800210c:	2120      	movs	r1, #32
 800210e:	430a      	orrs	r2, r1
 8002110:	635a      	str	r2, [r3, #52]	; 0x34
 8002112:	4b4e      	ldr	r3, [pc, #312]	; (800224c <MX_GPIO_Init+0x174>)
 8002114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002116:	2220      	movs	r2, #32
 8002118:	4013      	ands	r3, r2
 800211a:	60fb      	str	r3, [r7, #12]
 800211c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800211e:	4b4b      	ldr	r3, [pc, #300]	; (800224c <MX_GPIO_Init+0x174>)
 8002120:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002122:	4b4a      	ldr	r3, [pc, #296]	; (800224c <MX_GPIO_Init+0x174>)
 8002124:	2101      	movs	r1, #1
 8002126:	430a      	orrs	r2, r1
 8002128:	635a      	str	r2, [r3, #52]	; 0x34
 800212a:	4b48      	ldr	r3, [pc, #288]	; (800224c <MX_GPIO_Init+0x174>)
 800212c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800212e:	2201      	movs	r2, #1
 8002130:	4013      	ands	r3, r2
 8002132:	60bb      	str	r3, [r7, #8]
 8002134:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002136:	4b45      	ldr	r3, [pc, #276]	; (800224c <MX_GPIO_Init+0x174>)
 8002138:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800213a:	4b44      	ldr	r3, [pc, #272]	; (800224c <MX_GPIO_Init+0x174>)
 800213c:	2102      	movs	r1, #2
 800213e:	430a      	orrs	r2, r1
 8002140:	635a      	str	r2, [r3, #52]	; 0x34
 8002142:	4b42      	ldr	r3, [pc, #264]	; (800224c <MX_GPIO_Init+0x174>)
 8002144:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002146:	2202      	movs	r2, #2
 8002148:	4013      	ands	r3, r2
 800214a:	607b      	str	r3, [r7, #4]
 800214c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_SET);
 800214e:	23a0      	movs	r3, #160	; 0xa0
 8002150:	05db      	lsls	r3, r3, #23
 8002152:	2201      	movs	r2, #1
 8002154:	2120      	movs	r1, #32
 8002156:	0018      	movs	r0, r3
 8002158:	f000 fd75 	bl	8002c46 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TRIG_Pin|CLK_Pin|DIR_Pin, GPIO_PIN_RESET);
 800215c:	2386      	movs	r3, #134	; 0x86
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	483b      	ldr	r0, [pc, #236]	; (8002250 <MX_GPIO_Init+0x178>)
 8002162:	2200      	movs	r2, #0
 8002164:	0019      	movs	r1, r3
 8002166:	f000 fd6e 	bl	8002c46 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENA_GPIO_Port, ENA_Pin, GPIO_PIN_RESET);
 800216a:	2380      	movs	r3, #128	; 0x80
 800216c:	0219      	lsls	r1, r3, #8
 800216e:	23a0      	movs	r3, #160	; 0xa0
 8002170:	05db      	lsls	r3, r3, #23
 8002172:	2200      	movs	r2, #0
 8002174:	0018      	movs	r0, r3
 8002176:	f000 fd66 	bl	8002c46 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : User_Button_Pin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 800217a:	193b      	adds	r3, r7, r4
 800217c:	2280      	movs	r2, #128	; 0x80
 800217e:	0192      	lsls	r2, r2, #6
 8002180:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002182:	193b      	adds	r3, r7, r4
 8002184:	4a33      	ldr	r2, [pc, #204]	; (8002254 <MX_GPIO_Init+0x17c>)
 8002186:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002188:	193b      	adds	r3, r7, r4
 800218a:	2200      	movs	r2, #0
 800218c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 800218e:	193b      	adds	r3, r7, r4
 8002190:	4a31      	ldr	r2, [pc, #196]	; (8002258 <MX_GPIO_Init+0x180>)
 8002192:	0019      	movs	r1, r3
 8002194:	0010      	movs	r0, r2
 8002196:	f000 fbc7 	bl	8002928 <HAL_GPIO_Init>

  /*Configure GPIO pin : Led_Pin */
  GPIO_InitStruct.Pin = Led_Pin;
 800219a:	193b      	adds	r3, r7, r4
 800219c:	2220      	movs	r2, #32
 800219e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021a0:	193b      	adds	r3, r7, r4
 80021a2:	2201      	movs	r2, #1
 80021a4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a6:	193b      	adds	r3, r7, r4
 80021a8:	2200      	movs	r2, #0
 80021aa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ac:	193b      	adds	r3, r7, r4
 80021ae:	2203      	movs	r2, #3
 80021b0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Led_GPIO_Port, &GPIO_InitStruct);
 80021b2:	193a      	adds	r2, r7, r4
 80021b4:	23a0      	movs	r3, #160	; 0xa0
 80021b6:	05db      	lsls	r3, r3, #23
 80021b8:	0011      	movs	r1, r2
 80021ba:	0018      	movs	r0, r3
 80021bc:	f000 fbb4 	bl	8002928 <HAL_GPIO_Init>

  /*Configure GPIO pins : TRIG_Pin CLK_Pin DIR_Pin */
  GPIO_InitStruct.Pin = TRIG_Pin|CLK_Pin|DIR_Pin;
 80021c0:	0021      	movs	r1, r4
 80021c2:	187b      	adds	r3, r7, r1
 80021c4:	2286      	movs	r2, #134	; 0x86
 80021c6:	00d2      	lsls	r2, r2, #3
 80021c8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021ca:	000c      	movs	r4, r1
 80021cc:	193b      	adds	r3, r7, r4
 80021ce:	2201      	movs	r2, #1
 80021d0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d2:	193b      	adds	r3, r7, r4
 80021d4:	2200      	movs	r2, #0
 80021d6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d8:	193b      	adds	r3, r7, r4
 80021da:	2200      	movs	r2, #0
 80021dc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021de:	193b      	adds	r3, r7, r4
 80021e0:	4a1b      	ldr	r2, [pc, #108]	; (8002250 <MX_GPIO_Init+0x178>)
 80021e2:	0019      	movs	r1, r3
 80021e4:	0010      	movs	r0, r2
 80021e6:	f000 fb9f 	bl	8002928 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENA_Pin */
  GPIO_InitStruct.Pin = ENA_Pin;
 80021ea:	0021      	movs	r1, r4
 80021ec:	187b      	adds	r3, r7, r1
 80021ee:	2280      	movs	r2, #128	; 0x80
 80021f0:	0212      	lsls	r2, r2, #8
 80021f2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021f4:	000c      	movs	r4, r1
 80021f6:	193b      	adds	r3, r7, r4
 80021f8:	2201      	movs	r2, #1
 80021fa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fc:	193b      	adds	r3, r7, r4
 80021fe:	2200      	movs	r2, #0
 8002200:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002202:	193b      	adds	r3, r7, r4
 8002204:	2200      	movs	r2, #0
 8002206:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(ENA_GPIO_Port, &GPIO_InitStruct);
 8002208:	193a      	adds	r2, r7, r4
 800220a:	23a0      	movs	r3, #160	; 0xa0
 800220c:	05db      	lsls	r3, r3, #23
 800220e:	0011      	movs	r1, r2
 8002210:	0018      	movs	r0, r3
 8002212:	f000 fb89 	bl	8002928 <HAL_GPIO_Init>

  /*Configure GPIO pin : ECHO_Pin */
  GPIO_InitStruct.Pin = ECHO_Pin;
 8002216:	193b      	adds	r3, r7, r4
 8002218:	2208      	movs	r2, #8
 800221a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800221c:	193b      	adds	r3, r7, r4
 800221e:	2200      	movs	r2, #0
 8002220:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002222:	193b      	adds	r3, r7, r4
 8002224:	2200      	movs	r2, #0
 8002226:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 8002228:	193b      	adds	r3, r7, r4
 800222a:	4a09      	ldr	r2, [pc, #36]	; (8002250 <MX_GPIO_Init+0x178>)
 800222c:	0019      	movs	r1, r3
 800222e:	0010      	movs	r0, r2
 8002230:	f000 fb7a 	bl	8002928 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8002234:	2200      	movs	r2, #0
 8002236:	2100      	movs	r1, #0
 8002238:	2007      	movs	r0, #7
 800223a:	f000 fb43 	bl	80028c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800223e:	2007      	movs	r0, #7
 8002240:	f000 fb55 	bl	80028ee <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002244:	46c0      	nop			; (mov r8, r8)
 8002246:	46bd      	mov	sp, r7
 8002248:	b00b      	add	sp, #44	; 0x2c
 800224a:	bd90      	pop	{r4, r7, pc}
 800224c:	40021000 	.word	0x40021000
 8002250:	50000400 	.word	0x50000400
 8002254:	10110000 	.word	0x10110000
 8002258:	50000800 	.word	0x50000800

0800225c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002260:	b672      	cpsid	i
}
 8002262:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002264:	e7fe      	b.n	8002264 <Error_Handler+0x8>
	...

08002268 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800226e:	4b0f      	ldr	r3, [pc, #60]	; (80022ac <HAL_MspInit+0x44>)
 8002270:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002272:	4b0e      	ldr	r3, [pc, #56]	; (80022ac <HAL_MspInit+0x44>)
 8002274:	2101      	movs	r1, #1
 8002276:	430a      	orrs	r2, r1
 8002278:	641a      	str	r2, [r3, #64]	; 0x40
 800227a:	4b0c      	ldr	r3, [pc, #48]	; (80022ac <HAL_MspInit+0x44>)
 800227c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227e:	2201      	movs	r2, #1
 8002280:	4013      	ands	r3, r2
 8002282:	607b      	str	r3, [r7, #4]
 8002284:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002286:	4b09      	ldr	r3, [pc, #36]	; (80022ac <HAL_MspInit+0x44>)
 8002288:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800228a:	4b08      	ldr	r3, [pc, #32]	; (80022ac <HAL_MspInit+0x44>)
 800228c:	2180      	movs	r1, #128	; 0x80
 800228e:	0549      	lsls	r1, r1, #21
 8002290:	430a      	orrs	r2, r1
 8002292:	63da      	str	r2, [r3, #60]	; 0x3c
 8002294:	4b05      	ldr	r3, [pc, #20]	; (80022ac <HAL_MspInit+0x44>)
 8002296:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002298:	2380      	movs	r3, #128	; 0x80
 800229a:	055b      	lsls	r3, r3, #21
 800229c:	4013      	ands	r3, r2
 800229e:	603b      	str	r3, [r7, #0]
 80022a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022a2:	46c0      	nop			; (mov r8, r8)
 80022a4:	46bd      	mov	sp, r7
 80022a6:	b002      	add	sp, #8
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	46c0      	nop			; (mov r8, r8)
 80022ac:	40021000 	.word	0x40021000

080022b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80022b0:	b590      	push	{r4, r7, lr}
 80022b2:	b091      	sub	sp, #68	; 0x44
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b8:	232c      	movs	r3, #44	; 0x2c
 80022ba:	18fb      	adds	r3, r7, r3
 80022bc:	0018      	movs	r0, r3
 80022be:	2314      	movs	r3, #20
 80022c0:	001a      	movs	r2, r3
 80022c2:	2100      	movs	r1, #0
 80022c4:	f002 fcb8 	bl	8004c38 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022c8:	2410      	movs	r4, #16
 80022ca:	193b      	adds	r3, r7, r4
 80022cc:	0018      	movs	r0, r3
 80022ce:	231c      	movs	r3, #28
 80022d0:	001a      	movs	r2, r3
 80022d2:	2100      	movs	r1, #0
 80022d4:	f002 fcb0 	bl	8004c38 <memset>
  if(hi2c->Instance==I2C1)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a22      	ldr	r2, [pc, #136]	; (8002368 <HAL_I2C_MspInit+0xb8>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d13e      	bne.n	8002360 <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80022e2:	193b      	adds	r3, r7, r4
 80022e4:	2240      	movs	r2, #64	; 0x40
 80022e6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80022e8:	193b      	adds	r3, r7, r4
 80022ea:	2200      	movs	r2, #0
 80022ec:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022ee:	193b      	adds	r3, r7, r4
 80022f0:	0018      	movs	r0, r3
 80022f2:	f001 f991 	bl	8003618 <HAL_RCCEx_PeriphCLKConfig>
 80022f6:	1e03      	subs	r3, r0, #0
 80022f8:	d001      	beq.n	80022fe <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80022fa:	f7ff ffaf 	bl	800225c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022fe:	4b1b      	ldr	r3, [pc, #108]	; (800236c <HAL_I2C_MspInit+0xbc>)
 8002300:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002302:	4b1a      	ldr	r3, [pc, #104]	; (800236c <HAL_I2C_MspInit+0xbc>)
 8002304:	2102      	movs	r1, #2
 8002306:	430a      	orrs	r2, r1
 8002308:	635a      	str	r2, [r3, #52]	; 0x34
 800230a:	4b18      	ldr	r3, [pc, #96]	; (800236c <HAL_I2C_MspInit+0xbc>)
 800230c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800230e:	2202      	movs	r2, #2
 8002310:	4013      	ands	r3, r2
 8002312:	60fb      	str	r3, [r7, #12]
 8002314:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002316:	212c      	movs	r1, #44	; 0x2c
 8002318:	187b      	adds	r3, r7, r1
 800231a:	22c0      	movs	r2, #192	; 0xc0
 800231c:	0092      	lsls	r2, r2, #2
 800231e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002320:	187b      	adds	r3, r7, r1
 8002322:	2212      	movs	r2, #18
 8002324:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002326:	187b      	adds	r3, r7, r1
 8002328:	2200      	movs	r2, #0
 800232a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800232c:	187b      	adds	r3, r7, r1
 800232e:	2200      	movs	r2, #0
 8002330:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8002332:	187b      	adds	r3, r7, r1
 8002334:	2206      	movs	r2, #6
 8002336:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002338:	187b      	adds	r3, r7, r1
 800233a:	4a0d      	ldr	r2, [pc, #52]	; (8002370 <HAL_I2C_MspInit+0xc0>)
 800233c:	0019      	movs	r1, r3
 800233e:	0010      	movs	r0, r2
 8002340:	f000 faf2 	bl	8002928 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002344:	4b09      	ldr	r3, [pc, #36]	; (800236c <HAL_I2C_MspInit+0xbc>)
 8002346:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002348:	4b08      	ldr	r3, [pc, #32]	; (800236c <HAL_I2C_MspInit+0xbc>)
 800234a:	2180      	movs	r1, #128	; 0x80
 800234c:	0389      	lsls	r1, r1, #14
 800234e:	430a      	orrs	r2, r1
 8002350:	63da      	str	r2, [r3, #60]	; 0x3c
 8002352:	4b06      	ldr	r3, [pc, #24]	; (800236c <HAL_I2C_MspInit+0xbc>)
 8002354:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002356:	2380      	movs	r3, #128	; 0x80
 8002358:	039b      	lsls	r3, r3, #14
 800235a:	4013      	ands	r3, r2
 800235c:	60bb      	str	r3, [r7, #8]
 800235e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002360:	46c0      	nop			; (mov r8, r8)
 8002362:	46bd      	mov	sp, r7
 8002364:	b011      	add	sp, #68	; 0x44
 8002366:	bd90      	pop	{r4, r7, pc}
 8002368:	40005400 	.word	0x40005400
 800236c:	40021000 	.word	0x40021000
 8002370:	50000400 	.word	0x50000400

08002374 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a0a      	ldr	r2, [pc, #40]	; (80023ac <HAL_TIM_Base_MspInit+0x38>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d10d      	bne.n	80023a2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002386:	4b0a      	ldr	r3, [pc, #40]	; (80023b0 <HAL_TIM_Base_MspInit+0x3c>)
 8002388:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800238a:	4b09      	ldr	r3, [pc, #36]	; (80023b0 <HAL_TIM_Base_MspInit+0x3c>)
 800238c:	2180      	movs	r1, #128	; 0x80
 800238e:	0109      	lsls	r1, r1, #4
 8002390:	430a      	orrs	r2, r1
 8002392:	641a      	str	r2, [r3, #64]	; 0x40
 8002394:	4b06      	ldr	r3, [pc, #24]	; (80023b0 <HAL_TIM_Base_MspInit+0x3c>)
 8002396:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002398:	2380      	movs	r3, #128	; 0x80
 800239a:	011b      	lsls	r3, r3, #4
 800239c:	4013      	ands	r3, r2
 800239e:	60fb      	str	r3, [r7, #12]
 80023a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80023a2:	46c0      	nop			; (mov r8, r8)
 80023a4:	46bd      	mov	sp, r7
 80023a6:	b004      	add	sp, #16
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	46c0      	nop			; (mov r8, r8)
 80023ac:	40012c00 	.word	0x40012c00
 80023b0:	40021000 	.word	0x40021000

080023b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023b4:	b590      	push	{r4, r7, lr}
 80023b6:	b08b      	sub	sp, #44	; 0x2c
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023bc:	2414      	movs	r4, #20
 80023be:	193b      	adds	r3, r7, r4
 80023c0:	0018      	movs	r0, r3
 80023c2:	2314      	movs	r3, #20
 80023c4:	001a      	movs	r2, r3
 80023c6:	2100      	movs	r1, #0
 80023c8:	f002 fc36 	bl	8004c38 <memset>
  if(huart->Instance==USART2)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a1b      	ldr	r2, [pc, #108]	; (8002440 <HAL_UART_MspInit+0x8c>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d130      	bne.n	8002438 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80023d6:	4b1b      	ldr	r3, [pc, #108]	; (8002444 <HAL_UART_MspInit+0x90>)
 80023d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023da:	4b1a      	ldr	r3, [pc, #104]	; (8002444 <HAL_UART_MspInit+0x90>)
 80023dc:	2180      	movs	r1, #128	; 0x80
 80023de:	0289      	lsls	r1, r1, #10
 80023e0:	430a      	orrs	r2, r1
 80023e2:	63da      	str	r2, [r3, #60]	; 0x3c
 80023e4:	4b17      	ldr	r3, [pc, #92]	; (8002444 <HAL_UART_MspInit+0x90>)
 80023e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023e8:	2380      	movs	r3, #128	; 0x80
 80023ea:	029b      	lsls	r3, r3, #10
 80023ec:	4013      	ands	r3, r2
 80023ee:	613b      	str	r3, [r7, #16]
 80023f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023f2:	4b14      	ldr	r3, [pc, #80]	; (8002444 <HAL_UART_MspInit+0x90>)
 80023f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023f6:	4b13      	ldr	r3, [pc, #76]	; (8002444 <HAL_UART_MspInit+0x90>)
 80023f8:	2101      	movs	r1, #1
 80023fa:	430a      	orrs	r2, r1
 80023fc:	635a      	str	r2, [r3, #52]	; 0x34
 80023fe:	4b11      	ldr	r3, [pc, #68]	; (8002444 <HAL_UART_MspInit+0x90>)
 8002400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002402:	2201      	movs	r2, #1
 8002404:	4013      	ands	r3, r2
 8002406:	60fb      	str	r3, [r7, #12]
 8002408:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800240a:	0021      	movs	r1, r4
 800240c:	187b      	adds	r3, r7, r1
 800240e:	220c      	movs	r2, #12
 8002410:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002412:	187b      	adds	r3, r7, r1
 8002414:	2202      	movs	r2, #2
 8002416:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002418:	187b      	adds	r3, r7, r1
 800241a:	2200      	movs	r2, #0
 800241c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800241e:	187b      	adds	r3, r7, r1
 8002420:	2200      	movs	r2, #0
 8002422:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002424:	187b      	adds	r3, r7, r1
 8002426:	2201      	movs	r2, #1
 8002428:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800242a:	187a      	adds	r2, r7, r1
 800242c:	23a0      	movs	r3, #160	; 0xa0
 800242e:	05db      	lsls	r3, r3, #23
 8002430:	0011      	movs	r1, r2
 8002432:	0018      	movs	r0, r3
 8002434:	f000 fa78 	bl	8002928 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002438:	46c0      	nop			; (mov r8, r8)
 800243a:	46bd      	mov	sp, r7
 800243c:	b00b      	add	sp, #44	; 0x2c
 800243e:	bd90      	pop	{r4, r7, pc}
 8002440:	40004400 	.word	0x40004400
 8002444:	40021000 	.word	0x40021000

08002448 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800244c:	e7fe      	b.n	800244c <NMI_Handler+0x4>

0800244e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800244e:	b580      	push	{r7, lr}
 8002450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002452:	e7fe      	b.n	8002452 <HardFault_Handler+0x4>

08002454 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002458:	46c0      	nop			; (mov r8, r8)
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}

0800245e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800245e:	b580      	push	{r7, lr}
 8002460:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002462:	46c0      	nop			; (mov r8, r8)
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}

08002468 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800246c:	f000 f93e 	bl	80026ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002470:	46c0      	nop			; (mov r8, r8)
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8002476:	b580      	push	{r7, lr}
 8002478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(User_Button_Pin);
 800247a:	2380      	movs	r3, #128	; 0x80
 800247c:	019b      	lsls	r3, r3, #6
 800247e:	0018      	movs	r0, r3
 8002480:	f000 fbfe 	bl	8002c80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8002484:	46c0      	nop			; (mov r8, r8)
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}

0800248a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800248a:	b580      	push	{r7, lr}
 800248c:	b086      	sub	sp, #24
 800248e:	af00      	add	r7, sp, #0
 8002490:	60f8      	str	r0, [r7, #12]
 8002492:	60b9      	str	r1, [r7, #8]
 8002494:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002496:	2300      	movs	r3, #0
 8002498:	617b      	str	r3, [r7, #20]
 800249a:	e00a      	b.n	80024b2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800249c:	e000      	b.n	80024a0 <_read+0x16>
 800249e:	bf00      	nop
 80024a0:	0001      	movs	r1, r0
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	1c5a      	adds	r2, r3, #1
 80024a6:	60ba      	str	r2, [r7, #8]
 80024a8:	b2ca      	uxtb	r2, r1
 80024aa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	3301      	adds	r3, #1
 80024b0:	617b      	str	r3, [r7, #20]
 80024b2:	697a      	ldr	r2, [r7, #20]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	429a      	cmp	r2, r3
 80024b8:	dbf0      	blt.n	800249c <_read+0x12>
  }

  return len;
 80024ba:	687b      	ldr	r3, [r7, #4]
}
 80024bc:	0018      	movs	r0, r3
 80024be:	46bd      	mov	sp, r7
 80024c0:	b006      	add	sp, #24
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b086      	sub	sp, #24
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	60f8      	str	r0, [r7, #12]
 80024cc:	60b9      	str	r1, [r7, #8]
 80024ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024d0:	2300      	movs	r3, #0
 80024d2:	617b      	str	r3, [r7, #20]
 80024d4:	e009      	b.n	80024ea <_write+0x26>
  {
    __io_putchar(*ptr++);
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	1c5a      	adds	r2, r3, #1
 80024da:	60ba      	str	r2, [r7, #8]
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	0018      	movs	r0, r3
 80024e0:	f7ff fa8c 	bl	80019fc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	3301      	adds	r3, #1
 80024e8:	617b      	str	r3, [r7, #20]
 80024ea:	697a      	ldr	r2, [r7, #20]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	429a      	cmp	r2, r3
 80024f0:	dbf1      	blt.n	80024d6 <_write+0x12>
  }
  return len;
 80024f2:	687b      	ldr	r3, [r7, #4]
}
 80024f4:	0018      	movs	r0, r3
 80024f6:	46bd      	mov	sp, r7
 80024f8:	b006      	add	sp, #24
 80024fa:	bd80      	pop	{r7, pc}

080024fc <_close>:

int _close(int file)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002504:	2301      	movs	r3, #1
 8002506:	425b      	negs	r3, r3
}
 8002508:	0018      	movs	r0, r3
 800250a:	46bd      	mov	sp, r7
 800250c:	b002      	add	sp, #8
 800250e:	bd80      	pop	{r7, pc}

08002510 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	2280      	movs	r2, #128	; 0x80
 800251e:	0192      	lsls	r2, r2, #6
 8002520:	605a      	str	r2, [r3, #4]
  return 0;
 8002522:	2300      	movs	r3, #0
}
 8002524:	0018      	movs	r0, r3
 8002526:	46bd      	mov	sp, r7
 8002528:	b002      	add	sp, #8
 800252a:	bd80      	pop	{r7, pc}

0800252c <_isatty>:

int _isatty(int file)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002534:	2301      	movs	r3, #1
}
 8002536:	0018      	movs	r0, r3
 8002538:	46bd      	mov	sp, r7
 800253a:	b002      	add	sp, #8
 800253c:	bd80      	pop	{r7, pc}

0800253e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800253e:	b580      	push	{r7, lr}
 8002540:	b084      	sub	sp, #16
 8002542:	af00      	add	r7, sp, #0
 8002544:	60f8      	str	r0, [r7, #12]
 8002546:	60b9      	str	r1, [r7, #8]
 8002548:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800254a:	2300      	movs	r3, #0
}
 800254c:	0018      	movs	r0, r3
 800254e:	46bd      	mov	sp, r7
 8002550:	b004      	add	sp, #16
 8002552:	bd80      	pop	{r7, pc}

08002554 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b086      	sub	sp, #24
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800255c:	4a14      	ldr	r2, [pc, #80]	; (80025b0 <_sbrk+0x5c>)
 800255e:	4b15      	ldr	r3, [pc, #84]	; (80025b4 <_sbrk+0x60>)
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002568:	4b13      	ldr	r3, [pc, #76]	; (80025b8 <_sbrk+0x64>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d102      	bne.n	8002576 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002570:	4b11      	ldr	r3, [pc, #68]	; (80025b8 <_sbrk+0x64>)
 8002572:	4a12      	ldr	r2, [pc, #72]	; (80025bc <_sbrk+0x68>)
 8002574:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002576:	4b10      	ldr	r3, [pc, #64]	; (80025b8 <_sbrk+0x64>)
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	18d3      	adds	r3, r2, r3
 800257e:	693a      	ldr	r2, [r7, #16]
 8002580:	429a      	cmp	r2, r3
 8002582:	d207      	bcs.n	8002594 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002584:	f002 fbae 	bl	8004ce4 <__errno>
 8002588:	0003      	movs	r3, r0
 800258a:	220c      	movs	r2, #12
 800258c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800258e:	2301      	movs	r3, #1
 8002590:	425b      	negs	r3, r3
 8002592:	e009      	b.n	80025a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002594:	4b08      	ldr	r3, [pc, #32]	; (80025b8 <_sbrk+0x64>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800259a:	4b07      	ldr	r3, [pc, #28]	; (80025b8 <_sbrk+0x64>)
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	18d2      	adds	r2, r2, r3
 80025a2:	4b05      	ldr	r3, [pc, #20]	; (80025b8 <_sbrk+0x64>)
 80025a4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80025a6:	68fb      	ldr	r3, [r7, #12]
}
 80025a8:	0018      	movs	r0, r3
 80025aa:	46bd      	mov	sp, r7
 80025ac:	b006      	add	sp, #24
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	20003000 	.word	0x20003000
 80025b4:	00000400 	.word	0x00000400
 80025b8:	200001cc 	.word	0x200001cc
 80025bc:	20000320 	.word	0x20000320

080025c0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80025c4:	4b03      	ldr	r3, [pc, #12]	; (80025d4 <SystemInit+0x14>)
 80025c6:	2280      	movs	r2, #128	; 0x80
 80025c8:	0512      	lsls	r2, r2, #20
 80025ca:	609a      	str	r2, [r3, #8]
#endif
}
 80025cc:	46c0      	nop			; (mov r8, r8)
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	46c0      	nop			; (mov r8, r8)
 80025d4:	e000ed00 	.word	0xe000ed00

080025d8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80025d8:	480d      	ldr	r0, [pc, #52]	; (8002610 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80025da:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80025dc:	f7ff fff0 	bl	80025c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80025e0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80025e2:	e003      	b.n	80025ec <LoopCopyDataInit>

080025e4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80025e4:	4b0b      	ldr	r3, [pc, #44]	; (8002614 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 80025e6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80025e8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80025ea:	3104      	adds	r1, #4

080025ec <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80025ec:	480a      	ldr	r0, [pc, #40]	; (8002618 <LoopForever+0xa>)
  ldr r3, =_edata
 80025ee:	4b0b      	ldr	r3, [pc, #44]	; (800261c <LoopForever+0xe>)
  adds r2, r0, r1
 80025f0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80025f2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80025f4:	d3f6      	bcc.n	80025e4 <CopyDataInit>
  ldr r2, =_sbss
 80025f6:	4a0a      	ldr	r2, [pc, #40]	; (8002620 <LoopForever+0x12>)
  b LoopFillZerobss
 80025f8:	e002      	b.n	8002600 <LoopFillZerobss>

080025fa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80025fa:	2300      	movs	r3, #0
  str  r3, [r2]
 80025fc:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025fe:	3204      	adds	r2, #4

08002600 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8002600:	4b08      	ldr	r3, [pc, #32]	; (8002624 <LoopForever+0x16>)
  cmp r2, r3
 8002602:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002604:	d3f9      	bcc.n	80025fa <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8002606:	f002 fb73 	bl	8004cf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800260a:	f7ff fa55 	bl	8001ab8 <main>

0800260e <LoopForever>:

LoopForever:
    b LoopForever
 800260e:	e7fe      	b.n	800260e <LoopForever>
  ldr   r0, =_estack
 8002610:	20003000 	.word	0x20003000
  ldr r3, =_sidata
 8002614:	08005b10 	.word	0x08005b10
  ldr r0, =_sdata
 8002618:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800261c:	2000006c 	.word	0x2000006c
  ldr r2, =_sbss
 8002620:	2000006c 	.word	0x2000006c
  ldr r3, = _ebss
 8002624:	20000320 	.word	0x20000320

08002628 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002628:	e7fe      	b.n	8002628 <ADC1_IRQHandler>

0800262a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800262a:	b580      	push	{r7, lr}
 800262c:	b082      	sub	sp, #8
 800262e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002630:	1dfb      	adds	r3, r7, #7
 8002632:	2200      	movs	r2, #0
 8002634:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002636:	2003      	movs	r0, #3
 8002638:	f000 f80e 	bl	8002658 <HAL_InitTick>
 800263c:	1e03      	subs	r3, r0, #0
 800263e:	d003      	beq.n	8002648 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8002640:	1dfb      	adds	r3, r7, #7
 8002642:	2201      	movs	r2, #1
 8002644:	701a      	strb	r2, [r3, #0]
 8002646:	e001      	b.n	800264c <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002648:	f7ff fe0e 	bl	8002268 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800264c:	1dfb      	adds	r3, r7, #7
 800264e:	781b      	ldrb	r3, [r3, #0]
}
 8002650:	0018      	movs	r0, r3
 8002652:	46bd      	mov	sp, r7
 8002654:	b002      	add	sp, #8
 8002656:	bd80      	pop	{r7, pc}

08002658 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002658:	b590      	push	{r4, r7, lr}
 800265a:	b085      	sub	sp, #20
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002660:	230f      	movs	r3, #15
 8002662:	18fb      	adds	r3, r7, r3
 8002664:	2200      	movs	r2, #0
 8002666:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8002668:	4b1d      	ldr	r3, [pc, #116]	; (80026e0 <HAL_InitTick+0x88>)
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d02b      	beq.n	80026c8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8002670:	4b1c      	ldr	r3, [pc, #112]	; (80026e4 <HAL_InitTick+0x8c>)
 8002672:	681c      	ldr	r4, [r3, #0]
 8002674:	4b1a      	ldr	r3, [pc, #104]	; (80026e0 <HAL_InitTick+0x88>)
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	0019      	movs	r1, r3
 800267a:	23fa      	movs	r3, #250	; 0xfa
 800267c:	0098      	lsls	r0, r3, #2
 800267e:	f7fd fd4d 	bl	800011c <__udivsi3>
 8002682:	0003      	movs	r3, r0
 8002684:	0019      	movs	r1, r3
 8002686:	0020      	movs	r0, r4
 8002688:	f7fd fd48 	bl	800011c <__udivsi3>
 800268c:	0003      	movs	r3, r0
 800268e:	0018      	movs	r0, r3
 8002690:	f000 f93d 	bl	800290e <HAL_SYSTICK_Config>
 8002694:	1e03      	subs	r3, r0, #0
 8002696:	d112      	bne.n	80026be <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2b03      	cmp	r3, #3
 800269c:	d80a      	bhi.n	80026b4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800269e:	6879      	ldr	r1, [r7, #4]
 80026a0:	2301      	movs	r3, #1
 80026a2:	425b      	negs	r3, r3
 80026a4:	2200      	movs	r2, #0
 80026a6:	0018      	movs	r0, r3
 80026a8:	f000 f90c 	bl	80028c4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80026ac:	4b0e      	ldr	r3, [pc, #56]	; (80026e8 <HAL_InitTick+0x90>)
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	601a      	str	r2, [r3, #0]
 80026b2:	e00d      	b.n	80026d0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80026b4:	230f      	movs	r3, #15
 80026b6:	18fb      	adds	r3, r7, r3
 80026b8:	2201      	movs	r2, #1
 80026ba:	701a      	strb	r2, [r3, #0]
 80026bc:	e008      	b.n	80026d0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80026be:	230f      	movs	r3, #15
 80026c0:	18fb      	adds	r3, r7, r3
 80026c2:	2201      	movs	r2, #1
 80026c4:	701a      	strb	r2, [r3, #0]
 80026c6:	e003      	b.n	80026d0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80026c8:	230f      	movs	r3, #15
 80026ca:	18fb      	adds	r3, r7, r3
 80026cc:	2201      	movs	r2, #1
 80026ce:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80026d0:	230f      	movs	r3, #15
 80026d2:	18fb      	adds	r3, r7, r3
 80026d4:	781b      	ldrb	r3, [r3, #0]
}
 80026d6:	0018      	movs	r0, r3
 80026d8:	46bd      	mov	sp, r7
 80026da:	b005      	add	sp, #20
 80026dc:	bd90      	pop	{r4, r7, pc}
 80026de:	46c0      	nop			; (mov r8, r8)
 80026e0:	2000000c 	.word	0x2000000c
 80026e4:	20000004 	.word	0x20000004
 80026e8:	20000008 	.word	0x20000008

080026ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80026f0:	4b05      	ldr	r3, [pc, #20]	; (8002708 <HAL_IncTick+0x1c>)
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	001a      	movs	r2, r3
 80026f6:	4b05      	ldr	r3, [pc, #20]	; (800270c <HAL_IncTick+0x20>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	18d2      	adds	r2, r2, r3
 80026fc:	4b03      	ldr	r3, [pc, #12]	; (800270c <HAL_IncTick+0x20>)
 80026fe:	601a      	str	r2, [r3, #0]
}
 8002700:	46c0      	nop			; (mov r8, r8)
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	46c0      	nop			; (mov r8, r8)
 8002708:	2000000c 	.word	0x2000000c
 800270c:	200001d0 	.word	0x200001d0

08002710 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	af00      	add	r7, sp, #0
  return uwTick;
 8002714:	4b02      	ldr	r3, [pc, #8]	; (8002720 <HAL_GetTick+0x10>)
 8002716:	681b      	ldr	r3, [r3, #0]
}
 8002718:	0018      	movs	r0, r3
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	46c0      	nop			; (mov r8, r8)
 8002720:	200001d0 	.word	0x200001d0

08002724 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800272c:	f7ff fff0 	bl	8002710 <HAL_GetTick>
 8002730:	0003      	movs	r3, r0
 8002732:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	3301      	adds	r3, #1
 800273c:	d005      	beq.n	800274a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800273e:	4b0a      	ldr	r3, [pc, #40]	; (8002768 <HAL_Delay+0x44>)
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	001a      	movs	r2, r3
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	189b      	adds	r3, r3, r2
 8002748:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800274a:	46c0      	nop			; (mov r8, r8)
 800274c:	f7ff ffe0 	bl	8002710 <HAL_GetTick>
 8002750:	0002      	movs	r2, r0
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	68fa      	ldr	r2, [r7, #12]
 8002758:	429a      	cmp	r2, r3
 800275a:	d8f7      	bhi.n	800274c <HAL_Delay+0x28>
  {
  }
}
 800275c:	46c0      	nop			; (mov r8, r8)
 800275e:	46c0      	nop			; (mov r8, r8)
 8002760:	46bd      	mov	sp, r7
 8002762:	b004      	add	sp, #16
 8002764:	bd80      	pop	{r7, pc}
 8002766:	46c0      	nop			; (mov r8, r8)
 8002768:	2000000c 	.word	0x2000000c

0800276c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	0002      	movs	r2, r0
 8002774:	1dfb      	adds	r3, r7, #7
 8002776:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002778:	1dfb      	adds	r3, r7, #7
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	2b7f      	cmp	r3, #127	; 0x7f
 800277e:	d809      	bhi.n	8002794 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002780:	1dfb      	adds	r3, r7, #7
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	001a      	movs	r2, r3
 8002786:	231f      	movs	r3, #31
 8002788:	401a      	ands	r2, r3
 800278a:	4b04      	ldr	r3, [pc, #16]	; (800279c <__NVIC_EnableIRQ+0x30>)
 800278c:	2101      	movs	r1, #1
 800278e:	4091      	lsls	r1, r2
 8002790:	000a      	movs	r2, r1
 8002792:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002794:	46c0      	nop			; (mov r8, r8)
 8002796:	46bd      	mov	sp, r7
 8002798:	b002      	add	sp, #8
 800279a:	bd80      	pop	{r7, pc}
 800279c:	e000e100 	.word	0xe000e100

080027a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027a0:	b590      	push	{r4, r7, lr}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	0002      	movs	r2, r0
 80027a8:	6039      	str	r1, [r7, #0]
 80027aa:	1dfb      	adds	r3, r7, #7
 80027ac:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80027ae:	1dfb      	adds	r3, r7, #7
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	2b7f      	cmp	r3, #127	; 0x7f
 80027b4:	d828      	bhi.n	8002808 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80027b6:	4a2f      	ldr	r2, [pc, #188]	; (8002874 <__NVIC_SetPriority+0xd4>)
 80027b8:	1dfb      	adds	r3, r7, #7
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	b25b      	sxtb	r3, r3
 80027be:	089b      	lsrs	r3, r3, #2
 80027c0:	33c0      	adds	r3, #192	; 0xc0
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	589b      	ldr	r3, [r3, r2]
 80027c6:	1dfa      	adds	r2, r7, #7
 80027c8:	7812      	ldrb	r2, [r2, #0]
 80027ca:	0011      	movs	r1, r2
 80027cc:	2203      	movs	r2, #3
 80027ce:	400a      	ands	r2, r1
 80027d0:	00d2      	lsls	r2, r2, #3
 80027d2:	21ff      	movs	r1, #255	; 0xff
 80027d4:	4091      	lsls	r1, r2
 80027d6:	000a      	movs	r2, r1
 80027d8:	43d2      	mvns	r2, r2
 80027da:	401a      	ands	r2, r3
 80027dc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	019b      	lsls	r3, r3, #6
 80027e2:	22ff      	movs	r2, #255	; 0xff
 80027e4:	401a      	ands	r2, r3
 80027e6:	1dfb      	adds	r3, r7, #7
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	0018      	movs	r0, r3
 80027ec:	2303      	movs	r3, #3
 80027ee:	4003      	ands	r3, r0
 80027f0:	00db      	lsls	r3, r3, #3
 80027f2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80027f4:	481f      	ldr	r0, [pc, #124]	; (8002874 <__NVIC_SetPriority+0xd4>)
 80027f6:	1dfb      	adds	r3, r7, #7
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	b25b      	sxtb	r3, r3
 80027fc:	089b      	lsrs	r3, r3, #2
 80027fe:	430a      	orrs	r2, r1
 8002800:	33c0      	adds	r3, #192	; 0xc0
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002806:	e031      	b.n	800286c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002808:	4a1b      	ldr	r2, [pc, #108]	; (8002878 <__NVIC_SetPriority+0xd8>)
 800280a:	1dfb      	adds	r3, r7, #7
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	0019      	movs	r1, r3
 8002810:	230f      	movs	r3, #15
 8002812:	400b      	ands	r3, r1
 8002814:	3b08      	subs	r3, #8
 8002816:	089b      	lsrs	r3, r3, #2
 8002818:	3306      	adds	r3, #6
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	18d3      	adds	r3, r2, r3
 800281e:	3304      	adds	r3, #4
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	1dfa      	adds	r2, r7, #7
 8002824:	7812      	ldrb	r2, [r2, #0]
 8002826:	0011      	movs	r1, r2
 8002828:	2203      	movs	r2, #3
 800282a:	400a      	ands	r2, r1
 800282c:	00d2      	lsls	r2, r2, #3
 800282e:	21ff      	movs	r1, #255	; 0xff
 8002830:	4091      	lsls	r1, r2
 8002832:	000a      	movs	r2, r1
 8002834:	43d2      	mvns	r2, r2
 8002836:	401a      	ands	r2, r3
 8002838:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	019b      	lsls	r3, r3, #6
 800283e:	22ff      	movs	r2, #255	; 0xff
 8002840:	401a      	ands	r2, r3
 8002842:	1dfb      	adds	r3, r7, #7
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	0018      	movs	r0, r3
 8002848:	2303      	movs	r3, #3
 800284a:	4003      	ands	r3, r0
 800284c:	00db      	lsls	r3, r3, #3
 800284e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002850:	4809      	ldr	r0, [pc, #36]	; (8002878 <__NVIC_SetPriority+0xd8>)
 8002852:	1dfb      	adds	r3, r7, #7
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	001c      	movs	r4, r3
 8002858:	230f      	movs	r3, #15
 800285a:	4023      	ands	r3, r4
 800285c:	3b08      	subs	r3, #8
 800285e:	089b      	lsrs	r3, r3, #2
 8002860:	430a      	orrs	r2, r1
 8002862:	3306      	adds	r3, #6
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	18c3      	adds	r3, r0, r3
 8002868:	3304      	adds	r3, #4
 800286a:	601a      	str	r2, [r3, #0]
}
 800286c:	46c0      	nop			; (mov r8, r8)
 800286e:	46bd      	mov	sp, r7
 8002870:	b003      	add	sp, #12
 8002872:	bd90      	pop	{r4, r7, pc}
 8002874:	e000e100 	.word	0xe000e100
 8002878:	e000ed00 	.word	0xe000ed00

0800287c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	1e5a      	subs	r2, r3, #1
 8002888:	2380      	movs	r3, #128	; 0x80
 800288a:	045b      	lsls	r3, r3, #17
 800288c:	429a      	cmp	r2, r3
 800288e:	d301      	bcc.n	8002894 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002890:	2301      	movs	r3, #1
 8002892:	e010      	b.n	80028b6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002894:	4b0a      	ldr	r3, [pc, #40]	; (80028c0 <SysTick_Config+0x44>)
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	3a01      	subs	r2, #1
 800289a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800289c:	2301      	movs	r3, #1
 800289e:	425b      	negs	r3, r3
 80028a0:	2103      	movs	r1, #3
 80028a2:	0018      	movs	r0, r3
 80028a4:	f7ff ff7c 	bl	80027a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028a8:	4b05      	ldr	r3, [pc, #20]	; (80028c0 <SysTick_Config+0x44>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028ae:	4b04      	ldr	r3, [pc, #16]	; (80028c0 <SysTick_Config+0x44>)
 80028b0:	2207      	movs	r2, #7
 80028b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	0018      	movs	r0, r3
 80028b8:	46bd      	mov	sp, r7
 80028ba:	b002      	add	sp, #8
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	46c0      	nop			; (mov r8, r8)
 80028c0:	e000e010 	.word	0xe000e010

080028c4 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	60b9      	str	r1, [r7, #8]
 80028cc:	607a      	str	r2, [r7, #4]
 80028ce:	210f      	movs	r1, #15
 80028d0:	187b      	adds	r3, r7, r1
 80028d2:	1c02      	adds	r2, r0, #0
 80028d4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80028d6:	68ba      	ldr	r2, [r7, #8]
 80028d8:	187b      	adds	r3, r7, r1
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	b25b      	sxtb	r3, r3
 80028de:	0011      	movs	r1, r2
 80028e0:	0018      	movs	r0, r3
 80028e2:	f7ff ff5d 	bl	80027a0 <__NVIC_SetPriority>
}
 80028e6:	46c0      	nop			; (mov r8, r8)
 80028e8:	46bd      	mov	sp, r7
 80028ea:	b004      	add	sp, #16
 80028ec:	bd80      	pop	{r7, pc}

080028ee <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b082      	sub	sp, #8
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	0002      	movs	r2, r0
 80028f6:	1dfb      	adds	r3, r7, #7
 80028f8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028fa:	1dfb      	adds	r3, r7, #7
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	b25b      	sxtb	r3, r3
 8002900:	0018      	movs	r0, r3
 8002902:	f7ff ff33 	bl	800276c <__NVIC_EnableIRQ>
}
 8002906:	46c0      	nop			; (mov r8, r8)
 8002908:	46bd      	mov	sp, r7
 800290a:	b002      	add	sp, #8
 800290c:	bd80      	pop	{r7, pc}

0800290e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800290e:	b580      	push	{r7, lr}
 8002910:	b082      	sub	sp, #8
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	0018      	movs	r0, r3
 800291a:	f7ff ffaf 	bl	800287c <SysTick_Config>
 800291e:	0003      	movs	r3, r0
}
 8002920:	0018      	movs	r0, r3
 8002922:	46bd      	mov	sp, r7
 8002924:	b002      	add	sp, #8
 8002926:	bd80      	pop	{r7, pc}

08002928 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b086      	sub	sp, #24
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8002932:	2300      	movs	r3, #0
 8002934:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002936:	e153      	b.n	8002be0 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2101      	movs	r1, #1
 800293e:	693a      	ldr	r2, [r7, #16]
 8002940:	4091      	lsls	r1, r2
 8002942:	000a      	movs	r2, r1
 8002944:	4013      	ands	r3, r2
 8002946:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d100      	bne.n	8002950 <HAL_GPIO_Init+0x28>
 800294e:	e144      	b.n	8002bda <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	2b02      	cmp	r3, #2
 8002956:	d003      	beq.n	8002960 <HAL_GPIO_Init+0x38>
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	2b12      	cmp	r3, #18
 800295e:	d125      	bne.n	80029ac <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	08da      	lsrs	r2, r3, #3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	3208      	adds	r2, #8
 8002968:	0092      	lsls	r2, r2, #2
 800296a:	58d3      	ldr	r3, [r2, r3]
 800296c:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	2207      	movs	r2, #7
 8002972:	4013      	ands	r3, r2
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	220f      	movs	r2, #15
 8002978:	409a      	lsls	r2, r3
 800297a:	0013      	movs	r3, r2
 800297c:	43da      	mvns	r2, r3
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	4013      	ands	r3, r2
 8002982:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	691b      	ldr	r3, [r3, #16]
 8002988:	220f      	movs	r2, #15
 800298a:	401a      	ands	r2, r3
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	2107      	movs	r1, #7
 8002990:	400b      	ands	r3, r1
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	409a      	lsls	r2, r3
 8002996:	0013      	movs	r3, r2
 8002998:	697a      	ldr	r2, [r7, #20]
 800299a:	4313      	orrs	r3, r2
 800299c:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	08da      	lsrs	r2, r3, #3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	3208      	adds	r2, #8
 80029a6:	0092      	lsls	r2, r2, #2
 80029a8:	6979      	ldr	r1, [r7, #20]
 80029aa:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	005b      	lsls	r3, r3, #1
 80029b6:	2203      	movs	r2, #3
 80029b8:	409a      	lsls	r2, r3
 80029ba:	0013      	movs	r3, r2
 80029bc:	43da      	mvns	r2, r3
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	4013      	ands	r3, r2
 80029c2:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	2203      	movs	r2, #3
 80029ca:	401a      	ands	r2, r3
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	005b      	lsls	r3, r3, #1
 80029d0:	409a      	lsls	r2, r3
 80029d2:	0013      	movs	r3, r2
 80029d4:	697a      	ldr	r2, [r7, #20]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	697a      	ldr	r2, [r7, #20]
 80029de:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d00b      	beq.n	8002a00 <HAL_GPIO_Init+0xd8>
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d007      	beq.n	8002a00 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80029f4:	2b11      	cmp	r3, #17
 80029f6:	d003      	beq.n	8002a00 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	2b12      	cmp	r3, #18
 80029fe:	d130      	bne.n	8002a62 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	005b      	lsls	r3, r3, #1
 8002a0a:	2203      	movs	r2, #3
 8002a0c:	409a      	lsls	r2, r3
 8002a0e:	0013      	movs	r3, r2
 8002a10:	43da      	mvns	r2, r3
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	4013      	ands	r3, r2
 8002a16:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	68da      	ldr	r2, [r3, #12]
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	005b      	lsls	r3, r3, #1
 8002a20:	409a      	lsls	r2, r3
 8002a22:	0013      	movs	r3, r2
 8002a24:	697a      	ldr	r2, [r7, #20]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	697a      	ldr	r2, [r7, #20]
 8002a2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a36:	2201      	movs	r2, #1
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	409a      	lsls	r2, r3
 8002a3c:	0013      	movs	r3, r2
 8002a3e:	43da      	mvns	r2, r3
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	4013      	ands	r3, r2
 8002a44:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	091b      	lsrs	r3, r3, #4
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	401a      	ands	r2, r3
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	409a      	lsls	r2, r3
 8002a54:	0013      	movs	r3, r2
 8002a56:	697a      	ldr	r2, [r7, #20]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	697a      	ldr	r2, [r7, #20]
 8002a60:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	2b03      	cmp	r3, #3
 8002a68:	d017      	beq.n	8002a9a <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	005b      	lsls	r3, r3, #1
 8002a74:	2203      	movs	r2, #3
 8002a76:	409a      	lsls	r2, r3
 8002a78:	0013      	movs	r3, r2
 8002a7a:	43da      	mvns	r2, r3
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	4013      	ands	r3, r2
 8002a80:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	689a      	ldr	r2, [r3, #8]
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	005b      	lsls	r3, r3, #1
 8002a8a:	409a      	lsls	r2, r3
 8002a8c:	0013      	movs	r3, r2
 8002a8e:	697a      	ldr	r2, [r7, #20]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	697a      	ldr	r2, [r7, #20]
 8002a98:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	685a      	ldr	r2, [r3, #4]
 8002a9e:	2380      	movs	r3, #128	; 0x80
 8002aa0:	055b      	lsls	r3, r3, #21
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	d100      	bne.n	8002aa8 <HAL_GPIO_Init+0x180>
 8002aa6:	e098      	b.n	8002bda <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8002aa8:	4a53      	ldr	r2, [pc, #332]	; (8002bf8 <HAL_GPIO_Init+0x2d0>)
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	089b      	lsrs	r3, r3, #2
 8002aae:	3318      	adds	r3, #24
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	589b      	ldr	r3, [r3, r2]
 8002ab4:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	2203      	movs	r2, #3
 8002aba:	4013      	ands	r3, r2
 8002abc:	00db      	lsls	r3, r3, #3
 8002abe:	220f      	movs	r2, #15
 8002ac0:	409a      	lsls	r2, r3
 8002ac2:	0013      	movs	r3, r2
 8002ac4:	43da      	mvns	r2, r3
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	4013      	ands	r3, r2
 8002aca:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	23a0      	movs	r3, #160	; 0xa0
 8002ad0:	05db      	lsls	r3, r3, #23
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d019      	beq.n	8002b0a <HAL_GPIO_Init+0x1e2>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a48      	ldr	r2, [pc, #288]	; (8002bfc <HAL_GPIO_Init+0x2d4>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d013      	beq.n	8002b06 <HAL_GPIO_Init+0x1de>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a47      	ldr	r2, [pc, #284]	; (8002c00 <HAL_GPIO_Init+0x2d8>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d00d      	beq.n	8002b02 <HAL_GPIO_Init+0x1da>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a46      	ldr	r2, [pc, #280]	; (8002c04 <HAL_GPIO_Init+0x2dc>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d007      	beq.n	8002afe <HAL_GPIO_Init+0x1d6>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a45      	ldr	r2, [pc, #276]	; (8002c08 <HAL_GPIO_Init+0x2e0>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d101      	bne.n	8002afa <HAL_GPIO_Init+0x1d2>
 8002af6:	2305      	movs	r3, #5
 8002af8:	e008      	b.n	8002b0c <HAL_GPIO_Init+0x1e4>
 8002afa:	2306      	movs	r3, #6
 8002afc:	e006      	b.n	8002b0c <HAL_GPIO_Init+0x1e4>
 8002afe:	2303      	movs	r3, #3
 8002b00:	e004      	b.n	8002b0c <HAL_GPIO_Init+0x1e4>
 8002b02:	2302      	movs	r3, #2
 8002b04:	e002      	b.n	8002b0c <HAL_GPIO_Init+0x1e4>
 8002b06:	2301      	movs	r3, #1
 8002b08:	e000      	b.n	8002b0c <HAL_GPIO_Init+0x1e4>
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	693a      	ldr	r2, [r7, #16]
 8002b0e:	2103      	movs	r1, #3
 8002b10:	400a      	ands	r2, r1
 8002b12:	00d2      	lsls	r2, r2, #3
 8002b14:	4093      	lsls	r3, r2
 8002b16:	697a      	ldr	r2, [r7, #20]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8002b1c:	4936      	ldr	r1, [pc, #216]	; (8002bf8 <HAL_GPIO_Init+0x2d0>)
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	089b      	lsrs	r3, r3, #2
 8002b22:	3318      	adds	r3, #24
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	697a      	ldr	r2, [r7, #20]
 8002b28:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8002b2a:	4a33      	ldr	r2, [pc, #204]	; (8002bf8 <HAL_GPIO_Init+0x2d0>)
 8002b2c:	2380      	movs	r3, #128	; 0x80
 8002b2e:	58d3      	ldr	r3, [r2, r3]
 8002b30:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	43da      	mvns	r2, r3
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	4013      	ands	r3, r2
 8002b3a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	685a      	ldr	r2, [r3, #4]
 8002b40:	2380      	movs	r3, #128	; 0x80
 8002b42:	025b      	lsls	r3, r3, #9
 8002b44:	4013      	ands	r3, r2
 8002b46:	d003      	beq.n	8002b50 <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 8002b48:	697a      	ldr	r2, [r7, #20]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8002b50:	4929      	ldr	r1, [pc, #164]	; (8002bf8 <HAL_GPIO_Init+0x2d0>)
 8002b52:	2280      	movs	r2, #128	; 0x80
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8002b58:	4a27      	ldr	r2, [pc, #156]	; (8002bf8 <HAL_GPIO_Init+0x2d0>)
 8002b5a:	2384      	movs	r3, #132	; 0x84
 8002b5c:	58d3      	ldr	r3, [r2, r3]
 8002b5e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	43da      	mvns	r2, r3
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	4013      	ands	r3, r2
 8002b68:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	685a      	ldr	r2, [r3, #4]
 8002b6e:	2380      	movs	r3, #128	; 0x80
 8002b70:	029b      	lsls	r3, r3, #10
 8002b72:	4013      	ands	r3, r2
 8002b74:	d003      	beq.n	8002b7e <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 8002b76:	697a      	ldr	r2, [r7, #20]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8002b7e:	491e      	ldr	r1, [pc, #120]	; (8002bf8 <HAL_GPIO_Init+0x2d0>)
 8002b80:	2284      	movs	r2, #132	; 0x84
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002b86:	4b1c      	ldr	r3, [pc, #112]	; (8002bf8 <HAL_GPIO_Init+0x2d0>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	43da      	mvns	r2, r3
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	4013      	ands	r3, r2
 8002b94:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	685a      	ldr	r2, [r3, #4]
 8002b9a:	2380      	movs	r3, #128	; 0x80
 8002b9c:	035b      	lsls	r3, r3, #13
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	d003      	beq.n	8002baa <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 8002ba2:	697a      	ldr	r2, [r7, #20]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8002baa:	4b13      	ldr	r3, [pc, #76]	; (8002bf8 <HAL_GPIO_Init+0x2d0>)
 8002bac:	697a      	ldr	r2, [r7, #20]
 8002bae:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8002bb0:	4b11      	ldr	r3, [pc, #68]	; (8002bf8 <HAL_GPIO_Init+0x2d0>)
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	43da      	mvns	r2, r3
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	685a      	ldr	r2, [r3, #4]
 8002bc4:	2380      	movs	r3, #128	; 0x80
 8002bc6:	039b      	lsls	r3, r3, #14
 8002bc8:	4013      	ands	r3, r2
 8002bca:	d003      	beq.n	8002bd4 <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 8002bcc:	697a      	ldr	r2, [r7, #20]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8002bd4:	4b08      	ldr	r3, [pc, #32]	; (8002bf8 <HAL_GPIO_Init+0x2d0>)
 8002bd6:	697a      	ldr	r2, [r7, #20]
 8002bd8:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	3301      	adds	r3, #1
 8002bde:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	40da      	lsrs	r2, r3
 8002be8:	1e13      	subs	r3, r2, #0
 8002bea:	d000      	beq.n	8002bee <HAL_GPIO_Init+0x2c6>
 8002bec:	e6a4      	b.n	8002938 <HAL_GPIO_Init+0x10>
  }
}
 8002bee:	46c0      	nop			; (mov r8, r8)
 8002bf0:	46c0      	nop			; (mov r8, r8)
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	b006      	add	sp, #24
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	40021800 	.word	0x40021800
 8002bfc:	50000400 	.word	0x50000400
 8002c00:	50000800 	.word	0x50000800
 8002c04:	50000c00 	.word	0x50000c00
 8002c08:	50001400 	.word	0x50001400

08002c0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	000a      	movs	r2, r1
 8002c16:	1cbb      	adds	r3, r7, #2
 8002c18:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	691b      	ldr	r3, [r3, #16]
 8002c1e:	1cba      	adds	r2, r7, #2
 8002c20:	8812      	ldrh	r2, [r2, #0]
 8002c22:	4013      	ands	r3, r2
 8002c24:	d004      	beq.n	8002c30 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002c26:	230f      	movs	r3, #15
 8002c28:	18fb      	adds	r3, r7, r3
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	701a      	strb	r2, [r3, #0]
 8002c2e:	e003      	b.n	8002c38 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c30:	230f      	movs	r3, #15
 8002c32:	18fb      	adds	r3, r7, r3
 8002c34:	2200      	movs	r2, #0
 8002c36:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002c38:	230f      	movs	r3, #15
 8002c3a:	18fb      	adds	r3, r7, r3
 8002c3c:	781b      	ldrb	r3, [r3, #0]
}
 8002c3e:	0018      	movs	r0, r3
 8002c40:	46bd      	mov	sp, r7
 8002c42:	b004      	add	sp, #16
 8002c44:	bd80      	pop	{r7, pc}

08002c46 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c46:	b580      	push	{r7, lr}
 8002c48:	b082      	sub	sp, #8
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
 8002c4e:	0008      	movs	r0, r1
 8002c50:	0011      	movs	r1, r2
 8002c52:	1cbb      	adds	r3, r7, #2
 8002c54:	1c02      	adds	r2, r0, #0
 8002c56:	801a      	strh	r2, [r3, #0]
 8002c58:	1c7b      	adds	r3, r7, #1
 8002c5a:	1c0a      	adds	r2, r1, #0
 8002c5c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c5e:	1c7b      	adds	r3, r7, #1
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d004      	beq.n	8002c70 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c66:	1cbb      	adds	r3, r7, #2
 8002c68:	881a      	ldrh	r2, [r3, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c6e:	e003      	b.n	8002c78 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c70:	1cbb      	adds	r3, r7, #2
 8002c72:	881a      	ldrh	r2, [r3, #0]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002c78:	46c0      	nop			; (mov r8, r8)
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	b002      	add	sp, #8
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	0002      	movs	r2, r0
 8002c88:	1dbb      	adds	r3, r7, #6
 8002c8a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8002c8c:	4b10      	ldr	r3, [pc, #64]	; (8002cd0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	1dba      	adds	r2, r7, #6
 8002c92:	8812      	ldrh	r2, [r2, #0]
 8002c94:	4013      	ands	r3, r2
 8002c96:	d008      	beq.n	8002caa <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8002c98:	4b0d      	ldr	r3, [pc, #52]	; (8002cd0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002c9a:	1dba      	adds	r2, r7, #6
 8002c9c:	8812      	ldrh	r2, [r2, #0]
 8002c9e:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8002ca0:	1dbb      	adds	r3, r7, #6
 8002ca2:	881b      	ldrh	r3, [r3, #0]
 8002ca4:	0018      	movs	r0, r3
 8002ca6:	f000 f815 	bl	8002cd4 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8002caa:	4b09      	ldr	r3, [pc, #36]	; (8002cd0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002cac:	691b      	ldr	r3, [r3, #16]
 8002cae:	1dba      	adds	r2, r7, #6
 8002cb0:	8812      	ldrh	r2, [r2, #0]
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	d008      	beq.n	8002cc8 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8002cb6:	4b06      	ldr	r3, [pc, #24]	; (8002cd0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002cb8:	1dba      	adds	r2, r7, #6
 8002cba:	8812      	ldrh	r2, [r2, #0]
 8002cbc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8002cbe:	1dbb      	adds	r3, r7, #6
 8002cc0:	881b      	ldrh	r3, [r3, #0]
 8002cc2:	0018      	movs	r0, r3
 8002cc4:	f000 f810 	bl	8002ce8 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8002cc8:	46c0      	nop			; (mov r8, r8)
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	b002      	add	sp, #8
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	40021800 	.word	0x40021800

08002cd4 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	0002      	movs	r2, r0
 8002cdc:	1dbb      	adds	r3, r7, #6
 8002cde:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8002ce0:	46c0      	nop			; (mov r8, r8)
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	b002      	add	sp, #8
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	0002      	movs	r2, r0
 8002cf0:	1dbb      	adds	r3, r7, #6
 8002cf2:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8002cf4:	46c0      	nop			; (mov r8, r8)
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	b002      	add	sp, #8
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d101      	bne.n	8002d0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e08f      	b.n	8002e2e <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2241      	movs	r2, #65	; 0x41
 8002d12:	5c9b      	ldrb	r3, [r3, r2]
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d107      	bne.n	8002d2a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2240      	movs	r2, #64	; 0x40
 8002d1e:	2100      	movs	r1, #0
 8002d20:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	0018      	movs	r0, r3
 8002d26:	f7ff fac3 	bl	80022b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2241      	movs	r2, #65	; 0x41
 8002d2e:	2124      	movs	r1, #36	; 0x24
 8002d30:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2101      	movs	r1, #1
 8002d3e:	438a      	bics	r2, r1
 8002d40:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685a      	ldr	r2, [r3, #4]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	493b      	ldr	r1, [pc, #236]	; (8002e38 <HAL_I2C_Init+0x13c>)
 8002d4c:	400a      	ands	r2, r1
 8002d4e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	689a      	ldr	r2, [r3, #8]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4938      	ldr	r1, [pc, #224]	; (8002e3c <HAL_I2C_Init+0x140>)
 8002d5c:	400a      	ands	r2, r1
 8002d5e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d108      	bne.n	8002d7a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	689a      	ldr	r2, [r3, #8]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2180      	movs	r1, #128	; 0x80
 8002d72:	0209      	lsls	r1, r1, #8
 8002d74:	430a      	orrs	r2, r1
 8002d76:	609a      	str	r2, [r3, #8]
 8002d78:	e007      	b.n	8002d8a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	689a      	ldr	r2, [r3, #8]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	2184      	movs	r1, #132	; 0x84
 8002d84:	0209      	lsls	r1, r1, #8
 8002d86:	430a      	orrs	r2, r1
 8002d88:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d109      	bne.n	8002da6 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	685a      	ldr	r2, [r3, #4]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2180      	movs	r1, #128	; 0x80
 8002d9e:	0109      	lsls	r1, r1, #4
 8002da0:	430a      	orrs	r2, r1
 8002da2:	605a      	str	r2, [r3, #4]
 8002da4:	e007      	b.n	8002db6 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	685a      	ldr	r2, [r3, #4]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4923      	ldr	r1, [pc, #140]	; (8002e40 <HAL_I2C_Init+0x144>)
 8002db2:	400a      	ands	r2, r1
 8002db4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	685a      	ldr	r2, [r3, #4]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4920      	ldr	r1, [pc, #128]	; (8002e44 <HAL_I2C_Init+0x148>)
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	68da      	ldr	r2, [r3, #12]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	491a      	ldr	r1, [pc, #104]	; (8002e3c <HAL_I2C_Init+0x140>)
 8002dd2:	400a      	ands	r2, r1
 8002dd4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	691a      	ldr	r2, [r3, #16]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	695b      	ldr	r3, [r3, #20]
 8002dde:	431a      	orrs	r2, r3
 8002de0:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	430a      	orrs	r2, r1
 8002dee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	69d9      	ldr	r1, [r3, #28]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a1a      	ldr	r2, [r3, #32]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	430a      	orrs	r2, r1
 8002dfe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	2101      	movs	r1, #1
 8002e0c:	430a      	orrs	r2, r1
 8002e0e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2200      	movs	r2, #0
 8002e14:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2241      	movs	r2, #65	; 0x41
 8002e1a:	2120      	movs	r1, #32
 8002e1c:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2242      	movs	r2, #66	; 0x42
 8002e28:	2100      	movs	r1, #0
 8002e2a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	0018      	movs	r0, r3
 8002e30:	46bd      	mov	sp, r7
 8002e32:	b002      	add	sp, #8
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	46c0      	nop			; (mov r8, r8)
 8002e38:	f0ffffff 	.word	0xf0ffffff
 8002e3c:	ffff7fff 	.word	0xffff7fff
 8002e40:	fffff7ff 	.word	0xfffff7ff
 8002e44:	02008000 	.word	0x02008000

08002e48 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2241      	movs	r2, #65	; 0x41
 8002e56:	5c9b      	ldrb	r3, [r3, r2]
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	2b20      	cmp	r3, #32
 8002e5c:	d138      	bne.n	8002ed0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2240      	movs	r2, #64	; 0x40
 8002e62:	5c9b      	ldrb	r3, [r3, r2]
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d101      	bne.n	8002e6c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002e68:	2302      	movs	r3, #2
 8002e6a:	e032      	b.n	8002ed2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2240      	movs	r2, #64	; 0x40
 8002e70:	2101      	movs	r1, #1
 8002e72:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2241      	movs	r2, #65	; 0x41
 8002e78:	2124      	movs	r1, #36	; 0x24
 8002e7a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2101      	movs	r1, #1
 8002e88:	438a      	bics	r2, r1
 8002e8a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4911      	ldr	r1, [pc, #68]	; (8002edc <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002e98:	400a      	ands	r2, r1
 8002e9a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	6819      	ldr	r1, [r3, #0]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	683a      	ldr	r2, [r7, #0]
 8002ea8:	430a      	orrs	r2, r1
 8002eaa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2101      	movs	r1, #1
 8002eb8:	430a      	orrs	r2, r1
 8002eba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2241      	movs	r2, #65	; 0x41
 8002ec0:	2120      	movs	r1, #32
 8002ec2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2240      	movs	r2, #64	; 0x40
 8002ec8:	2100      	movs	r1, #0
 8002eca:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	e000      	b.n	8002ed2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002ed0:	2302      	movs	r3, #2
  }
}
 8002ed2:	0018      	movs	r0, r3
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	b002      	add	sp, #8
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	46c0      	nop			; (mov r8, r8)
 8002edc:	ffffefff 	.word	0xffffefff

08002ee0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2241      	movs	r2, #65	; 0x41
 8002eee:	5c9b      	ldrb	r3, [r3, r2]
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	2b20      	cmp	r3, #32
 8002ef4:	d139      	bne.n	8002f6a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2240      	movs	r2, #64	; 0x40
 8002efa:	5c9b      	ldrb	r3, [r3, r2]
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d101      	bne.n	8002f04 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002f00:	2302      	movs	r3, #2
 8002f02:	e033      	b.n	8002f6c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2240      	movs	r2, #64	; 0x40
 8002f08:	2101      	movs	r1, #1
 8002f0a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2241      	movs	r2, #65	; 0x41
 8002f10:	2124      	movs	r1, #36	; 0x24
 8002f12:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2101      	movs	r1, #1
 8002f20:	438a      	bics	r2, r1
 8002f22:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	4a11      	ldr	r2, [pc, #68]	; (8002f74 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002f30:	4013      	ands	r3, r2
 8002f32:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	021b      	lsls	r3, r3, #8
 8002f38:	68fa      	ldr	r2, [r7, #12]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	68fa      	ldr	r2, [r7, #12]
 8002f44:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	2101      	movs	r1, #1
 8002f52:	430a      	orrs	r2, r1
 8002f54:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2241      	movs	r2, #65	; 0x41
 8002f5a:	2120      	movs	r1, #32
 8002f5c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2240      	movs	r2, #64	; 0x40
 8002f62:	2100      	movs	r1, #0
 8002f64:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002f66:	2300      	movs	r3, #0
 8002f68:	e000      	b.n	8002f6c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002f6a:	2302      	movs	r3, #2
  }
}
 8002f6c:	0018      	movs	r0, r3
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	b004      	add	sp, #16
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	fffff0ff 	.word	0xfffff0ff

08002f78 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b086      	sub	sp, #24
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d101      	bne.n	8002f8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e1d0      	b.n	800332c <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	4013      	ands	r3, r2
 8002f92:	d100      	bne.n	8002f96 <HAL_RCC_OscConfig+0x1e>
 8002f94:	e069      	b.n	800306a <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f96:	4bc8      	ldr	r3, [pc, #800]	; (80032b8 <HAL_RCC_OscConfig+0x340>)
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	2238      	movs	r2, #56	; 0x38
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	2b08      	cmp	r3, #8
 8002fa4:	d105      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d15d      	bne.n	800306a <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e1bc      	b.n	800332c <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685a      	ldr	r2, [r3, #4]
 8002fb6:	2380      	movs	r3, #128	; 0x80
 8002fb8:	025b      	lsls	r3, r3, #9
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d107      	bne.n	8002fce <HAL_RCC_OscConfig+0x56>
 8002fbe:	4bbe      	ldr	r3, [pc, #760]	; (80032b8 <HAL_RCC_OscConfig+0x340>)
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	4bbd      	ldr	r3, [pc, #756]	; (80032b8 <HAL_RCC_OscConfig+0x340>)
 8002fc4:	2180      	movs	r1, #128	; 0x80
 8002fc6:	0249      	lsls	r1, r1, #9
 8002fc8:	430a      	orrs	r2, r1
 8002fca:	601a      	str	r2, [r3, #0]
 8002fcc:	e020      	b.n	8003010 <HAL_RCC_OscConfig+0x98>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685a      	ldr	r2, [r3, #4]
 8002fd2:	23a0      	movs	r3, #160	; 0xa0
 8002fd4:	02db      	lsls	r3, r3, #11
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d10e      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x80>
 8002fda:	4bb7      	ldr	r3, [pc, #732]	; (80032b8 <HAL_RCC_OscConfig+0x340>)
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	4bb6      	ldr	r3, [pc, #728]	; (80032b8 <HAL_RCC_OscConfig+0x340>)
 8002fe0:	2180      	movs	r1, #128	; 0x80
 8002fe2:	02c9      	lsls	r1, r1, #11
 8002fe4:	430a      	orrs	r2, r1
 8002fe6:	601a      	str	r2, [r3, #0]
 8002fe8:	4bb3      	ldr	r3, [pc, #716]	; (80032b8 <HAL_RCC_OscConfig+0x340>)
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	4bb2      	ldr	r3, [pc, #712]	; (80032b8 <HAL_RCC_OscConfig+0x340>)
 8002fee:	2180      	movs	r1, #128	; 0x80
 8002ff0:	0249      	lsls	r1, r1, #9
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	601a      	str	r2, [r3, #0]
 8002ff6:	e00b      	b.n	8003010 <HAL_RCC_OscConfig+0x98>
 8002ff8:	4baf      	ldr	r3, [pc, #700]	; (80032b8 <HAL_RCC_OscConfig+0x340>)
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	4bae      	ldr	r3, [pc, #696]	; (80032b8 <HAL_RCC_OscConfig+0x340>)
 8002ffe:	49af      	ldr	r1, [pc, #700]	; (80032bc <HAL_RCC_OscConfig+0x344>)
 8003000:	400a      	ands	r2, r1
 8003002:	601a      	str	r2, [r3, #0]
 8003004:	4bac      	ldr	r3, [pc, #688]	; (80032b8 <HAL_RCC_OscConfig+0x340>)
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	4bab      	ldr	r3, [pc, #684]	; (80032b8 <HAL_RCC_OscConfig+0x340>)
 800300a:	49ad      	ldr	r1, [pc, #692]	; (80032c0 <HAL_RCC_OscConfig+0x348>)
 800300c:	400a      	ands	r2, r1
 800300e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d014      	beq.n	8003042 <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003018:	f7ff fb7a 	bl	8002710 <HAL_GetTick>
 800301c:	0003      	movs	r3, r0
 800301e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003020:	e008      	b.n	8003034 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003022:	f7ff fb75 	bl	8002710 <HAL_GetTick>
 8003026:	0002      	movs	r2, r0
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	2b64      	cmp	r3, #100	; 0x64
 800302e:	d901      	bls.n	8003034 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8003030:	2303      	movs	r3, #3
 8003032:	e17b      	b.n	800332c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003034:	4ba0      	ldr	r3, [pc, #640]	; (80032b8 <HAL_RCC_OscConfig+0x340>)
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	2380      	movs	r3, #128	; 0x80
 800303a:	029b      	lsls	r3, r3, #10
 800303c:	4013      	ands	r3, r2
 800303e:	d0f0      	beq.n	8003022 <HAL_RCC_OscConfig+0xaa>
 8003040:	e013      	b.n	800306a <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003042:	f7ff fb65 	bl	8002710 <HAL_GetTick>
 8003046:	0003      	movs	r3, r0
 8003048:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800304a:	e008      	b.n	800305e <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800304c:	f7ff fb60 	bl	8002710 <HAL_GetTick>
 8003050:	0002      	movs	r2, r0
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b64      	cmp	r3, #100	; 0x64
 8003058:	d901      	bls.n	800305e <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e166      	b.n	800332c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800305e:	4b96      	ldr	r3, [pc, #600]	; (80032b8 <HAL_RCC_OscConfig+0x340>)
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	2380      	movs	r3, #128	; 0x80
 8003064:	029b      	lsls	r3, r3, #10
 8003066:	4013      	ands	r3, r2
 8003068:	d1f0      	bne.n	800304c <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2202      	movs	r2, #2
 8003070:	4013      	ands	r3, r2
 8003072:	d100      	bne.n	8003076 <HAL_RCC_OscConfig+0xfe>
 8003074:	e086      	b.n	8003184 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003076:	4b90      	ldr	r3, [pc, #576]	; (80032b8 <HAL_RCC_OscConfig+0x340>)
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	2238      	movs	r2, #56	; 0x38
 800307c:	4013      	ands	r3, r2
 800307e:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d12f      	bne.n	80030e6 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d101      	bne.n	8003092 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e14c      	b.n	800332c <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003092:	4b89      	ldr	r3, [pc, #548]	; (80032b8 <HAL_RCC_OscConfig+0x340>)
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	4a8b      	ldr	r2, [pc, #556]	; (80032c4 <HAL_RCC_OscConfig+0x34c>)
 8003098:	4013      	ands	r3, r2
 800309a:	0019      	movs	r1, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	695b      	ldr	r3, [r3, #20]
 80030a0:	021a      	lsls	r2, r3, #8
 80030a2:	4b85      	ldr	r3, [pc, #532]	; (80032b8 <HAL_RCC_OscConfig+0x340>)
 80030a4:	430a      	orrs	r2, r1
 80030a6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d112      	bne.n	80030d4 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80030ae:	4b82      	ldr	r3, [pc, #520]	; (80032b8 <HAL_RCC_OscConfig+0x340>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a85      	ldr	r2, [pc, #532]	; (80032c8 <HAL_RCC_OscConfig+0x350>)
 80030b4:	4013      	ands	r3, r2
 80030b6:	0019      	movs	r1, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	691a      	ldr	r2, [r3, #16]
 80030bc:	4b7e      	ldr	r3, [pc, #504]	; (80032b8 <HAL_RCC_OscConfig+0x340>)
 80030be:	430a      	orrs	r2, r1
 80030c0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80030c2:	4b7d      	ldr	r3, [pc, #500]	; (80032b8 <HAL_RCC_OscConfig+0x340>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	0adb      	lsrs	r3, r3, #11
 80030c8:	2207      	movs	r2, #7
 80030ca:	4013      	ands	r3, r2
 80030cc:	4a7f      	ldr	r2, [pc, #508]	; (80032cc <HAL_RCC_OscConfig+0x354>)
 80030ce:	40da      	lsrs	r2, r3
 80030d0:	4b7f      	ldr	r3, [pc, #508]	; (80032d0 <HAL_RCC_OscConfig+0x358>)
 80030d2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80030d4:	4b7f      	ldr	r3, [pc, #508]	; (80032d4 <HAL_RCC_OscConfig+0x35c>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	0018      	movs	r0, r3
 80030da:	f7ff fabd 	bl	8002658 <HAL_InitTick>
 80030de:	1e03      	subs	r3, r0, #0
 80030e0:	d050      	beq.n	8003184 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e122      	b.n	800332c <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d030      	beq.n	8003150 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80030ee:	4b72      	ldr	r3, [pc, #456]	; (80032b8 <HAL_RCC_OscConfig+0x340>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a75      	ldr	r2, [pc, #468]	; (80032c8 <HAL_RCC_OscConfig+0x350>)
 80030f4:	4013      	ands	r3, r2
 80030f6:	0019      	movs	r1, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	691a      	ldr	r2, [r3, #16]
 80030fc:	4b6e      	ldr	r3, [pc, #440]	; (80032b8 <HAL_RCC_OscConfig+0x340>)
 80030fe:	430a      	orrs	r2, r1
 8003100:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8003102:	4b6d      	ldr	r3, [pc, #436]	; (80032b8 <HAL_RCC_OscConfig+0x340>)
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	4b6c      	ldr	r3, [pc, #432]	; (80032b8 <HAL_RCC_OscConfig+0x340>)
 8003108:	2180      	movs	r1, #128	; 0x80
 800310a:	0049      	lsls	r1, r1, #1
 800310c:	430a      	orrs	r2, r1
 800310e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003110:	f7ff fafe 	bl	8002710 <HAL_GetTick>
 8003114:	0003      	movs	r3, r0
 8003116:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003118:	e008      	b.n	800312c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800311a:	f7ff faf9 	bl	8002710 <HAL_GetTick>
 800311e:	0002      	movs	r2, r0
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	2b02      	cmp	r3, #2
 8003126:	d901      	bls.n	800312c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	e0ff      	b.n	800332c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800312c:	4b62      	ldr	r3, [pc, #392]	; (80032b8 <HAL_RCC_OscConfig+0x340>)
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	2380      	movs	r3, #128	; 0x80
 8003132:	00db      	lsls	r3, r3, #3
 8003134:	4013      	ands	r3, r2
 8003136:	d0f0      	beq.n	800311a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003138:	4b5f      	ldr	r3, [pc, #380]	; (80032b8 <HAL_RCC_OscConfig+0x340>)
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	4a61      	ldr	r2, [pc, #388]	; (80032c4 <HAL_RCC_OscConfig+0x34c>)
 800313e:	4013      	ands	r3, r2
 8003140:	0019      	movs	r1, r3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	695b      	ldr	r3, [r3, #20]
 8003146:	021a      	lsls	r2, r3, #8
 8003148:	4b5b      	ldr	r3, [pc, #364]	; (80032b8 <HAL_RCC_OscConfig+0x340>)
 800314a:	430a      	orrs	r2, r1
 800314c:	605a      	str	r2, [r3, #4]
 800314e:	e019      	b.n	8003184 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8003150:	4b59      	ldr	r3, [pc, #356]	; (80032b8 <HAL_RCC_OscConfig+0x340>)
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	4b58      	ldr	r3, [pc, #352]	; (80032b8 <HAL_RCC_OscConfig+0x340>)
 8003156:	4960      	ldr	r1, [pc, #384]	; (80032d8 <HAL_RCC_OscConfig+0x360>)
 8003158:	400a      	ands	r2, r1
 800315a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800315c:	f7ff fad8 	bl	8002710 <HAL_GetTick>
 8003160:	0003      	movs	r3, r0
 8003162:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003164:	e008      	b.n	8003178 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003166:	f7ff fad3 	bl	8002710 <HAL_GetTick>
 800316a:	0002      	movs	r2, r0
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	2b02      	cmp	r3, #2
 8003172:	d901      	bls.n	8003178 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	e0d9      	b.n	800332c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003178:	4b4f      	ldr	r3, [pc, #316]	; (80032b8 <HAL_RCC_OscConfig+0x340>)
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	2380      	movs	r3, #128	; 0x80
 800317e:	00db      	lsls	r3, r3, #3
 8003180:	4013      	ands	r3, r2
 8003182:	d1f0      	bne.n	8003166 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2208      	movs	r2, #8
 800318a:	4013      	ands	r3, r2
 800318c:	d042      	beq.n	8003214 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800318e:	4b4a      	ldr	r3, [pc, #296]	; (80032b8 <HAL_RCC_OscConfig+0x340>)
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	2238      	movs	r2, #56	; 0x38
 8003194:	4013      	ands	r3, r2
 8003196:	2b18      	cmp	r3, #24
 8003198:	d105      	bne.n	80031a6 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	699b      	ldr	r3, [r3, #24]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d138      	bne.n	8003214 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e0c2      	b.n	800332c <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	699b      	ldr	r3, [r3, #24]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d019      	beq.n	80031e2 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80031ae:	4b42      	ldr	r3, [pc, #264]	; (80032b8 <HAL_RCC_OscConfig+0x340>)
 80031b0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80031b2:	4b41      	ldr	r3, [pc, #260]	; (80032b8 <HAL_RCC_OscConfig+0x340>)
 80031b4:	2101      	movs	r1, #1
 80031b6:	430a      	orrs	r2, r1
 80031b8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ba:	f7ff faa9 	bl	8002710 <HAL_GetTick>
 80031be:	0003      	movs	r3, r0
 80031c0:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80031c2:	e008      	b.n	80031d6 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80031c4:	f7ff faa4 	bl	8002710 <HAL_GetTick>
 80031c8:	0002      	movs	r2, r0
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d901      	bls.n	80031d6 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	e0aa      	b.n	800332c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80031d6:	4b38      	ldr	r3, [pc, #224]	; (80032b8 <HAL_RCC_OscConfig+0x340>)
 80031d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031da:	2202      	movs	r2, #2
 80031dc:	4013      	ands	r3, r2
 80031de:	d0f1      	beq.n	80031c4 <HAL_RCC_OscConfig+0x24c>
 80031e0:	e018      	b.n	8003214 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80031e2:	4b35      	ldr	r3, [pc, #212]	; (80032b8 <HAL_RCC_OscConfig+0x340>)
 80031e4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80031e6:	4b34      	ldr	r3, [pc, #208]	; (80032b8 <HAL_RCC_OscConfig+0x340>)
 80031e8:	2101      	movs	r1, #1
 80031ea:	438a      	bics	r2, r1
 80031ec:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ee:	f7ff fa8f 	bl	8002710 <HAL_GetTick>
 80031f2:	0003      	movs	r3, r0
 80031f4:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 80031f6:	e008      	b.n	800320a <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80031f8:	f7ff fa8a 	bl	8002710 <HAL_GetTick>
 80031fc:	0002      	movs	r2, r0
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	2b02      	cmp	r3, #2
 8003204:	d901      	bls.n	800320a <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e090      	b.n	800332c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 800320a:	4b2b      	ldr	r3, [pc, #172]	; (80032b8 <HAL_RCC_OscConfig+0x340>)
 800320c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800320e:	2202      	movs	r2, #2
 8003210:	4013      	ands	r3, r2
 8003212:	d1f1      	bne.n	80031f8 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	2204      	movs	r2, #4
 800321a:	4013      	ands	r3, r2
 800321c:	d100      	bne.n	8003220 <HAL_RCC_OscConfig+0x2a8>
 800321e:	e084      	b.n	800332a <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003220:	230f      	movs	r3, #15
 8003222:	18fb      	adds	r3, r7, r3
 8003224:	2200      	movs	r2, #0
 8003226:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8003228:	4b23      	ldr	r3, [pc, #140]	; (80032b8 <HAL_RCC_OscConfig+0x340>)
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	2238      	movs	r2, #56	; 0x38
 800322e:	4013      	ands	r3, r2
 8003230:	2b20      	cmp	r3, #32
 8003232:	d106      	bne.n	8003242 <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d000      	beq.n	800323e <HAL_RCC_OscConfig+0x2c6>
 800323c:	e075      	b.n	800332a <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e074      	b.n	800332c <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	2b01      	cmp	r3, #1
 8003248:	d106      	bne.n	8003258 <HAL_RCC_OscConfig+0x2e0>
 800324a:	4b1b      	ldr	r3, [pc, #108]	; (80032b8 <HAL_RCC_OscConfig+0x340>)
 800324c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800324e:	4b1a      	ldr	r3, [pc, #104]	; (80032b8 <HAL_RCC_OscConfig+0x340>)
 8003250:	2101      	movs	r1, #1
 8003252:	430a      	orrs	r2, r1
 8003254:	65da      	str	r2, [r3, #92]	; 0x5c
 8003256:	e01c      	b.n	8003292 <HAL_RCC_OscConfig+0x31a>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	2b05      	cmp	r3, #5
 800325e:	d10c      	bne.n	800327a <HAL_RCC_OscConfig+0x302>
 8003260:	4b15      	ldr	r3, [pc, #84]	; (80032b8 <HAL_RCC_OscConfig+0x340>)
 8003262:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003264:	4b14      	ldr	r3, [pc, #80]	; (80032b8 <HAL_RCC_OscConfig+0x340>)
 8003266:	2104      	movs	r1, #4
 8003268:	430a      	orrs	r2, r1
 800326a:	65da      	str	r2, [r3, #92]	; 0x5c
 800326c:	4b12      	ldr	r3, [pc, #72]	; (80032b8 <HAL_RCC_OscConfig+0x340>)
 800326e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003270:	4b11      	ldr	r3, [pc, #68]	; (80032b8 <HAL_RCC_OscConfig+0x340>)
 8003272:	2101      	movs	r1, #1
 8003274:	430a      	orrs	r2, r1
 8003276:	65da      	str	r2, [r3, #92]	; 0x5c
 8003278:	e00b      	b.n	8003292 <HAL_RCC_OscConfig+0x31a>
 800327a:	4b0f      	ldr	r3, [pc, #60]	; (80032b8 <HAL_RCC_OscConfig+0x340>)
 800327c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800327e:	4b0e      	ldr	r3, [pc, #56]	; (80032b8 <HAL_RCC_OscConfig+0x340>)
 8003280:	2101      	movs	r1, #1
 8003282:	438a      	bics	r2, r1
 8003284:	65da      	str	r2, [r3, #92]	; 0x5c
 8003286:	4b0c      	ldr	r3, [pc, #48]	; (80032b8 <HAL_RCC_OscConfig+0x340>)
 8003288:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800328a:	4b0b      	ldr	r3, [pc, #44]	; (80032b8 <HAL_RCC_OscConfig+0x340>)
 800328c:	2104      	movs	r1, #4
 800328e:	438a      	bics	r2, r1
 8003290:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d028      	beq.n	80032ec <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800329a:	f7ff fa39 	bl	8002710 <HAL_GetTick>
 800329e:	0003      	movs	r3, r0
 80032a0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80032a2:	e01d      	b.n	80032e0 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032a4:	f7ff fa34 	bl	8002710 <HAL_GetTick>
 80032a8:	0002      	movs	r2, r0
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	4a0b      	ldr	r2, [pc, #44]	; (80032dc <HAL_RCC_OscConfig+0x364>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d915      	bls.n	80032e0 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 80032b4:	2303      	movs	r3, #3
 80032b6:	e039      	b.n	800332c <HAL_RCC_OscConfig+0x3b4>
 80032b8:	40021000 	.word	0x40021000
 80032bc:	fffeffff 	.word	0xfffeffff
 80032c0:	fffbffff 	.word	0xfffbffff
 80032c4:	ffff80ff 	.word	0xffff80ff
 80032c8:	ffffc7ff 	.word	0xffffc7ff
 80032cc:	02dc6c00 	.word	0x02dc6c00
 80032d0:	20000004 	.word	0x20000004
 80032d4:	20000008 	.word	0x20000008
 80032d8:	fffffeff 	.word	0xfffffeff
 80032dc:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80032e0:	4b14      	ldr	r3, [pc, #80]	; (8003334 <HAL_RCC_OscConfig+0x3bc>)
 80032e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032e4:	2202      	movs	r2, #2
 80032e6:	4013      	ands	r3, r2
 80032e8:	d0dc      	beq.n	80032a4 <HAL_RCC_OscConfig+0x32c>
 80032ea:	e013      	b.n	8003314 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ec:	f7ff fa10 	bl	8002710 <HAL_GetTick>
 80032f0:	0003      	movs	r3, r0
 80032f2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 80032f4:	e009      	b.n	800330a <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032f6:	f7ff fa0b 	bl	8002710 <HAL_GetTick>
 80032fa:	0002      	movs	r2, r0
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	4a0d      	ldr	r2, [pc, #52]	; (8003338 <HAL_RCC_OscConfig+0x3c0>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d901      	bls.n	800330a <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e010      	b.n	800332c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 800330a:	4b0a      	ldr	r3, [pc, #40]	; (8003334 <HAL_RCC_OscConfig+0x3bc>)
 800330c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800330e:	2202      	movs	r2, #2
 8003310:	4013      	ands	r3, r2
 8003312:	d1f0      	bne.n	80032f6 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003314:	230f      	movs	r3, #15
 8003316:	18fb      	adds	r3, r7, r3
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	2b01      	cmp	r3, #1
 800331c:	d105      	bne.n	800332a <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800331e:	4b05      	ldr	r3, [pc, #20]	; (8003334 <HAL_RCC_OscConfig+0x3bc>)
 8003320:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003322:	4b04      	ldr	r3, [pc, #16]	; (8003334 <HAL_RCC_OscConfig+0x3bc>)
 8003324:	4905      	ldr	r1, [pc, #20]	; (800333c <HAL_RCC_OscConfig+0x3c4>)
 8003326:	400a      	ands	r2, r1
 8003328:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
  return HAL_OK;
 800332a:	2300      	movs	r3, #0
}
 800332c:	0018      	movs	r0, r3
 800332e:	46bd      	mov	sp, r7
 8003330:	b006      	add	sp, #24
 8003332:	bd80      	pop	{r7, pc}
 8003334:	40021000 	.word	0x40021000
 8003338:	00001388 	.word	0x00001388
 800333c:	efffffff 	.word	0xefffffff

08003340 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d101      	bne.n	8003354 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e0e9      	b.n	8003528 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003354:	4b76      	ldr	r3, [pc, #472]	; (8003530 <HAL_RCC_ClockConfig+0x1f0>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2207      	movs	r2, #7
 800335a:	4013      	ands	r3, r2
 800335c:	683a      	ldr	r2, [r7, #0]
 800335e:	429a      	cmp	r2, r3
 8003360:	d91e      	bls.n	80033a0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003362:	4b73      	ldr	r3, [pc, #460]	; (8003530 <HAL_RCC_ClockConfig+0x1f0>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	2207      	movs	r2, #7
 8003368:	4393      	bics	r3, r2
 800336a:	0019      	movs	r1, r3
 800336c:	4b70      	ldr	r3, [pc, #448]	; (8003530 <HAL_RCC_ClockConfig+0x1f0>)
 800336e:	683a      	ldr	r2, [r7, #0]
 8003370:	430a      	orrs	r2, r1
 8003372:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003374:	f7ff f9cc 	bl	8002710 <HAL_GetTick>
 8003378:	0003      	movs	r3, r0
 800337a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800337c:	e009      	b.n	8003392 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800337e:	f7ff f9c7 	bl	8002710 <HAL_GetTick>
 8003382:	0002      	movs	r2, r0
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	4a6a      	ldr	r2, [pc, #424]	; (8003534 <HAL_RCC_ClockConfig+0x1f4>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d901      	bls.n	8003392 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e0ca      	b.n	8003528 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003392:	4b67      	ldr	r3, [pc, #412]	; (8003530 <HAL_RCC_ClockConfig+0x1f0>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	2207      	movs	r2, #7
 8003398:	4013      	ands	r3, r2
 800339a:	683a      	ldr	r2, [r7, #0]
 800339c:	429a      	cmp	r2, r3
 800339e:	d1ee      	bne.n	800337e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	2202      	movs	r2, #2
 80033a6:	4013      	ands	r3, r2
 80033a8:	d017      	beq.n	80033da <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2204      	movs	r2, #4
 80033b0:	4013      	ands	r3, r2
 80033b2:	d008      	beq.n	80033c6 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80033b4:	4b60      	ldr	r3, [pc, #384]	; (8003538 <HAL_RCC_ClockConfig+0x1f8>)
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	4a60      	ldr	r2, [pc, #384]	; (800353c <HAL_RCC_ClockConfig+0x1fc>)
 80033ba:	401a      	ands	r2, r3
 80033bc:	4b5e      	ldr	r3, [pc, #376]	; (8003538 <HAL_RCC_ClockConfig+0x1f8>)
 80033be:	21b0      	movs	r1, #176	; 0xb0
 80033c0:	0109      	lsls	r1, r1, #4
 80033c2:	430a      	orrs	r2, r1
 80033c4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033c6:	4b5c      	ldr	r3, [pc, #368]	; (8003538 <HAL_RCC_ClockConfig+0x1f8>)
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	4a5d      	ldr	r2, [pc, #372]	; (8003540 <HAL_RCC_ClockConfig+0x200>)
 80033cc:	4013      	ands	r3, r2
 80033ce:	0019      	movs	r1, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	68da      	ldr	r2, [r3, #12]
 80033d4:	4b58      	ldr	r3, [pc, #352]	; (8003538 <HAL_RCC_ClockConfig+0x1f8>)
 80033d6:	430a      	orrs	r2, r1
 80033d8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2201      	movs	r2, #1
 80033e0:	4013      	ands	r3, r2
 80033e2:	d055      	beq.n	8003490 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 80033e4:	4b54      	ldr	r3, [pc, #336]	; (8003538 <HAL_RCC_ClockConfig+0x1f8>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	221c      	movs	r2, #28
 80033ea:	4393      	bics	r3, r2
 80033ec:	0019      	movs	r1, r3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	689a      	ldr	r2, [r3, #8]
 80033f2:	4b51      	ldr	r3, [pc, #324]	; (8003538 <HAL_RCC_ClockConfig+0x1f8>)
 80033f4:	430a      	orrs	r2, r1
 80033f6:	601a      	str	r2, [r3, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d107      	bne.n	8003410 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003400:	4b4d      	ldr	r3, [pc, #308]	; (8003538 <HAL_RCC_ClockConfig+0x1f8>)
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	2380      	movs	r3, #128	; 0x80
 8003406:	029b      	lsls	r3, r3, #10
 8003408:	4013      	ands	r3, r2
 800340a:	d11f      	bne.n	800344c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e08b      	b.n	8003528 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d107      	bne.n	8003428 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003418:	4b47      	ldr	r3, [pc, #284]	; (8003538 <HAL_RCC_ClockConfig+0x1f8>)
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	2380      	movs	r3, #128	; 0x80
 800341e:	00db      	lsls	r3, r3, #3
 8003420:	4013      	ands	r3, r2
 8003422:	d113      	bne.n	800344c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e07f      	b.n	8003528 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	2b03      	cmp	r3, #3
 800342e:	d106      	bne.n	800343e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8003430:	4b41      	ldr	r3, [pc, #260]	; (8003538 <HAL_RCC_ClockConfig+0x1f8>)
 8003432:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003434:	2202      	movs	r2, #2
 8003436:	4013      	ands	r3, r2
 8003438:	d108      	bne.n	800344c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e074      	b.n	8003528 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800343e:	4b3e      	ldr	r3, [pc, #248]	; (8003538 <HAL_RCC_ClockConfig+0x1f8>)
 8003440:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003442:	2202      	movs	r2, #2
 8003444:	4013      	ands	r3, r2
 8003446:	d101      	bne.n	800344c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e06d      	b.n	8003528 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800344c:	4b3a      	ldr	r3, [pc, #232]	; (8003538 <HAL_RCC_ClockConfig+0x1f8>)
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	2207      	movs	r2, #7
 8003452:	4393      	bics	r3, r2
 8003454:	0019      	movs	r1, r3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685a      	ldr	r2, [r3, #4]
 800345a:	4b37      	ldr	r3, [pc, #220]	; (8003538 <HAL_RCC_ClockConfig+0x1f8>)
 800345c:	430a      	orrs	r2, r1
 800345e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003460:	f7ff f956 	bl	8002710 <HAL_GetTick>
 8003464:	0003      	movs	r3, r0
 8003466:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003468:	e009      	b.n	800347e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800346a:	f7ff f951 	bl	8002710 <HAL_GetTick>
 800346e:	0002      	movs	r2, r0
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	4a2f      	ldr	r2, [pc, #188]	; (8003534 <HAL_RCC_ClockConfig+0x1f4>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d901      	bls.n	800347e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e054      	b.n	8003528 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800347e:	4b2e      	ldr	r3, [pc, #184]	; (8003538 <HAL_RCC_ClockConfig+0x1f8>)
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	2238      	movs	r2, #56	; 0x38
 8003484:	401a      	ands	r2, r3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	00db      	lsls	r3, r3, #3
 800348c:	429a      	cmp	r2, r3
 800348e:	d1ec      	bne.n	800346a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003490:	4b27      	ldr	r3, [pc, #156]	; (8003530 <HAL_RCC_ClockConfig+0x1f0>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2207      	movs	r2, #7
 8003496:	4013      	ands	r3, r2
 8003498:	683a      	ldr	r2, [r7, #0]
 800349a:	429a      	cmp	r2, r3
 800349c:	d21e      	bcs.n	80034dc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800349e:	4b24      	ldr	r3, [pc, #144]	; (8003530 <HAL_RCC_ClockConfig+0x1f0>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	2207      	movs	r2, #7
 80034a4:	4393      	bics	r3, r2
 80034a6:	0019      	movs	r1, r3
 80034a8:	4b21      	ldr	r3, [pc, #132]	; (8003530 <HAL_RCC_ClockConfig+0x1f0>)
 80034aa:	683a      	ldr	r2, [r7, #0]
 80034ac:	430a      	orrs	r2, r1
 80034ae:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80034b0:	f7ff f92e 	bl	8002710 <HAL_GetTick>
 80034b4:	0003      	movs	r3, r0
 80034b6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80034b8:	e009      	b.n	80034ce <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80034ba:	f7ff f929 	bl	8002710 <HAL_GetTick>
 80034be:	0002      	movs	r2, r0
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	4a1b      	ldr	r2, [pc, #108]	; (8003534 <HAL_RCC_ClockConfig+0x1f4>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d901      	bls.n	80034ce <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e02c      	b.n	8003528 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80034ce:	4b18      	ldr	r3, [pc, #96]	; (8003530 <HAL_RCC_ClockConfig+0x1f0>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2207      	movs	r2, #7
 80034d4:	4013      	ands	r3, r2
 80034d6:	683a      	ldr	r2, [r7, #0]
 80034d8:	429a      	cmp	r2, r3
 80034da:	d1ee      	bne.n	80034ba <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2204      	movs	r2, #4
 80034e2:	4013      	ands	r3, r2
 80034e4:	d009      	beq.n	80034fa <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80034e6:	4b14      	ldr	r3, [pc, #80]	; (8003538 <HAL_RCC_ClockConfig+0x1f8>)
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	4a16      	ldr	r2, [pc, #88]	; (8003544 <HAL_RCC_ClockConfig+0x204>)
 80034ec:	4013      	ands	r3, r2
 80034ee:	0019      	movs	r1, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	691a      	ldr	r2, [r3, #16]
 80034f4:	4b10      	ldr	r3, [pc, #64]	; (8003538 <HAL_RCC_ClockConfig+0x1f8>)
 80034f6:	430a      	orrs	r2, r1
 80034f8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80034fa:	f000 f82b 	bl	8003554 <HAL_RCC_GetSysClockFreq>
 80034fe:	0001      	movs	r1, r0
 8003500:	4b0d      	ldr	r3, [pc, #52]	; (8003538 <HAL_RCC_ClockConfig+0x1f8>)
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	0a1b      	lsrs	r3, r3, #8
 8003506:	220f      	movs	r2, #15
 8003508:	401a      	ands	r2, r3
 800350a:	4b0f      	ldr	r3, [pc, #60]	; (8003548 <HAL_RCC_ClockConfig+0x208>)
 800350c:	0092      	lsls	r2, r2, #2
 800350e:	58d3      	ldr	r3, [r2, r3]
 8003510:	221f      	movs	r2, #31
 8003512:	4013      	ands	r3, r2
 8003514:	000a      	movs	r2, r1
 8003516:	40da      	lsrs	r2, r3
 8003518:	4b0c      	ldr	r3, [pc, #48]	; (800354c <HAL_RCC_ClockConfig+0x20c>)
 800351a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800351c:	4b0c      	ldr	r3, [pc, #48]	; (8003550 <HAL_RCC_ClockConfig+0x210>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	0018      	movs	r0, r3
 8003522:	f7ff f899 	bl	8002658 <HAL_InitTick>
 8003526:	0003      	movs	r3, r0
}
 8003528:	0018      	movs	r0, r3
 800352a:	46bd      	mov	sp, r7
 800352c:	b004      	add	sp, #16
 800352e:	bd80      	pop	{r7, pc}
 8003530:	40022000 	.word	0x40022000
 8003534:	00001388 	.word	0x00001388
 8003538:	40021000 	.word	0x40021000
 800353c:	ffff84ff 	.word	0xffff84ff
 8003540:	fffff0ff 	.word	0xfffff0ff
 8003544:	ffff8fff 	.word	0xffff8fff
 8003548:	0800595c 	.word	0x0800595c
 800354c:	20000004 	.word	0x20000004
 8003550:	20000008 	.word	0x20000008

08003554 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b082      	sub	sp, #8
 8003558:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800355a:	4b1c      	ldr	r3, [pc, #112]	; (80035cc <HAL_RCC_GetSysClockFreq+0x78>)
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	2238      	movs	r2, #56	; 0x38
 8003560:	4013      	ands	r3, r2
 8003562:	d10f      	bne.n	8003584 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003564:	4b19      	ldr	r3, [pc, #100]	; (80035cc <HAL_RCC_GetSysClockFreq+0x78>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	0adb      	lsrs	r3, r3, #11
 800356a:	2207      	movs	r2, #7
 800356c:	4013      	ands	r3, r2
 800356e:	2201      	movs	r2, #1
 8003570:	409a      	lsls	r2, r3
 8003572:	0013      	movs	r3, r2
 8003574:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003576:	6839      	ldr	r1, [r7, #0]
 8003578:	4815      	ldr	r0, [pc, #84]	; (80035d0 <HAL_RCC_GetSysClockFreq+0x7c>)
 800357a:	f7fc fdcf 	bl	800011c <__udivsi3>
 800357e:	0003      	movs	r3, r0
 8003580:	607b      	str	r3, [r7, #4]
 8003582:	e01e      	b.n	80035c2 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003584:	4b11      	ldr	r3, [pc, #68]	; (80035cc <HAL_RCC_GetSysClockFreq+0x78>)
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	2238      	movs	r2, #56	; 0x38
 800358a:	4013      	ands	r3, r2
 800358c:	2b08      	cmp	r3, #8
 800358e:	d102      	bne.n	8003596 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003590:	4b0f      	ldr	r3, [pc, #60]	; (80035d0 <HAL_RCC_GetSysClockFreq+0x7c>)
 8003592:	607b      	str	r3, [r7, #4]
 8003594:	e015      	b.n	80035c2 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8003596:	4b0d      	ldr	r3, [pc, #52]	; (80035cc <HAL_RCC_GetSysClockFreq+0x78>)
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	2238      	movs	r2, #56	; 0x38
 800359c:	4013      	ands	r3, r2
 800359e:	2b20      	cmp	r3, #32
 80035a0:	d103      	bne.n	80035aa <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80035a2:	2380      	movs	r3, #128	; 0x80
 80035a4:	021b      	lsls	r3, r3, #8
 80035a6:	607b      	str	r3, [r7, #4]
 80035a8:	e00b      	b.n	80035c2 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80035aa:	4b08      	ldr	r3, [pc, #32]	; (80035cc <HAL_RCC_GetSysClockFreq+0x78>)
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	2238      	movs	r2, #56	; 0x38
 80035b0:	4013      	ands	r3, r2
 80035b2:	2b18      	cmp	r3, #24
 80035b4:	d103      	bne.n	80035be <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80035b6:	23fa      	movs	r3, #250	; 0xfa
 80035b8:	01db      	lsls	r3, r3, #7
 80035ba:	607b      	str	r3, [r7, #4]
 80035bc:	e001      	b.n	80035c2 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else
  {
    sysclockfreq = 0U;
 80035be:	2300      	movs	r3, #0
 80035c0:	607b      	str	r3, [r7, #4]
  }

  return sysclockfreq;
 80035c2:	687b      	ldr	r3, [r7, #4]
}
 80035c4:	0018      	movs	r0, r3
 80035c6:	46bd      	mov	sp, r7
 80035c8:	b002      	add	sp, #8
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	40021000 	.word	0x40021000
 80035d0:	02dc6c00 	.word	0x02dc6c00

080035d4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035d8:	4b02      	ldr	r3, [pc, #8]	; (80035e4 <HAL_RCC_GetHCLKFreq+0x10>)
 80035da:	681b      	ldr	r3, [r3, #0]
}
 80035dc:	0018      	movs	r0, r3
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	46c0      	nop			; (mov r8, r8)
 80035e4:	20000004 	.word	0x20000004

080035e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 80035ec:	f7ff fff2 	bl	80035d4 <HAL_RCC_GetHCLKFreq>
 80035f0:	0001      	movs	r1, r0
 80035f2:	4b07      	ldr	r3, [pc, #28]	; (8003610 <HAL_RCC_GetPCLK1Freq+0x28>)
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	0b1b      	lsrs	r3, r3, #12
 80035f8:	2207      	movs	r2, #7
 80035fa:	401a      	ands	r2, r3
 80035fc:	4b05      	ldr	r3, [pc, #20]	; (8003614 <HAL_RCC_GetPCLK1Freq+0x2c>)
 80035fe:	0092      	lsls	r2, r2, #2
 8003600:	58d3      	ldr	r3, [r2, r3]
 8003602:	221f      	movs	r2, #31
 8003604:	4013      	ands	r3, r2
 8003606:	40d9      	lsrs	r1, r3
 8003608:	000b      	movs	r3, r1
}
 800360a:	0018      	movs	r0, r3
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}
 8003610:	40021000 	.word	0x40021000
 8003614:	0800599c 	.word	0x0800599c

08003618 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to RTC domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b086      	sub	sp, #24
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003620:	2313      	movs	r3, #19
 8003622:	18fb      	adds	r3, r7, r3
 8003624:	2200      	movs	r2, #0
 8003626:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003628:	2312      	movs	r3, #18
 800362a:	18fb      	adds	r3, r7, r3
 800362c:	2200      	movs	r2, #0
 800362e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	2380      	movs	r3, #128	; 0x80
 8003636:	029b      	lsls	r3, r3, #10
 8003638:	4013      	ands	r3, r2
 800363a:	d100      	bne.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800363c:	e079      	b.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800363e:	2011      	movs	r0, #17
 8003640:	183b      	adds	r3, r7, r0
 8003642:	2200      	movs	r2, #0
 8003644:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003646:	4b64      	ldr	r3, [pc, #400]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003648:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800364a:	2380      	movs	r3, #128	; 0x80
 800364c:	055b      	lsls	r3, r3, #21
 800364e:	4013      	ands	r3, r2
 8003650:	d110      	bne.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003652:	4b61      	ldr	r3, [pc, #388]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003654:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003656:	4b60      	ldr	r3, [pc, #384]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003658:	2180      	movs	r1, #128	; 0x80
 800365a:	0549      	lsls	r1, r1, #21
 800365c:	430a      	orrs	r2, r1
 800365e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003660:	4b5d      	ldr	r3, [pc, #372]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003662:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003664:	2380      	movs	r3, #128	; 0x80
 8003666:	055b      	lsls	r3, r3, #21
 8003668:	4013      	ands	r3, r2
 800366a:	60bb      	str	r3, [r7, #8]
 800366c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800366e:	183b      	adds	r3, r7, r0
 8003670:	2201      	movs	r2, #1
 8003672:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8003674:	4b58      	ldr	r3, [pc, #352]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003676:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003678:	23c0      	movs	r3, #192	; 0xc0
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	4013      	ands	r3, r2
 800367e:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d019      	beq.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	699b      	ldr	r3, [r3, #24]
 800368a:	697a      	ldr	r2, [r7, #20]
 800368c:	429a      	cmp	r2, r3
 800368e:	d014      	beq.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8003690:	4b51      	ldr	r3, [pc, #324]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003692:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003694:	4a51      	ldr	r2, [pc, #324]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003696:	4013      	ands	r3, r2
 8003698:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800369a:	4b4f      	ldr	r3, [pc, #316]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800369c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800369e:	4b4e      	ldr	r3, [pc, #312]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80036a0:	2180      	movs	r1, #128	; 0x80
 80036a2:	0249      	lsls	r1, r1, #9
 80036a4:	430a      	orrs	r2, r1
 80036a6:	65da      	str	r2, [r3, #92]	; 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 80036a8:	4b4b      	ldr	r3, [pc, #300]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80036aa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80036ac:	4b4a      	ldr	r3, [pc, #296]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80036ae:	494c      	ldr	r1, [pc, #304]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80036b0:	400a      	ands	r2, r1
 80036b2:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 80036b4:	4b48      	ldr	r3, [pc, #288]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80036b6:	697a      	ldr	r2, [r7, #20]
 80036b8:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	2201      	movs	r2, #1
 80036be:	4013      	ands	r3, r2
 80036c0:	d016      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036c2:	f7ff f825 	bl	8002710 <HAL_GetTick>
 80036c6:	0003      	movs	r3, r0
 80036c8:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80036ca:	e00c      	b.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0xce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036cc:	f7ff f820 	bl	8002710 <HAL_GetTick>
 80036d0:	0002      	movs	r2, r0
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	4a43      	ldr	r2, [pc, #268]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d904      	bls.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0xce>
        {
          ret = HAL_TIMEOUT;
 80036dc:	2313      	movs	r3, #19
 80036de:	18fb      	adds	r3, r7, r3
 80036e0:	2203      	movs	r2, #3
 80036e2:	701a      	strb	r2, [r3, #0]
          break;
 80036e4:	e004      	b.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80036e6:	4b3c      	ldr	r3, [pc, #240]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80036e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ea:	2202      	movs	r2, #2
 80036ec:	4013      	ands	r3, r2
 80036ee:	d0ed      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0xb4>
        }
      }
    }

    if (ret == HAL_OK)
 80036f0:	2313      	movs	r3, #19
 80036f2:	18fb      	adds	r3, r7, r3
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d10a      	bne.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036fa:	4b37      	ldr	r3, [pc, #220]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80036fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036fe:	4a37      	ldr	r2, [pc, #220]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003700:	4013      	ands	r3, r2
 8003702:	0019      	movs	r1, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	699a      	ldr	r2, [r3, #24]
 8003708:	4b33      	ldr	r3, [pc, #204]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800370a:	430a      	orrs	r2, r1
 800370c:	65da      	str	r2, [r3, #92]	; 0x5c
 800370e:	e005      	b.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x104>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003710:	2312      	movs	r3, #18
 8003712:	18fb      	adds	r3, r7, r3
 8003714:	2213      	movs	r2, #19
 8003716:	18ba      	adds	r2, r7, r2
 8003718:	7812      	ldrb	r2, [r2, #0]
 800371a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800371c:	2311      	movs	r3, #17
 800371e:	18fb      	adds	r3, r7, r3
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	2b01      	cmp	r3, #1
 8003724:	d105      	bne.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003726:	4b2c      	ldr	r3, [pc, #176]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003728:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800372a:	4b2b      	ldr	r3, [pc, #172]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800372c:	492e      	ldr	r1, [pc, #184]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800372e:	400a      	ands	r2, r1
 8003730:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2201      	movs	r2, #1
 8003738:	4013      	ands	r3, r2
 800373a:	d009      	beq.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800373c:	4b26      	ldr	r3, [pc, #152]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800373e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003740:	2203      	movs	r2, #3
 8003742:	4393      	bics	r3, r2
 8003744:	0019      	movs	r1, r3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	689a      	ldr	r2, [r3, #8]
 800374a:	4b23      	ldr	r3, [pc, #140]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800374c:	430a      	orrs	r2, r1
 800374e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	2240      	movs	r2, #64	; 0x40
 8003756:	4013      	ands	r3, r2
 8003758:	d009      	beq.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800375a:	4b1f      	ldr	r3, [pc, #124]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800375c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800375e:	4a23      	ldr	r2, [pc, #140]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003760:	4013      	ands	r3, r2
 8003762:	0019      	movs	r1, r3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	68da      	ldr	r2, [r3, #12]
 8003768:	4b1b      	ldr	r3, [pc, #108]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800376a:	430a      	orrs	r2, r1
 800376c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	2380      	movs	r3, #128	; 0x80
 8003774:	01db      	lsls	r3, r3, #7
 8003776:	4013      	ands	r3, r2
 8003778:	d008      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800377a:	4b17      	ldr	r3, [pc, #92]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800377c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	0899      	lsrs	r1, r3, #2
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	695a      	ldr	r2, [r3, #20]
 8003786:	4b14      	ldr	r3, [pc, #80]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003788:	430a      	orrs	r2, r1
 800378a:	655a      	str	r2, [r3, #84]	; 0x54

  }

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	2380      	movs	r3, #128	; 0x80
 8003792:	011b      	lsls	r3, r3, #4
 8003794:	4013      	ands	r3, r2
 8003796:	d009      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003798:	4b0f      	ldr	r3, [pc, #60]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800379a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800379c:	4a14      	ldr	r2, [pc, #80]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800379e:	4013      	ands	r3, r2
 80037a0:	0019      	movs	r1, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	691a      	ldr	r2, [r3, #16]
 80037a6:	4b0c      	ldr	r3, [pc, #48]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80037a8:	430a      	orrs	r2, r1
 80037aa:	655a      	str	r2, [r3, #84]	; 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	da09      	bge.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 80037b4:	4b08      	ldr	r3, [pc, #32]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	22e0      	movs	r2, #224	; 0xe0
 80037ba:	4393      	bics	r3, r2
 80037bc:	0019      	movs	r1, r3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685a      	ldr	r2, [r3, #4]
 80037c2:	4b05      	ldr	r3, [pc, #20]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80037c4:	430a      	orrs	r2, r1
 80037c6:	601a      	str	r2, [r3, #0]
  }
  return status;
 80037c8:	2312      	movs	r3, #18
 80037ca:	18fb      	adds	r3, r7, r3
 80037cc:	781b      	ldrb	r3, [r3, #0]
}
 80037ce:	0018      	movs	r0, r3
 80037d0:	46bd      	mov	sp, r7
 80037d2:	b006      	add	sp, #24
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	46c0      	nop			; (mov r8, r8)
 80037d8:	40021000 	.word	0x40021000
 80037dc:	fffffcff 	.word	0xfffffcff
 80037e0:	fffeffff 	.word	0xfffeffff
 80037e4:	00001388 	.word	0x00001388
 80037e8:	efffffff 	.word	0xefffffff
 80037ec:	ffffcfff 	.word	0xffffcfff
 80037f0:	ffff3fff 	.word	0xffff3fff

080037f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d101      	bne.n	8003806 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e04a      	b.n	800389c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	223d      	movs	r2, #61	; 0x3d
 800380a:	5c9b      	ldrb	r3, [r3, r2]
 800380c:	b2db      	uxtb	r3, r3
 800380e:	2b00      	cmp	r3, #0
 8003810:	d107      	bne.n	8003822 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	223c      	movs	r2, #60	; 0x3c
 8003816:	2100      	movs	r1, #0
 8003818:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	0018      	movs	r0, r3
 800381e:	f7fe fda9 	bl	8002374 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	223d      	movs	r2, #61	; 0x3d
 8003826:	2102      	movs	r1, #2
 8003828:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	3304      	adds	r3, #4
 8003832:	0019      	movs	r1, r3
 8003834:	0010      	movs	r0, r2
 8003836:	f000 f951 	bl	8003adc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2248      	movs	r2, #72	; 0x48
 800383e:	2101      	movs	r1, #1
 8003840:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	223e      	movs	r2, #62	; 0x3e
 8003846:	2101      	movs	r1, #1
 8003848:	5499      	strb	r1, [r3, r2]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	223f      	movs	r2, #63	; 0x3f
 800384e:	2101      	movs	r1, #1
 8003850:	5499      	strb	r1, [r3, r2]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2240      	movs	r2, #64	; 0x40
 8003856:	2101      	movs	r1, #1
 8003858:	5499      	strb	r1, [r3, r2]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2241      	movs	r2, #65	; 0x41
 800385e:	2101      	movs	r1, #1
 8003860:	5499      	strb	r1, [r3, r2]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2242      	movs	r2, #66	; 0x42
 8003866:	2101      	movs	r1, #1
 8003868:	5499      	strb	r1, [r3, r2]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2243      	movs	r2, #67	; 0x43
 800386e:	2101      	movs	r1, #1
 8003870:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2244      	movs	r2, #68	; 0x44
 8003876:	2101      	movs	r1, #1
 8003878:	5499      	strb	r1, [r3, r2]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2245      	movs	r2, #69	; 0x45
 800387e:	2101      	movs	r1, #1
 8003880:	5499      	strb	r1, [r3, r2]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2246      	movs	r2, #70	; 0x46
 8003886:	2101      	movs	r1, #1
 8003888:	5499      	strb	r1, [r3, r2]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2247      	movs	r2, #71	; 0x47
 800388e:	2101      	movs	r1, #1
 8003890:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	223d      	movs	r2, #61	; 0x3d
 8003896:	2101      	movs	r1, #1
 8003898:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800389a:	2300      	movs	r3, #0
}
 800389c:	0018      	movs	r0, r3
 800389e:	46bd      	mov	sp, r7
 80038a0:	b002      	add	sp, #8
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	223d      	movs	r2, #61	; 0x3d
 80038b0:	5c9b      	ldrb	r3, [r3, r2]
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d001      	beq.n	80038bc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e02f      	b.n	800391c <HAL_TIM_Base_Start+0x78>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	223d      	movs	r2, #61	; 0x3d
 80038c0:	2102      	movs	r1, #2
 80038c2:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a16      	ldr	r2, [pc, #88]	; (8003924 <HAL_TIM_Base_Start+0x80>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d004      	beq.n	80038d8 <HAL_TIM_Base_Start+0x34>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a15      	ldr	r2, [pc, #84]	; (8003928 <HAL_TIM_Base_Start+0x84>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d116      	bne.n	8003906 <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	4a13      	ldr	r2, [pc, #76]	; (800392c <HAL_TIM_Base_Start+0x88>)
 80038e0:	4013      	ands	r3, r2
 80038e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2b06      	cmp	r3, #6
 80038e8:	d016      	beq.n	8003918 <HAL_TIM_Base_Start+0x74>
 80038ea:	68fa      	ldr	r2, [r7, #12]
 80038ec:	2380      	movs	r3, #128	; 0x80
 80038ee:	025b      	lsls	r3, r3, #9
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d011      	beq.n	8003918 <HAL_TIM_Base_Start+0x74>
    {
      __HAL_TIM_ENABLE(htim);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	2101      	movs	r1, #1
 8003900:	430a      	orrs	r2, r1
 8003902:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003904:	e008      	b.n	8003918 <HAL_TIM_Base_Start+0x74>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	2101      	movs	r1, #1
 8003912:	430a      	orrs	r2, r1
 8003914:	601a      	str	r2, [r3, #0]
 8003916:	e000      	b.n	800391a <HAL_TIM_Base_Start+0x76>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003918:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800391a:	2300      	movs	r3, #0
}
 800391c:	0018      	movs	r0, r3
 800391e:	46bd      	mov	sp, r7
 8003920:	b004      	add	sp, #16
 8003922:	bd80      	pop	{r7, pc}
 8003924:	40012c00 	.word	0x40012c00
 8003928:	40000400 	.word	0x40000400
 800392c:	00010007 	.word	0x00010007

08003930 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800393a:	230f      	movs	r3, #15
 800393c:	18fb      	adds	r3, r7, r3
 800393e:	2200      	movs	r2, #0
 8003940:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	223c      	movs	r2, #60	; 0x3c
 8003946:	5c9b      	ldrb	r3, [r3, r2]
 8003948:	2b01      	cmp	r3, #1
 800394a:	d101      	bne.n	8003950 <HAL_TIM_ConfigClockSource+0x20>
 800394c:	2302      	movs	r3, #2
 800394e:	e0bc      	b.n	8003aca <HAL_TIM_ConfigClockSource+0x19a>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	223c      	movs	r2, #60	; 0x3c
 8003954:	2101      	movs	r1, #1
 8003956:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	223d      	movs	r2, #61	; 0x3d
 800395c:	2102      	movs	r1, #2
 800395e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	4a5a      	ldr	r2, [pc, #360]	; (8003ad4 <HAL_TIM_ConfigClockSource+0x1a4>)
 800396c:	4013      	ands	r3, r2
 800396e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	4a59      	ldr	r2, [pc, #356]	; (8003ad8 <HAL_TIM_ConfigClockSource+0x1a8>)
 8003974:	4013      	ands	r3, r2
 8003976:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	68ba      	ldr	r2, [r7, #8]
 800397e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2280      	movs	r2, #128	; 0x80
 8003986:	0192      	lsls	r2, r2, #6
 8003988:	4293      	cmp	r3, r2
 800398a:	d040      	beq.n	8003a0e <HAL_TIM_ConfigClockSource+0xde>
 800398c:	2280      	movs	r2, #128	; 0x80
 800398e:	0192      	lsls	r2, r2, #6
 8003990:	4293      	cmp	r3, r2
 8003992:	d900      	bls.n	8003996 <HAL_TIM_ConfigClockSource+0x66>
 8003994:	e088      	b.n	8003aa8 <HAL_TIM_ConfigClockSource+0x178>
 8003996:	2280      	movs	r2, #128	; 0x80
 8003998:	0152      	lsls	r2, r2, #5
 800399a:	4293      	cmp	r3, r2
 800399c:	d100      	bne.n	80039a0 <HAL_TIM_ConfigClockSource+0x70>
 800399e:	e088      	b.n	8003ab2 <HAL_TIM_ConfigClockSource+0x182>
 80039a0:	2280      	movs	r2, #128	; 0x80
 80039a2:	0152      	lsls	r2, r2, #5
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d900      	bls.n	80039aa <HAL_TIM_ConfigClockSource+0x7a>
 80039a8:	e07e      	b.n	8003aa8 <HAL_TIM_ConfigClockSource+0x178>
 80039aa:	2b70      	cmp	r3, #112	; 0x70
 80039ac:	d018      	beq.n	80039e0 <HAL_TIM_ConfigClockSource+0xb0>
 80039ae:	d900      	bls.n	80039b2 <HAL_TIM_ConfigClockSource+0x82>
 80039b0:	e07a      	b.n	8003aa8 <HAL_TIM_ConfigClockSource+0x178>
 80039b2:	2b60      	cmp	r3, #96	; 0x60
 80039b4:	d04f      	beq.n	8003a56 <HAL_TIM_ConfigClockSource+0x126>
 80039b6:	d900      	bls.n	80039ba <HAL_TIM_ConfigClockSource+0x8a>
 80039b8:	e076      	b.n	8003aa8 <HAL_TIM_ConfigClockSource+0x178>
 80039ba:	2b50      	cmp	r3, #80	; 0x50
 80039bc:	d03b      	beq.n	8003a36 <HAL_TIM_ConfigClockSource+0x106>
 80039be:	d900      	bls.n	80039c2 <HAL_TIM_ConfigClockSource+0x92>
 80039c0:	e072      	b.n	8003aa8 <HAL_TIM_ConfigClockSource+0x178>
 80039c2:	2b40      	cmp	r3, #64	; 0x40
 80039c4:	d057      	beq.n	8003a76 <HAL_TIM_ConfigClockSource+0x146>
 80039c6:	d900      	bls.n	80039ca <HAL_TIM_ConfigClockSource+0x9a>
 80039c8:	e06e      	b.n	8003aa8 <HAL_TIM_ConfigClockSource+0x178>
 80039ca:	2b30      	cmp	r3, #48	; 0x30
 80039cc:	d063      	beq.n	8003a96 <HAL_TIM_ConfigClockSource+0x166>
 80039ce:	d86b      	bhi.n	8003aa8 <HAL_TIM_ConfigClockSource+0x178>
 80039d0:	2b20      	cmp	r3, #32
 80039d2:	d060      	beq.n	8003a96 <HAL_TIM_ConfigClockSource+0x166>
 80039d4:	d868      	bhi.n	8003aa8 <HAL_TIM_ConfigClockSource+0x178>
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d05d      	beq.n	8003a96 <HAL_TIM_ConfigClockSource+0x166>
 80039da:	2b10      	cmp	r3, #16
 80039dc:	d05b      	beq.n	8003a96 <HAL_TIM_ConfigClockSource+0x166>
 80039de:	e063      	b.n	8003aa8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80039f0:	f000 f95c 	bl	8003cac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	2277      	movs	r2, #119	; 0x77
 8003a00:	4313      	orrs	r3, r2
 8003a02:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	68ba      	ldr	r2, [r7, #8]
 8003a0a:	609a      	str	r2, [r3, #8]
      break;
 8003a0c:	e052      	b.n	8003ab4 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a1e:	f000 f945 	bl	8003cac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	689a      	ldr	r2, [r3, #8]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2180      	movs	r1, #128	; 0x80
 8003a2e:	01c9      	lsls	r1, r1, #7
 8003a30:	430a      	orrs	r2, r1
 8003a32:	609a      	str	r2, [r3, #8]
      break;
 8003a34:	e03e      	b.n	8003ab4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a42:	001a      	movs	r2, r3
 8003a44:	f000 f8b6 	bl	8003bb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2150      	movs	r1, #80	; 0x50
 8003a4e:	0018      	movs	r0, r3
 8003a50:	f000 f910 	bl	8003c74 <TIM_ITRx_SetConfig>
      break;
 8003a54:	e02e      	b.n	8003ab4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a62:	001a      	movs	r2, r3
 8003a64:	f000 f8d4 	bl	8003c10 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2160      	movs	r1, #96	; 0x60
 8003a6e:	0018      	movs	r0, r3
 8003a70:	f000 f900 	bl	8003c74 <TIM_ITRx_SetConfig>
      break;
 8003a74:	e01e      	b.n	8003ab4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a82:	001a      	movs	r2, r3
 8003a84:	f000 f896 	bl	8003bb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	2140      	movs	r1, #64	; 0x40
 8003a8e:	0018      	movs	r0, r3
 8003a90:	f000 f8f0 	bl	8003c74 <TIM_ITRx_SetConfig>
      break;
 8003a94:	e00e      	b.n	8003ab4 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	0019      	movs	r1, r3
 8003aa0:	0010      	movs	r0, r2
 8003aa2:	f000 f8e7 	bl	8003c74 <TIM_ITRx_SetConfig>
      break;
 8003aa6:	e005      	b.n	8003ab4 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003aa8:	230f      	movs	r3, #15
 8003aaa:	18fb      	adds	r3, r7, r3
 8003aac:	2201      	movs	r2, #1
 8003aae:	701a      	strb	r2, [r3, #0]
      break;
 8003ab0:	e000      	b.n	8003ab4 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003ab2:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	223d      	movs	r2, #61	; 0x3d
 8003ab8:	2101      	movs	r1, #1
 8003aba:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	223c      	movs	r2, #60	; 0x3c
 8003ac0:	2100      	movs	r1, #0
 8003ac2:	5499      	strb	r1, [r3, r2]

  return status;
 8003ac4:	230f      	movs	r3, #15
 8003ac6:	18fb      	adds	r3, r7, r3
 8003ac8:	781b      	ldrb	r3, [r3, #0]
}
 8003aca:	0018      	movs	r0, r3
 8003acc:	46bd      	mov	sp, r7
 8003ace:	b004      	add	sp, #16
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	46c0      	nop			; (mov r8, r8)
 8003ad4:	ffceff88 	.word	0xffceff88
 8003ad8:	ffff00ff 	.word	0xffff00ff

08003adc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	4a2b      	ldr	r2, [pc, #172]	; (8003b9c <TIM_Base_SetConfig+0xc0>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d003      	beq.n	8003afc <TIM_Base_SetConfig+0x20>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	4a2a      	ldr	r2, [pc, #168]	; (8003ba0 <TIM_Base_SetConfig+0xc4>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d108      	bne.n	8003b0e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2270      	movs	r2, #112	; 0x70
 8003b00:	4393      	bics	r3, r2
 8003b02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	68fa      	ldr	r2, [r7, #12]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a22      	ldr	r2, [pc, #136]	; (8003b9c <TIM_Base_SetConfig+0xc0>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d00f      	beq.n	8003b36 <TIM_Base_SetConfig+0x5a>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a21      	ldr	r2, [pc, #132]	; (8003ba0 <TIM_Base_SetConfig+0xc4>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d00b      	beq.n	8003b36 <TIM_Base_SetConfig+0x5a>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a20      	ldr	r2, [pc, #128]	; (8003ba4 <TIM_Base_SetConfig+0xc8>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d007      	beq.n	8003b36 <TIM_Base_SetConfig+0x5a>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a1f      	ldr	r2, [pc, #124]	; (8003ba8 <TIM_Base_SetConfig+0xcc>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d003      	beq.n	8003b36 <TIM_Base_SetConfig+0x5a>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a1e      	ldr	r2, [pc, #120]	; (8003bac <TIM_Base_SetConfig+0xd0>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d108      	bne.n	8003b48 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	4a1d      	ldr	r2, [pc, #116]	; (8003bb0 <TIM_Base_SetConfig+0xd4>)
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	68fa      	ldr	r2, [r7, #12]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2280      	movs	r2, #128	; 0x80
 8003b4c:	4393      	bics	r3, r2
 8003b4e:	001a      	movs	r2, r3
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	695b      	ldr	r3, [r3, #20]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	68fa      	ldr	r2, [r7, #12]
 8003b5c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	689a      	ldr	r2, [r3, #8]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a0a      	ldr	r2, [pc, #40]	; (8003b9c <TIM_Base_SetConfig+0xc0>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d007      	beq.n	8003b86 <TIM_Base_SetConfig+0xaa>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a0b      	ldr	r2, [pc, #44]	; (8003ba8 <TIM_Base_SetConfig+0xcc>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d003      	beq.n	8003b86 <TIM_Base_SetConfig+0xaa>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a0a      	ldr	r2, [pc, #40]	; (8003bac <TIM_Base_SetConfig+0xd0>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d103      	bne.n	8003b8e <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	691a      	ldr	r2, [r3, #16]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2201      	movs	r2, #1
 8003b92:	615a      	str	r2, [r3, #20]
}
 8003b94:	46c0      	nop			; (mov r8, r8)
 8003b96:	46bd      	mov	sp, r7
 8003b98:	b004      	add	sp, #16
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	40012c00 	.word	0x40012c00
 8003ba0:	40000400 	.word	0x40000400
 8003ba4:	40002000 	.word	0x40002000
 8003ba8:	40014400 	.word	0x40014400
 8003bac:	40014800 	.word	0x40014800
 8003bb0:	fffffcff 	.word	0xfffffcff

08003bb4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b086      	sub	sp, #24
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6a1b      	ldr	r3, [r3, #32]
 8003bc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6a1b      	ldr	r3, [r3, #32]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	4393      	bics	r3, r2
 8003bce:	001a      	movs	r2, r3
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	699b      	ldr	r3, [r3, #24]
 8003bd8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	22f0      	movs	r2, #240	; 0xf0
 8003bde:	4393      	bics	r3, r2
 8003be0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	011b      	lsls	r3, r3, #4
 8003be6:	693a      	ldr	r2, [r7, #16]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	220a      	movs	r2, #10
 8003bf0:	4393      	bics	r3, r2
 8003bf2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003bf4:	697a      	ldr	r2, [r7, #20]
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	693a      	ldr	r2, [r7, #16]
 8003c00:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	697a      	ldr	r2, [r7, #20]
 8003c06:	621a      	str	r2, [r3, #32]
}
 8003c08:	46c0      	nop			; (mov r8, r8)
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	b006      	add	sp, #24
 8003c0e:	bd80      	pop	{r7, pc}

08003c10 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b086      	sub	sp, #24
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	60b9      	str	r1, [r7, #8]
 8003c1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6a1b      	ldr	r3, [r3, #32]
 8003c20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6a1b      	ldr	r3, [r3, #32]
 8003c26:	2210      	movs	r2, #16
 8003c28:	4393      	bics	r3, r2
 8003c2a:	001a      	movs	r2, r3
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	699b      	ldr	r3, [r3, #24]
 8003c34:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	4a0d      	ldr	r2, [pc, #52]	; (8003c70 <TIM_TI2_ConfigInputStage+0x60>)
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	031b      	lsls	r3, r3, #12
 8003c42:	693a      	ldr	r2, [r7, #16]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	22a0      	movs	r2, #160	; 0xa0
 8003c4c:	4393      	bics	r3, r2
 8003c4e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	011b      	lsls	r3, r3, #4
 8003c54:	697a      	ldr	r2, [r7, #20]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	693a      	ldr	r2, [r7, #16]
 8003c5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	697a      	ldr	r2, [r7, #20]
 8003c64:	621a      	str	r2, [r3, #32]
}
 8003c66:	46c0      	nop			; (mov r8, r8)
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	b006      	add	sp, #24
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	46c0      	nop			; (mov r8, r8)
 8003c70:	ffff0fff 	.word	0xffff0fff

08003c74 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	4a08      	ldr	r2, [pc, #32]	; (8003ca8 <TIM_ITRx_SetConfig+0x34>)
 8003c88:	4013      	ands	r3, r2
 8003c8a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c8c:	683a      	ldr	r2, [r7, #0]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	2207      	movs	r2, #7
 8003c94:	4313      	orrs	r3, r2
 8003c96:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	68fa      	ldr	r2, [r7, #12]
 8003c9c:	609a      	str	r2, [r3, #8]
}
 8003c9e:	46c0      	nop			; (mov r8, r8)
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	b004      	add	sp, #16
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	46c0      	nop			; (mov r8, r8)
 8003ca8:	ffcfff8f 	.word	0xffcfff8f

08003cac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b086      	sub	sp, #24
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	60f8      	str	r0, [r7, #12]
 8003cb4:	60b9      	str	r1, [r7, #8]
 8003cb6:	607a      	str	r2, [r7, #4]
 8003cb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	4a09      	ldr	r2, [pc, #36]	; (8003ce8 <TIM_ETR_SetConfig+0x3c>)
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	021a      	lsls	r2, r3, #8
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	431a      	orrs	r2, r3
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	697a      	ldr	r2, [r7, #20]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	697a      	ldr	r2, [r7, #20]
 8003cde:	609a      	str	r2, [r3, #8]
}
 8003ce0:	46c0      	nop			; (mov r8, r8)
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	b006      	add	sp, #24
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	ffff00ff 	.word	0xffff00ff

08003cec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	223c      	movs	r2, #60	; 0x3c
 8003cfa:	5c9b      	ldrb	r3, [r3, r2]
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d101      	bne.n	8003d04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d00:	2302      	movs	r3, #2
 8003d02:	e04a      	b.n	8003d9a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	223c      	movs	r2, #60	; 0x3c
 8003d08:	2101      	movs	r1, #1
 8003d0a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	223d      	movs	r2, #61	; 0x3d
 8003d10:	2102      	movs	r1, #2
 8003d12:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a1e      	ldr	r2, [pc, #120]	; (8003da4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d108      	bne.n	8003d40 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	4a1d      	ldr	r2, [pc, #116]	; (8003da8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8003d32:	4013      	ands	r3, r2
 8003d34:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	68fa      	ldr	r2, [r7, #12]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2270      	movs	r2, #112	; 0x70
 8003d44:	4393      	bics	r3, r2
 8003d46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	68fa      	ldr	r2, [r7, #12]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	68fa      	ldr	r2, [r7, #12]
 8003d58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a11      	ldr	r2, [pc, #68]	; (8003da4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d004      	beq.n	8003d6e <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a10      	ldr	r2, [pc, #64]	; (8003dac <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d10c      	bne.n	8003d88 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	2280      	movs	r2, #128	; 0x80
 8003d72:	4393      	bics	r3, r2
 8003d74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	68ba      	ldr	r2, [r7, #8]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	68ba      	ldr	r2, [r7, #8]
 8003d86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	223d      	movs	r2, #61	; 0x3d
 8003d8c:	2101      	movs	r1, #1
 8003d8e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	223c      	movs	r2, #60	; 0x3c
 8003d94:	2100      	movs	r1, #0
 8003d96:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d98:	2300      	movs	r3, #0
}
 8003d9a:	0018      	movs	r0, r3
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	b004      	add	sp, #16
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	46c0      	nop			; (mov r8, r8)
 8003da4:	40012c00 	.word	0x40012c00
 8003da8:	ff0fffff 	.word	0xff0fffff
 8003dac:	40000400 	.word	0x40000400

08003db0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b082      	sub	sp, #8
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d101      	bne.n	8003dc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e046      	b.n	8003e50 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2288      	movs	r2, #136	; 0x88
 8003dc6:	589b      	ldr	r3, [r3, r2]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d107      	bne.n	8003ddc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2284      	movs	r2, #132	; 0x84
 8003dd0:	2100      	movs	r1, #0
 8003dd2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	0018      	movs	r0, r3
 8003dd8:	f7fe faec 	bl	80023b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2288      	movs	r2, #136	; 0x88
 8003de0:	2124      	movs	r1, #36	; 0x24
 8003de2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	2101      	movs	r1, #1
 8003df0:	438a      	bics	r2, r1
 8003df2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d003      	beq.n	8003e04 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	0018      	movs	r0, r3
 8003e00:	f000 fb34 	bl	800446c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	0018      	movs	r0, r3
 8003e08:	f000 f9b2 	bl	8004170 <UART_SetConfig>
 8003e0c:	0003      	movs	r3, r0
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d101      	bne.n	8003e16 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e01c      	b.n	8003e50 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	685a      	ldr	r2, [r3, #4]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	490d      	ldr	r1, [pc, #52]	; (8003e58 <HAL_UART_Init+0xa8>)
 8003e22:	400a      	ands	r2, r1
 8003e24:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	689a      	ldr	r2, [r3, #8]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	212a      	movs	r1, #42	; 0x2a
 8003e32:	438a      	bics	r2, r1
 8003e34:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	2101      	movs	r1, #1
 8003e42:	430a      	orrs	r2, r1
 8003e44:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	0018      	movs	r0, r3
 8003e4a:	f000 fbc3 	bl	80045d4 <UART_CheckIdleState>
 8003e4e:	0003      	movs	r3, r0
}
 8003e50:	0018      	movs	r0, r3
 8003e52:	46bd      	mov	sp, r7
 8003e54:	b002      	add	sp, #8
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	ffffb7ff 	.word	0xffffb7ff

08003e5c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b08a      	sub	sp, #40	; 0x28
 8003e60:	af02      	add	r7, sp, #8
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	60b9      	str	r1, [r7, #8]
 8003e66:	603b      	str	r3, [r7, #0]
 8003e68:	1dbb      	adds	r3, r7, #6
 8003e6a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2288      	movs	r2, #136	; 0x88
 8003e70:	589b      	ldr	r3, [r3, r2]
 8003e72:	2b20      	cmp	r3, #32
 8003e74:	d000      	beq.n	8003e78 <HAL_UART_Transmit+0x1c>
 8003e76:	e090      	b.n	8003f9a <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d003      	beq.n	8003e86 <HAL_UART_Transmit+0x2a>
 8003e7e:	1dbb      	adds	r3, r7, #6
 8003e80:	881b      	ldrh	r3, [r3, #0]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d101      	bne.n	8003e8a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e088      	b.n	8003f9c <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	689a      	ldr	r2, [r3, #8]
 8003e8e:	2380      	movs	r3, #128	; 0x80
 8003e90:	015b      	lsls	r3, r3, #5
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d109      	bne.n	8003eaa <HAL_UART_Transmit+0x4e>
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d105      	bne.n	8003eaa <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	d001      	beq.n	8003eaa <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e078      	b.n	8003f9c <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2290      	movs	r2, #144	; 0x90
 8003eae:	2100      	movs	r1, #0
 8003eb0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2288      	movs	r2, #136	; 0x88
 8003eb6:	2121      	movs	r1, #33	; 0x21
 8003eb8:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003eba:	f7fe fc29 	bl	8002710 <HAL_GetTick>
 8003ebe:	0003      	movs	r3, r0
 8003ec0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	1dba      	adds	r2, r7, #6
 8003ec6:	2154      	movs	r1, #84	; 0x54
 8003ec8:	8812      	ldrh	r2, [r2, #0]
 8003eca:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	1dba      	adds	r2, r7, #6
 8003ed0:	2156      	movs	r1, #86	; 0x56
 8003ed2:	8812      	ldrh	r2, [r2, #0]
 8003ed4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	689a      	ldr	r2, [r3, #8]
 8003eda:	2380      	movs	r3, #128	; 0x80
 8003edc:	015b      	lsls	r3, r3, #5
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d108      	bne.n	8003ef4 <HAL_UART_Transmit+0x98>
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d104      	bne.n	8003ef4 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8003eea:	2300      	movs	r3, #0
 8003eec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	61bb      	str	r3, [r7, #24]
 8003ef2:	e003      	b.n	8003efc <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003efc:	e030      	b.n	8003f60 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003efe:	697a      	ldr	r2, [r7, #20]
 8003f00:	68f8      	ldr	r0, [r7, #12]
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	9300      	str	r3, [sp, #0]
 8003f06:	0013      	movs	r3, r2
 8003f08:	2200      	movs	r2, #0
 8003f0a:	2180      	movs	r1, #128	; 0x80
 8003f0c:	f000 fc0c 	bl	8004728 <UART_WaitOnFlagUntilTimeout>
 8003f10:	1e03      	subs	r3, r0, #0
 8003f12:	d005      	beq.n	8003f20 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2288      	movs	r2, #136	; 0x88
 8003f18:	2120      	movs	r1, #32
 8003f1a:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	e03d      	b.n	8003f9c <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d10b      	bne.n	8003f3e <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f26:	69bb      	ldr	r3, [r7, #24]
 8003f28:	881b      	ldrh	r3, [r3, #0]
 8003f2a:	001a      	movs	r2, r3
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	05d2      	lsls	r2, r2, #23
 8003f32:	0dd2      	lsrs	r2, r2, #23
 8003f34:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	3302      	adds	r3, #2
 8003f3a:	61bb      	str	r3, [r7, #24]
 8003f3c:	e007      	b.n	8003f4e <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	781a      	ldrb	r2, [r3, #0]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	3301      	adds	r3, #1
 8003f4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2256      	movs	r2, #86	; 0x56
 8003f52:	5a9b      	ldrh	r3, [r3, r2]
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	3b01      	subs	r3, #1
 8003f58:	b299      	uxth	r1, r3
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2256      	movs	r2, #86	; 0x56
 8003f5e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2256      	movs	r2, #86	; 0x56
 8003f64:	5a9b      	ldrh	r3, [r3, r2]
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d1c8      	bne.n	8003efe <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f6c:	697a      	ldr	r2, [r7, #20]
 8003f6e:	68f8      	ldr	r0, [r7, #12]
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	9300      	str	r3, [sp, #0]
 8003f74:	0013      	movs	r3, r2
 8003f76:	2200      	movs	r2, #0
 8003f78:	2140      	movs	r1, #64	; 0x40
 8003f7a:	f000 fbd5 	bl	8004728 <UART_WaitOnFlagUntilTimeout>
 8003f7e:	1e03      	subs	r3, r0, #0
 8003f80:	d005      	beq.n	8003f8e <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2288      	movs	r2, #136	; 0x88
 8003f86:	2120      	movs	r1, #32
 8003f88:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e006      	b.n	8003f9c <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2288      	movs	r2, #136	; 0x88
 8003f92:	2120      	movs	r1, #32
 8003f94:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8003f96:	2300      	movs	r3, #0
 8003f98:	e000      	b.n	8003f9c <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8003f9a:	2302      	movs	r3, #2
  }
}
 8003f9c:	0018      	movs	r0, r3
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	b008      	add	sp, #32
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b08a      	sub	sp, #40	; 0x28
 8003fa8:	af02      	add	r7, sp, #8
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	60b9      	str	r1, [r7, #8]
 8003fae:	603b      	str	r3, [r7, #0]
 8003fb0:	1dbb      	adds	r3, r7, #6
 8003fb2:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	228c      	movs	r2, #140	; 0x8c
 8003fb8:	589b      	ldr	r3, [r3, r2]
 8003fba:	2b20      	cmp	r3, #32
 8003fbc:	d000      	beq.n	8003fc0 <HAL_UART_Receive+0x1c>
 8003fbe:	e0d0      	b.n	8004162 <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d003      	beq.n	8003fce <HAL_UART_Receive+0x2a>
 8003fc6:	1dbb      	adds	r3, r7, #6
 8003fc8:	881b      	ldrh	r3, [r3, #0]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d101      	bne.n	8003fd2 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e0c8      	b.n	8004164 <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	689a      	ldr	r2, [r3, #8]
 8003fd6:	2380      	movs	r3, #128	; 0x80
 8003fd8:	015b      	lsls	r3, r3, #5
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d109      	bne.n	8003ff2 <HAL_UART_Receive+0x4e>
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d105      	bne.n	8003ff2 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	4013      	ands	r3, r2
 8003fec:	d001      	beq.n	8003ff2 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e0b8      	b.n	8004164 <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2290      	movs	r2, #144	; 0x90
 8003ff6:	2100      	movs	r1, #0
 8003ff8:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	228c      	movs	r2, #140	; 0x8c
 8003ffe:	2122      	movs	r1, #34	; 0x22
 8004000:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2200      	movs	r2, #0
 8004006:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004008:	f7fe fb82 	bl	8002710 <HAL_GetTick>
 800400c:	0003      	movs	r3, r0
 800400e:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	1dba      	adds	r2, r7, #6
 8004014:	215c      	movs	r1, #92	; 0x5c
 8004016:	8812      	ldrh	r2, [r2, #0]
 8004018:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	1dba      	adds	r2, r7, #6
 800401e:	215e      	movs	r1, #94	; 0x5e
 8004020:	8812      	ldrh	r2, [r2, #0]
 8004022:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	689a      	ldr	r2, [r3, #8]
 8004028:	2380      	movs	r3, #128	; 0x80
 800402a:	015b      	lsls	r3, r3, #5
 800402c:	429a      	cmp	r2, r3
 800402e:	d10d      	bne.n	800404c <HAL_UART_Receive+0xa8>
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	691b      	ldr	r3, [r3, #16]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d104      	bne.n	8004042 <HAL_UART_Receive+0x9e>
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2260      	movs	r2, #96	; 0x60
 800403c:	494b      	ldr	r1, [pc, #300]	; (800416c <HAL_UART_Receive+0x1c8>)
 800403e:	5299      	strh	r1, [r3, r2]
 8004040:	e02e      	b.n	80040a0 <HAL_UART_Receive+0xfc>
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2260      	movs	r2, #96	; 0x60
 8004046:	21ff      	movs	r1, #255	; 0xff
 8004048:	5299      	strh	r1, [r3, r2]
 800404a:	e029      	b.n	80040a0 <HAL_UART_Receive+0xfc>
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d10d      	bne.n	8004070 <HAL_UART_Receive+0xcc>
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	691b      	ldr	r3, [r3, #16]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d104      	bne.n	8004066 <HAL_UART_Receive+0xc2>
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2260      	movs	r2, #96	; 0x60
 8004060:	21ff      	movs	r1, #255	; 0xff
 8004062:	5299      	strh	r1, [r3, r2]
 8004064:	e01c      	b.n	80040a0 <HAL_UART_Receive+0xfc>
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2260      	movs	r2, #96	; 0x60
 800406a:	217f      	movs	r1, #127	; 0x7f
 800406c:	5299      	strh	r1, [r3, r2]
 800406e:	e017      	b.n	80040a0 <HAL_UART_Receive+0xfc>
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	689a      	ldr	r2, [r3, #8]
 8004074:	2380      	movs	r3, #128	; 0x80
 8004076:	055b      	lsls	r3, r3, #21
 8004078:	429a      	cmp	r2, r3
 800407a:	d10d      	bne.n	8004098 <HAL_UART_Receive+0xf4>
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	691b      	ldr	r3, [r3, #16]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d104      	bne.n	800408e <HAL_UART_Receive+0xea>
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2260      	movs	r2, #96	; 0x60
 8004088:	217f      	movs	r1, #127	; 0x7f
 800408a:	5299      	strh	r1, [r3, r2]
 800408c:	e008      	b.n	80040a0 <HAL_UART_Receive+0xfc>
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2260      	movs	r2, #96	; 0x60
 8004092:	213f      	movs	r1, #63	; 0x3f
 8004094:	5299      	strh	r1, [r3, r2]
 8004096:	e003      	b.n	80040a0 <HAL_UART_Receive+0xfc>
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2260      	movs	r2, #96	; 0x60
 800409c:	2100      	movs	r1, #0
 800409e:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 80040a0:	2312      	movs	r3, #18
 80040a2:	18fb      	adds	r3, r7, r3
 80040a4:	68fa      	ldr	r2, [r7, #12]
 80040a6:	2160      	movs	r1, #96	; 0x60
 80040a8:	5a52      	ldrh	r2, [r2, r1]
 80040aa:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	689a      	ldr	r2, [r3, #8]
 80040b0:	2380      	movs	r3, #128	; 0x80
 80040b2:	015b      	lsls	r3, r3, #5
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d108      	bne.n	80040ca <HAL_UART_Receive+0x126>
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	691b      	ldr	r3, [r3, #16]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d104      	bne.n	80040ca <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 80040c0:	2300      	movs	r3, #0
 80040c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	61bb      	str	r3, [r7, #24]
 80040c8:	e003      	b.n	80040d2 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040ce:	2300      	movs	r3, #0
 80040d0:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80040d2:	e03a      	b.n	800414a <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80040d4:	697a      	ldr	r2, [r7, #20]
 80040d6:	68f8      	ldr	r0, [r7, #12]
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	9300      	str	r3, [sp, #0]
 80040dc:	0013      	movs	r3, r2
 80040de:	2200      	movs	r2, #0
 80040e0:	2120      	movs	r1, #32
 80040e2:	f000 fb21 	bl	8004728 <UART_WaitOnFlagUntilTimeout>
 80040e6:	1e03      	subs	r3, r0, #0
 80040e8:	d005      	beq.n	80040f6 <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	228c      	movs	r2, #140	; 0x8c
 80040ee:	2120      	movs	r1, #32
 80040f0:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	e036      	b.n	8004164 <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d10e      	bne.n	800411a <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004102:	b29b      	uxth	r3, r3
 8004104:	2212      	movs	r2, #18
 8004106:	18ba      	adds	r2, r7, r2
 8004108:	8812      	ldrh	r2, [r2, #0]
 800410a:	4013      	ands	r3, r2
 800410c:	b29a      	uxth	r2, r3
 800410e:	69bb      	ldr	r3, [r7, #24]
 8004110:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004112:	69bb      	ldr	r3, [r7, #24]
 8004114:	3302      	adds	r3, #2
 8004116:	61bb      	str	r3, [r7, #24]
 8004118:	e00e      	b.n	8004138 <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004120:	b2db      	uxtb	r3, r3
 8004122:	2212      	movs	r2, #18
 8004124:	18ba      	adds	r2, r7, r2
 8004126:	8812      	ldrh	r2, [r2, #0]
 8004128:	b2d2      	uxtb	r2, r2
 800412a:	4013      	ands	r3, r2
 800412c:	b2da      	uxtb	r2, r3
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	3301      	adds	r3, #1
 8004136:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	225e      	movs	r2, #94	; 0x5e
 800413c:	5a9b      	ldrh	r3, [r3, r2]
 800413e:	b29b      	uxth	r3, r3
 8004140:	3b01      	subs	r3, #1
 8004142:	b299      	uxth	r1, r3
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	225e      	movs	r2, #94	; 0x5e
 8004148:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	225e      	movs	r2, #94	; 0x5e
 800414e:	5a9b      	ldrh	r3, [r3, r2]
 8004150:	b29b      	uxth	r3, r3
 8004152:	2b00      	cmp	r3, #0
 8004154:	d1be      	bne.n	80040d4 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	228c      	movs	r2, #140	; 0x8c
 800415a:	2120      	movs	r1, #32
 800415c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800415e:	2300      	movs	r3, #0
 8004160:	e000      	b.n	8004164 <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 8004162:	2302      	movs	r3, #2
  }
}
 8004164:	0018      	movs	r0, r3
 8004166:	46bd      	mov	sp, r7
 8004168:	b008      	add	sp, #32
 800416a:	bd80      	pop	{r7, pc}
 800416c:	000001ff 	.word	0x000001ff

08004170 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b088      	sub	sp, #32
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004178:	231e      	movs	r3, #30
 800417a:	18fb      	adds	r3, r7, r3
 800417c:	2200      	movs	r2, #0
 800417e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	689a      	ldr	r2, [r3, #8]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	691b      	ldr	r3, [r3, #16]
 8004188:	431a      	orrs	r2, r3
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	695b      	ldr	r3, [r3, #20]
 800418e:	431a      	orrs	r2, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	69db      	ldr	r3, [r3, #28]
 8004194:	4313      	orrs	r3, r2
 8004196:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4aab      	ldr	r2, [pc, #684]	; (800444c <UART_SetConfig+0x2dc>)
 80041a0:	4013      	ands	r3, r2
 80041a2:	0019      	movs	r1, r3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	697a      	ldr	r2, [r7, #20]
 80041aa:	430a      	orrs	r2, r1
 80041ac:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	4aa6      	ldr	r2, [pc, #664]	; (8004450 <UART_SetConfig+0x2e0>)
 80041b6:	4013      	ands	r3, r2
 80041b8:	0019      	movs	r1, r3
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	68da      	ldr	r2, [r3, #12]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	430a      	orrs	r2, r1
 80041c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	699b      	ldr	r3, [r3, #24]
 80041ca:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6a1b      	ldr	r3, [r3, #32]
 80041d0:	697a      	ldr	r2, [r7, #20]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	4a9d      	ldr	r2, [pc, #628]	; (8004454 <UART_SetConfig+0x2e4>)
 80041de:	4013      	ands	r3, r2
 80041e0:	0019      	movs	r1, r3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	697a      	ldr	r2, [r7, #20]
 80041e8:	430a      	orrs	r2, r1
 80041ea:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f2:	220f      	movs	r2, #15
 80041f4:	4393      	bics	r3, r2
 80041f6:	0019      	movs	r1, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	430a      	orrs	r2, r1
 8004202:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a93      	ldr	r2, [pc, #588]	; (8004458 <UART_SetConfig+0x2e8>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d127      	bne.n	800425e <UART_SetConfig+0xee>
 800420e:	4b93      	ldr	r3, [pc, #588]	; (800445c <UART_SetConfig+0x2ec>)
 8004210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004212:	2203      	movs	r2, #3
 8004214:	4013      	ands	r3, r2
 8004216:	2b03      	cmp	r3, #3
 8004218:	d017      	beq.n	800424a <UART_SetConfig+0xda>
 800421a:	d81b      	bhi.n	8004254 <UART_SetConfig+0xe4>
 800421c:	2b02      	cmp	r3, #2
 800421e:	d00a      	beq.n	8004236 <UART_SetConfig+0xc6>
 8004220:	d818      	bhi.n	8004254 <UART_SetConfig+0xe4>
 8004222:	2b00      	cmp	r3, #0
 8004224:	d002      	beq.n	800422c <UART_SetConfig+0xbc>
 8004226:	2b01      	cmp	r3, #1
 8004228:	d00a      	beq.n	8004240 <UART_SetConfig+0xd0>
 800422a:	e013      	b.n	8004254 <UART_SetConfig+0xe4>
 800422c:	231f      	movs	r3, #31
 800422e:	18fb      	adds	r3, r7, r3
 8004230:	2200      	movs	r2, #0
 8004232:	701a      	strb	r2, [r3, #0]
 8004234:	e021      	b.n	800427a <UART_SetConfig+0x10a>
 8004236:	231f      	movs	r3, #31
 8004238:	18fb      	adds	r3, r7, r3
 800423a:	2202      	movs	r2, #2
 800423c:	701a      	strb	r2, [r3, #0]
 800423e:	e01c      	b.n	800427a <UART_SetConfig+0x10a>
 8004240:	231f      	movs	r3, #31
 8004242:	18fb      	adds	r3, r7, r3
 8004244:	2204      	movs	r2, #4
 8004246:	701a      	strb	r2, [r3, #0]
 8004248:	e017      	b.n	800427a <UART_SetConfig+0x10a>
 800424a:	231f      	movs	r3, #31
 800424c:	18fb      	adds	r3, r7, r3
 800424e:	2208      	movs	r2, #8
 8004250:	701a      	strb	r2, [r3, #0]
 8004252:	e012      	b.n	800427a <UART_SetConfig+0x10a>
 8004254:	231f      	movs	r3, #31
 8004256:	18fb      	adds	r3, r7, r3
 8004258:	2210      	movs	r2, #16
 800425a:	701a      	strb	r2, [r3, #0]
 800425c:	e00d      	b.n	800427a <UART_SetConfig+0x10a>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a7f      	ldr	r2, [pc, #508]	; (8004460 <UART_SetConfig+0x2f0>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d104      	bne.n	8004272 <UART_SetConfig+0x102>
 8004268:	231f      	movs	r3, #31
 800426a:	18fb      	adds	r3, r7, r3
 800426c:	2200      	movs	r2, #0
 800426e:	701a      	strb	r2, [r3, #0]
 8004270:	e003      	b.n	800427a <UART_SetConfig+0x10a>
 8004272:	231f      	movs	r3, #31
 8004274:	18fb      	adds	r3, r7, r3
 8004276:	2210      	movs	r2, #16
 8004278:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	69da      	ldr	r2, [r3, #28]
 800427e:	2380      	movs	r3, #128	; 0x80
 8004280:	021b      	lsls	r3, r3, #8
 8004282:	429a      	cmp	r2, r3
 8004284:	d000      	beq.n	8004288 <UART_SetConfig+0x118>
 8004286:	e06f      	b.n	8004368 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8004288:	231f      	movs	r3, #31
 800428a:	18fb      	adds	r3, r7, r3
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	2b08      	cmp	r3, #8
 8004290:	d01f      	beq.n	80042d2 <UART_SetConfig+0x162>
 8004292:	dc22      	bgt.n	80042da <UART_SetConfig+0x16a>
 8004294:	2b04      	cmp	r3, #4
 8004296:	d017      	beq.n	80042c8 <UART_SetConfig+0x158>
 8004298:	dc1f      	bgt.n	80042da <UART_SetConfig+0x16a>
 800429a:	2b00      	cmp	r3, #0
 800429c:	d002      	beq.n	80042a4 <UART_SetConfig+0x134>
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d005      	beq.n	80042ae <UART_SetConfig+0x13e>
 80042a2:	e01a      	b.n	80042da <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042a4:	f7ff f9a0 	bl	80035e8 <HAL_RCC_GetPCLK1Freq>
 80042a8:	0003      	movs	r3, r0
 80042aa:	61bb      	str	r3, [r7, #24]
        break;
 80042ac:	e01c      	b.n	80042e8 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 80042ae:	4b6b      	ldr	r3, [pc, #428]	; (800445c <UART_SetConfig+0x2ec>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	095b      	lsrs	r3, r3, #5
 80042b4:	2207      	movs	r2, #7
 80042b6:	4013      	ands	r3, r2
 80042b8:	3301      	adds	r3, #1
 80042ba:	0019      	movs	r1, r3
 80042bc:	4869      	ldr	r0, [pc, #420]	; (8004464 <UART_SetConfig+0x2f4>)
 80042be:	f7fb ff2d 	bl	800011c <__udivsi3>
 80042c2:	0003      	movs	r3, r0
 80042c4:	61bb      	str	r3, [r7, #24]
        break;
 80042c6:	e00f      	b.n	80042e8 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042c8:	f7ff f944 	bl	8003554 <HAL_RCC_GetSysClockFreq>
 80042cc:	0003      	movs	r3, r0
 80042ce:	61bb      	str	r3, [r7, #24]
        break;
 80042d0:	e00a      	b.n	80042e8 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042d2:	2380      	movs	r3, #128	; 0x80
 80042d4:	021b      	lsls	r3, r3, #8
 80042d6:	61bb      	str	r3, [r7, #24]
        break;
 80042d8:	e006      	b.n	80042e8 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 80042da:	2300      	movs	r3, #0
 80042dc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80042de:	231e      	movs	r3, #30
 80042e0:	18fb      	adds	r3, r7, r3
 80042e2:	2201      	movs	r2, #1
 80042e4:	701a      	strb	r2, [r3, #0]
        break;
 80042e6:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80042e8:	69bb      	ldr	r3, [r7, #24]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d100      	bne.n	80042f0 <UART_SetConfig+0x180>
 80042ee:	e097      	b.n	8004420 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042f4:	4b5c      	ldr	r3, [pc, #368]	; (8004468 <UART_SetConfig+0x2f8>)
 80042f6:	0052      	lsls	r2, r2, #1
 80042f8:	5ad3      	ldrh	r3, [r2, r3]
 80042fa:	0019      	movs	r1, r3
 80042fc:	69b8      	ldr	r0, [r7, #24]
 80042fe:	f7fb ff0d 	bl	800011c <__udivsi3>
 8004302:	0003      	movs	r3, r0
 8004304:	005a      	lsls	r2, r3, #1
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	085b      	lsrs	r3, r3, #1
 800430c:	18d2      	adds	r2, r2, r3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	0019      	movs	r1, r3
 8004314:	0010      	movs	r0, r2
 8004316:	f7fb ff01 	bl	800011c <__udivsi3>
 800431a:	0003      	movs	r3, r0
 800431c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	2b0f      	cmp	r3, #15
 8004322:	d91c      	bls.n	800435e <UART_SetConfig+0x1ee>
 8004324:	693a      	ldr	r2, [r7, #16]
 8004326:	2380      	movs	r3, #128	; 0x80
 8004328:	025b      	lsls	r3, r3, #9
 800432a:	429a      	cmp	r2, r3
 800432c:	d217      	bcs.n	800435e <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	b29a      	uxth	r2, r3
 8004332:	200e      	movs	r0, #14
 8004334:	183b      	adds	r3, r7, r0
 8004336:	210f      	movs	r1, #15
 8004338:	438a      	bics	r2, r1
 800433a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	085b      	lsrs	r3, r3, #1
 8004340:	b29b      	uxth	r3, r3
 8004342:	2207      	movs	r2, #7
 8004344:	4013      	ands	r3, r2
 8004346:	b299      	uxth	r1, r3
 8004348:	183b      	adds	r3, r7, r0
 800434a:	183a      	adds	r2, r7, r0
 800434c:	8812      	ldrh	r2, [r2, #0]
 800434e:	430a      	orrs	r2, r1
 8004350:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	183a      	adds	r2, r7, r0
 8004358:	8812      	ldrh	r2, [r2, #0]
 800435a:	60da      	str	r2, [r3, #12]
 800435c:	e060      	b.n	8004420 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 800435e:	231e      	movs	r3, #30
 8004360:	18fb      	adds	r3, r7, r3
 8004362:	2201      	movs	r2, #1
 8004364:	701a      	strb	r2, [r3, #0]
 8004366:	e05b      	b.n	8004420 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004368:	231f      	movs	r3, #31
 800436a:	18fb      	adds	r3, r7, r3
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	2b08      	cmp	r3, #8
 8004370:	d01f      	beq.n	80043b2 <UART_SetConfig+0x242>
 8004372:	dc22      	bgt.n	80043ba <UART_SetConfig+0x24a>
 8004374:	2b04      	cmp	r3, #4
 8004376:	d017      	beq.n	80043a8 <UART_SetConfig+0x238>
 8004378:	dc1f      	bgt.n	80043ba <UART_SetConfig+0x24a>
 800437a:	2b00      	cmp	r3, #0
 800437c:	d002      	beq.n	8004384 <UART_SetConfig+0x214>
 800437e:	2b02      	cmp	r3, #2
 8004380:	d005      	beq.n	800438e <UART_SetConfig+0x21e>
 8004382:	e01a      	b.n	80043ba <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004384:	f7ff f930 	bl	80035e8 <HAL_RCC_GetPCLK1Freq>
 8004388:	0003      	movs	r3, r0
 800438a:	61bb      	str	r3, [r7, #24]
        break;
 800438c:	e01c      	b.n	80043c8 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 800438e:	4b33      	ldr	r3, [pc, #204]	; (800445c <UART_SetConfig+0x2ec>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	095b      	lsrs	r3, r3, #5
 8004394:	2207      	movs	r2, #7
 8004396:	4013      	ands	r3, r2
 8004398:	3301      	adds	r3, #1
 800439a:	0019      	movs	r1, r3
 800439c:	4831      	ldr	r0, [pc, #196]	; (8004464 <UART_SetConfig+0x2f4>)
 800439e:	f7fb febd 	bl	800011c <__udivsi3>
 80043a2:	0003      	movs	r3, r0
 80043a4:	61bb      	str	r3, [r7, #24]
        break;
 80043a6:	e00f      	b.n	80043c8 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043a8:	f7ff f8d4 	bl	8003554 <HAL_RCC_GetSysClockFreq>
 80043ac:	0003      	movs	r3, r0
 80043ae:	61bb      	str	r3, [r7, #24]
        break;
 80043b0:	e00a      	b.n	80043c8 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043b2:	2380      	movs	r3, #128	; 0x80
 80043b4:	021b      	lsls	r3, r3, #8
 80043b6:	61bb      	str	r3, [r7, #24]
        break;
 80043b8:	e006      	b.n	80043c8 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 80043ba:	2300      	movs	r3, #0
 80043bc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80043be:	231e      	movs	r3, #30
 80043c0:	18fb      	adds	r3, r7, r3
 80043c2:	2201      	movs	r2, #1
 80043c4:	701a      	strb	r2, [r3, #0]
        break;
 80043c6:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80043c8:	69bb      	ldr	r3, [r7, #24]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d028      	beq.n	8004420 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043d2:	4b25      	ldr	r3, [pc, #148]	; (8004468 <UART_SetConfig+0x2f8>)
 80043d4:	0052      	lsls	r2, r2, #1
 80043d6:	5ad3      	ldrh	r3, [r2, r3]
 80043d8:	0019      	movs	r1, r3
 80043da:	69b8      	ldr	r0, [r7, #24]
 80043dc:	f7fb fe9e 	bl	800011c <__udivsi3>
 80043e0:	0003      	movs	r3, r0
 80043e2:	001a      	movs	r2, r3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	085b      	lsrs	r3, r3, #1
 80043ea:	18d2      	adds	r2, r2, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	0019      	movs	r1, r3
 80043f2:	0010      	movs	r0, r2
 80043f4:	f7fb fe92 	bl	800011c <__udivsi3>
 80043f8:	0003      	movs	r3, r0
 80043fa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	2b0f      	cmp	r3, #15
 8004400:	d90a      	bls.n	8004418 <UART_SetConfig+0x2a8>
 8004402:	693a      	ldr	r2, [r7, #16]
 8004404:	2380      	movs	r3, #128	; 0x80
 8004406:	025b      	lsls	r3, r3, #9
 8004408:	429a      	cmp	r2, r3
 800440a:	d205      	bcs.n	8004418 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	b29a      	uxth	r2, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	60da      	str	r2, [r3, #12]
 8004416:	e003      	b.n	8004420 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8004418:	231e      	movs	r3, #30
 800441a:	18fb      	adds	r3, r7, r3
 800441c:	2201      	movs	r2, #1
 800441e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	226a      	movs	r2, #106	; 0x6a
 8004424:	2101      	movs	r1, #1
 8004426:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2268      	movs	r2, #104	; 0x68
 800442c:	2101      	movs	r1, #1
 800442e:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800443c:	231e      	movs	r3, #30
 800443e:	18fb      	adds	r3, r7, r3
 8004440:	781b      	ldrb	r3, [r3, #0]
}
 8004442:	0018      	movs	r0, r3
 8004444:	46bd      	mov	sp, r7
 8004446:	b008      	add	sp, #32
 8004448:	bd80      	pop	{r7, pc}
 800444a:	46c0      	nop			; (mov r8, r8)
 800444c:	cfff69f3 	.word	0xcfff69f3
 8004450:	ffffcfff 	.word	0xffffcfff
 8004454:	11fff4ff 	.word	0x11fff4ff
 8004458:	40013800 	.word	0x40013800
 800445c:	40021000 	.word	0x40021000
 8004460:	40004400 	.word	0x40004400
 8004464:	02dc6c00 	.word	0x02dc6c00
 8004468:	080059bc 	.word	0x080059bc

0800446c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b082      	sub	sp, #8
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004478:	2208      	movs	r2, #8
 800447a:	4013      	ands	r3, r2
 800447c:	d00b      	beq.n	8004496 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	4a4a      	ldr	r2, [pc, #296]	; (80045b0 <UART_AdvFeatureConfig+0x144>)
 8004486:	4013      	ands	r3, r2
 8004488:	0019      	movs	r1, r3
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	430a      	orrs	r2, r1
 8004494:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800449a:	2201      	movs	r2, #1
 800449c:	4013      	ands	r3, r2
 800449e:	d00b      	beq.n	80044b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	4a43      	ldr	r2, [pc, #268]	; (80045b4 <UART_AdvFeatureConfig+0x148>)
 80044a8:	4013      	ands	r3, r2
 80044aa:	0019      	movs	r1, r3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	430a      	orrs	r2, r1
 80044b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044bc:	2202      	movs	r2, #2
 80044be:	4013      	ands	r3, r2
 80044c0:	d00b      	beq.n	80044da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	4a3b      	ldr	r2, [pc, #236]	; (80045b8 <UART_AdvFeatureConfig+0x14c>)
 80044ca:	4013      	ands	r3, r2
 80044cc:	0019      	movs	r1, r3
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	430a      	orrs	r2, r1
 80044d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044de:	2204      	movs	r2, #4
 80044e0:	4013      	ands	r3, r2
 80044e2:	d00b      	beq.n	80044fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	4a34      	ldr	r2, [pc, #208]	; (80045bc <UART_AdvFeatureConfig+0x150>)
 80044ec:	4013      	ands	r3, r2
 80044ee:	0019      	movs	r1, r3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	430a      	orrs	r2, r1
 80044fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004500:	2210      	movs	r2, #16
 8004502:	4013      	ands	r3, r2
 8004504:	d00b      	beq.n	800451e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	4a2c      	ldr	r2, [pc, #176]	; (80045c0 <UART_AdvFeatureConfig+0x154>)
 800450e:	4013      	ands	r3, r2
 8004510:	0019      	movs	r1, r3
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	430a      	orrs	r2, r1
 800451c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004522:	2220      	movs	r2, #32
 8004524:	4013      	ands	r3, r2
 8004526:	d00b      	beq.n	8004540 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	4a25      	ldr	r2, [pc, #148]	; (80045c4 <UART_AdvFeatureConfig+0x158>)
 8004530:	4013      	ands	r3, r2
 8004532:	0019      	movs	r1, r3
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	430a      	orrs	r2, r1
 800453e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004544:	2240      	movs	r2, #64	; 0x40
 8004546:	4013      	ands	r3, r2
 8004548:	d01d      	beq.n	8004586 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	4a1d      	ldr	r2, [pc, #116]	; (80045c8 <UART_AdvFeatureConfig+0x15c>)
 8004552:	4013      	ands	r3, r2
 8004554:	0019      	movs	r1, r3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	430a      	orrs	r2, r1
 8004560:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004566:	2380      	movs	r3, #128	; 0x80
 8004568:	035b      	lsls	r3, r3, #13
 800456a:	429a      	cmp	r2, r3
 800456c:	d10b      	bne.n	8004586 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	4a15      	ldr	r2, [pc, #84]	; (80045cc <UART_AdvFeatureConfig+0x160>)
 8004576:	4013      	ands	r3, r2
 8004578:	0019      	movs	r1, r3
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	430a      	orrs	r2, r1
 8004584:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800458a:	2280      	movs	r2, #128	; 0x80
 800458c:	4013      	ands	r3, r2
 800458e:	d00b      	beq.n	80045a8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	4a0e      	ldr	r2, [pc, #56]	; (80045d0 <UART_AdvFeatureConfig+0x164>)
 8004598:	4013      	ands	r3, r2
 800459a:	0019      	movs	r1, r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	430a      	orrs	r2, r1
 80045a6:	605a      	str	r2, [r3, #4]
  }
}
 80045a8:	46c0      	nop			; (mov r8, r8)
 80045aa:	46bd      	mov	sp, r7
 80045ac:	b002      	add	sp, #8
 80045ae:	bd80      	pop	{r7, pc}
 80045b0:	ffff7fff 	.word	0xffff7fff
 80045b4:	fffdffff 	.word	0xfffdffff
 80045b8:	fffeffff 	.word	0xfffeffff
 80045bc:	fffbffff 	.word	0xfffbffff
 80045c0:	ffffefff 	.word	0xffffefff
 80045c4:	ffffdfff 	.word	0xffffdfff
 80045c8:	ffefffff 	.word	0xffefffff
 80045cc:	ff9fffff 	.word	0xff9fffff
 80045d0:	fff7ffff 	.word	0xfff7ffff

080045d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b092      	sub	sp, #72	; 0x48
 80045d8:	af02      	add	r7, sp, #8
 80045da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2290      	movs	r2, #144	; 0x90
 80045e0:	2100      	movs	r1, #0
 80045e2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80045e4:	f7fe f894 	bl	8002710 <HAL_GetTick>
 80045e8:	0003      	movs	r3, r0
 80045ea:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	2208      	movs	r2, #8
 80045f4:	4013      	ands	r3, r2
 80045f6:	2b08      	cmp	r3, #8
 80045f8:	d12d      	bne.n	8004656 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045fc:	2280      	movs	r2, #128	; 0x80
 80045fe:	0391      	lsls	r1, r2, #14
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	4a47      	ldr	r2, [pc, #284]	; (8004720 <UART_CheckIdleState+0x14c>)
 8004604:	9200      	str	r2, [sp, #0]
 8004606:	2200      	movs	r2, #0
 8004608:	f000 f88e 	bl	8004728 <UART_WaitOnFlagUntilTimeout>
 800460c:	1e03      	subs	r3, r0, #0
 800460e:	d022      	beq.n	8004656 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004610:	f3ef 8310 	mrs	r3, PRIMASK
 8004614:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004618:	63bb      	str	r3, [r7, #56]	; 0x38
 800461a:	2301      	movs	r3, #1
 800461c:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800461e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004620:	f383 8810 	msr	PRIMASK, r3
}
 8004624:	46c0      	nop			; (mov r8, r8)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2180      	movs	r1, #128	; 0x80
 8004632:	438a      	bics	r2, r1
 8004634:	601a      	str	r2, [r3, #0]
 8004636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004638:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800463a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800463c:	f383 8810 	msr	PRIMASK, r3
}
 8004640:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2288      	movs	r2, #136	; 0x88
 8004646:	2120      	movs	r1, #32
 8004648:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2284      	movs	r2, #132	; 0x84
 800464e:	2100      	movs	r1, #0
 8004650:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	e060      	b.n	8004718 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	2204      	movs	r2, #4
 800465e:	4013      	ands	r3, r2
 8004660:	2b04      	cmp	r3, #4
 8004662:	d146      	bne.n	80046f2 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004664:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004666:	2280      	movs	r2, #128	; 0x80
 8004668:	03d1      	lsls	r1, r2, #15
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	4a2c      	ldr	r2, [pc, #176]	; (8004720 <UART_CheckIdleState+0x14c>)
 800466e:	9200      	str	r2, [sp, #0]
 8004670:	2200      	movs	r2, #0
 8004672:	f000 f859 	bl	8004728 <UART_WaitOnFlagUntilTimeout>
 8004676:	1e03      	subs	r3, r0, #0
 8004678:	d03b      	beq.n	80046f2 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800467a:	f3ef 8310 	mrs	r3, PRIMASK
 800467e:	60fb      	str	r3, [r7, #12]
  return(result);
 8004680:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004682:	637b      	str	r3, [r7, #52]	; 0x34
 8004684:	2301      	movs	r3, #1
 8004686:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	f383 8810 	msr	PRIMASK, r3
}
 800468e:	46c0      	nop			; (mov r8, r8)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4922      	ldr	r1, [pc, #136]	; (8004724 <UART_CheckIdleState+0x150>)
 800469c:	400a      	ands	r2, r1
 800469e:	601a      	str	r2, [r3, #0]
 80046a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046a2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	f383 8810 	msr	PRIMASK, r3
}
 80046aa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80046ac:	f3ef 8310 	mrs	r3, PRIMASK
 80046b0:	61bb      	str	r3, [r7, #24]
  return(result);
 80046b2:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046b4:	633b      	str	r3, [r7, #48]	; 0x30
 80046b6:	2301      	movs	r3, #1
 80046b8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046ba:	69fb      	ldr	r3, [r7, #28]
 80046bc:	f383 8810 	msr	PRIMASK, r3
}
 80046c0:	46c0      	nop			; (mov r8, r8)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	689a      	ldr	r2, [r3, #8]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2101      	movs	r1, #1
 80046ce:	438a      	bics	r2, r1
 80046d0:	609a      	str	r2, [r3, #8]
 80046d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046d6:	6a3b      	ldr	r3, [r7, #32]
 80046d8:	f383 8810 	msr	PRIMASK, r3
}
 80046dc:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	228c      	movs	r2, #140	; 0x8c
 80046e2:	2120      	movs	r1, #32
 80046e4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2284      	movs	r2, #132	; 0x84
 80046ea:	2100      	movs	r1, #0
 80046ec:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	e012      	b.n	8004718 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2288      	movs	r2, #136	; 0x88
 80046f6:	2120      	movs	r1, #32
 80046f8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	228c      	movs	r2, #140	; 0x8c
 80046fe:	2120      	movs	r1, #32
 8004700:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2200      	movs	r2, #0
 8004706:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2284      	movs	r2, #132	; 0x84
 8004712:	2100      	movs	r1, #0
 8004714:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004716:	2300      	movs	r3, #0
}
 8004718:	0018      	movs	r0, r3
 800471a:	46bd      	mov	sp, r7
 800471c:	b010      	add	sp, #64	; 0x40
 800471e:	bd80      	pop	{r7, pc}
 8004720:	01ffffff 	.word	0x01ffffff
 8004724:	fffffedf 	.word	0xfffffedf

08004728 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b084      	sub	sp, #16
 800472c:	af00      	add	r7, sp, #0
 800472e:	60f8      	str	r0, [r7, #12]
 8004730:	60b9      	str	r1, [r7, #8]
 8004732:	603b      	str	r3, [r7, #0]
 8004734:	1dfb      	adds	r3, r7, #7
 8004736:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004738:	e04b      	b.n	80047d2 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	3301      	adds	r3, #1
 800473e:	d048      	beq.n	80047d2 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004740:	f7fd ffe6 	bl	8002710 <HAL_GetTick>
 8004744:	0002      	movs	r2, r0
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	69ba      	ldr	r2, [r7, #24]
 800474c:	429a      	cmp	r2, r3
 800474e:	d302      	bcc.n	8004756 <UART_WaitOnFlagUntilTimeout+0x2e>
 8004750:	69bb      	ldr	r3, [r7, #24]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d101      	bne.n	800475a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004756:	2303      	movs	r3, #3
 8004758:	e04b      	b.n	80047f2 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	2204      	movs	r2, #4
 8004762:	4013      	ands	r3, r2
 8004764:	d035      	beq.n	80047d2 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	69db      	ldr	r3, [r3, #28]
 800476c:	2208      	movs	r2, #8
 800476e:	4013      	ands	r3, r2
 8004770:	2b08      	cmp	r3, #8
 8004772:	d111      	bne.n	8004798 <UART_WaitOnFlagUntilTimeout+0x70>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	2208      	movs	r2, #8
 800477a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	0018      	movs	r0, r3
 8004780:	f000 f83c 	bl	80047fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2290      	movs	r2, #144	; 0x90
 8004788:	2108      	movs	r1, #8
 800478a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2284      	movs	r2, #132	; 0x84
 8004790:	2100      	movs	r1, #0
 8004792:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	e02c      	b.n	80047f2 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	69da      	ldr	r2, [r3, #28]
 800479e:	2380      	movs	r3, #128	; 0x80
 80047a0:	011b      	lsls	r3, r3, #4
 80047a2:	401a      	ands	r2, r3
 80047a4:	2380      	movs	r3, #128	; 0x80
 80047a6:	011b      	lsls	r3, r3, #4
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d112      	bne.n	80047d2 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	2280      	movs	r2, #128	; 0x80
 80047b2:	0112      	lsls	r2, r2, #4
 80047b4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	0018      	movs	r0, r3
 80047ba:	f000 f81f 	bl	80047fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2290      	movs	r2, #144	; 0x90
 80047c2:	2120      	movs	r1, #32
 80047c4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2284      	movs	r2, #132	; 0x84
 80047ca:	2100      	movs	r1, #0
 80047cc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	e00f      	b.n	80047f2 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	69db      	ldr	r3, [r3, #28]
 80047d8:	68ba      	ldr	r2, [r7, #8]
 80047da:	4013      	ands	r3, r2
 80047dc:	68ba      	ldr	r2, [r7, #8]
 80047de:	1ad3      	subs	r3, r2, r3
 80047e0:	425a      	negs	r2, r3
 80047e2:	4153      	adcs	r3, r2
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	001a      	movs	r2, r3
 80047e8:	1dfb      	adds	r3, r7, #7
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d0a4      	beq.n	800473a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	0018      	movs	r0, r3
 80047f4:	46bd      	mov	sp, r7
 80047f6:	b004      	add	sp, #16
 80047f8:	bd80      	pop	{r7, pc}
	...

080047fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b08e      	sub	sp, #56	; 0x38
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004804:	f3ef 8310 	mrs	r3, PRIMASK
 8004808:	617b      	str	r3, [r7, #20]
  return(result);
 800480a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800480c:	637b      	str	r3, [r7, #52]	; 0x34
 800480e:	2301      	movs	r3, #1
 8004810:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004812:	69bb      	ldr	r3, [r7, #24]
 8004814:	f383 8810 	msr	PRIMASK, r3
}
 8004818:	46c0      	nop			; (mov r8, r8)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4926      	ldr	r1, [pc, #152]	; (80048c0 <UART_EndRxTransfer+0xc4>)
 8004826:	400a      	ands	r2, r1
 8004828:	601a      	str	r2, [r3, #0]
 800482a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800482c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	f383 8810 	msr	PRIMASK, r3
}
 8004834:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004836:	f3ef 8310 	mrs	r3, PRIMASK
 800483a:	623b      	str	r3, [r7, #32]
  return(result);
 800483c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800483e:	633b      	str	r3, [r7, #48]	; 0x30
 8004840:	2301      	movs	r3, #1
 8004842:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004846:	f383 8810 	msr	PRIMASK, r3
}
 800484a:	46c0      	nop			; (mov r8, r8)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	689a      	ldr	r2, [r3, #8]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	491b      	ldr	r1, [pc, #108]	; (80048c4 <UART_EndRxTransfer+0xc8>)
 8004858:	400a      	ands	r2, r1
 800485a:	609a      	str	r2, [r3, #8]
 800485c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800485e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004862:	f383 8810 	msr	PRIMASK, r3
}
 8004866:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800486c:	2b01      	cmp	r3, #1
 800486e:	d118      	bne.n	80048a2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004870:	f3ef 8310 	mrs	r3, PRIMASK
 8004874:	60bb      	str	r3, [r7, #8]
  return(result);
 8004876:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004878:	62fb      	str	r3, [r7, #44]	; 0x2c
 800487a:	2301      	movs	r3, #1
 800487c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	f383 8810 	msr	PRIMASK, r3
}
 8004884:	46c0      	nop			; (mov r8, r8)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	2110      	movs	r1, #16
 8004892:	438a      	bics	r2, r1
 8004894:	601a      	str	r2, [r3, #0]
 8004896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004898:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	f383 8810 	msr	PRIMASK, r3
}
 80048a0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	228c      	movs	r2, #140	; 0x8c
 80048a6:	2120      	movs	r1, #32
 80048a8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2200      	movs	r2, #0
 80048b4:	675a      	str	r2, [r3, #116]	; 0x74
}
 80048b6:	46c0      	nop			; (mov r8, r8)
 80048b8:	46bd      	mov	sp, r7
 80048ba:	b00e      	add	sp, #56	; 0x38
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	46c0      	nop			; (mov r8, r8)
 80048c0:	fffffedf 	.word	0xfffffedf
 80048c4:	effffffe 	.word	0xeffffffe

080048c8 <atoi>:
 80048c8:	b510      	push	{r4, lr}
 80048ca:	220a      	movs	r2, #10
 80048cc:	2100      	movs	r1, #0
 80048ce:	f000 f887 	bl	80049e0 <strtol>
 80048d2:	bd10      	pop	{r4, pc}

080048d4 <_strtol_l.constprop.0>:
 80048d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048d6:	b087      	sub	sp, #28
 80048d8:	001e      	movs	r6, r3
 80048da:	9005      	str	r0, [sp, #20]
 80048dc:	9101      	str	r1, [sp, #4]
 80048de:	9202      	str	r2, [sp, #8]
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d048      	beq.n	8004976 <_strtol_l.constprop.0+0xa2>
 80048e4:	000b      	movs	r3, r1
 80048e6:	2e24      	cmp	r6, #36	; 0x24
 80048e8:	d845      	bhi.n	8004976 <_strtol_l.constprop.0+0xa2>
 80048ea:	4a3b      	ldr	r2, [pc, #236]	; (80049d8 <_strtol_l.constprop.0+0x104>)
 80048ec:	2108      	movs	r1, #8
 80048ee:	4694      	mov	ip, r2
 80048f0:	001a      	movs	r2, r3
 80048f2:	4660      	mov	r0, ip
 80048f4:	7814      	ldrb	r4, [r2, #0]
 80048f6:	3301      	adds	r3, #1
 80048f8:	5d00      	ldrb	r0, [r0, r4]
 80048fa:	001d      	movs	r5, r3
 80048fc:	0007      	movs	r7, r0
 80048fe:	400f      	ands	r7, r1
 8004900:	4208      	tst	r0, r1
 8004902:	d1f5      	bne.n	80048f0 <_strtol_l.constprop.0+0x1c>
 8004904:	2c2d      	cmp	r4, #45	; 0x2d
 8004906:	d13d      	bne.n	8004984 <_strtol_l.constprop.0+0xb0>
 8004908:	2701      	movs	r7, #1
 800490a:	781c      	ldrb	r4, [r3, #0]
 800490c:	1c95      	adds	r5, r2, #2
 800490e:	2e00      	cmp	r6, #0
 8004910:	d05e      	beq.n	80049d0 <_strtol_l.constprop.0+0xfc>
 8004912:	2e10      	cmp	r6, #16
 8004914:	d109      	bne.n	800492a <_strtol_l.constprop.0+0x56>
 8004916:	2c30      	cmp	r4, #48	; 0x30
 8004918:	d107      	bne.n	800492a <_strtol_l.constprop.0+0x56>
 800491a:	2220      	movs	r2, #32
 800491c:	782b      	ldrb	r3, [r5, #0]
 800491e:	4393      	bics	r3, r2
 8004920:	2b58      	cmp	r3, #88	; 0x58
 8004922:	d150      	bne.n	80049c6 <_strtol_l.constprop.0+0xf2>
 8004924:	2610      	movs	r6, #16
 8004926:	786c      	ldrb	r4, [r5, #1]
 8004928:	3502      	adds	r5, #2
 800492a:	4b2c      	ldr	r3, [pc, #176]	; (80049dc <_strtol_l.constprop.0+0x108>)
 800492c:	0031      	movs	r1, r6
 800492e:	18fb      	adds	r3, r7, r3
 8004930:	0018      	movs	r0, r3
 8004932:	9303      	str	r3, [sp, #12]
 8004934:	f7fb fc78 	bl	8000228 <__aeabi_uidivmod>
 8004938:	2200      	movs	r2, #0
 800493a:	9104      	str	r1, [sp, #16]
 800493c:	2101      	movs	r1, #1
 800493e:	4684      	mov	ip, r0
 8004940:	0010      	movs	r0, r2
 8004942:	4249      	negs	r1, r1
 8004944:	0023      	movs	r3, r4
 8004946:	3b30      	subs	r3, #48	; 0x30
 8004948:	2b09      	cmp	r3, #9
 800494a:	d903      	bls.n	8004954 <_strtol_l.constprop.0+0x80>
 800494c:	3b11      	subs	r3, #17
 800494e:	2b19      	cmp	r3, #25
 8004950:	d81d      	bhi.n	800498e <_strtol_l.constprop.0+0xba>
 8004952:	330a      	adds	r3, #10
 8004954:	429e      	cmp	r6, r3
 8004956:	dd1e      	ble.n	8004996 <_strtol_l.constprop.0+0xc2>
 8004958:	1c54      	adds	r4, r2, #1
 800495a:	d009      	beq.n	8004970 <_strtol_l.constprop.0+0x9c>
 800495c:	000a      	movs	r2, r1
 800495e:	4584      	cmp	ip, r0
 8004960:	d306      	bcc.n	8004970 <_strtol_l.constprop.0+0x9c>
 8004962:	d102      	bne.n	800496a <_strtol_l.constprop.0+0x96>
 8004964:	9c04      	ldr	r4, [sp, #16]
 8004966:	429c      	cmp	r4, r3
 8004968:	db02      	blt.n	8004970 <_strtol_l.constprop.0+0x9c>
 800496a:	2201      	movs	r2, #1
 800496c:	4370      	muls	r0, r6
 800496e:	1818      	adds	r0, r3, r0
 8004970:	782c      	ldrb	r4, [r5, #0]
 8004972:	3501      	adds	r5, #1
 8004974:	e7e6      	b.n	8004944 <_strtol_l.constprop.0+0x70>
 8004976:	f000 f9b5 	bl	8004ce4 <__errno>
 800497a:	2316      	movs	r3, #22
 800497c:	6003      	str	r3, [r0, #0]
 800497e:	2000      	movs	r0, #0
 8004980:	b007      	add	sp, #28
 8004982:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004984:	2c2b      	cmp	r4, #43	; 0x2b
 8004986:	d1c2      	bne.n	800490e <_strtol_l.constprop.0+0x3a>
 8004988:	781c      	ldrb	r4, [r3, #0]
 800498a:	1c95      	adds	r5, r2, #2
 800498c:	e7bf      	b.n	800490e <_strtol_l.constprop.0+0x3a>
 800498e:	0023      	movs	r3, r4
 8004990:	3b61      	subs	r3, #97	; 0x61
 8004992:	2b19      	cmp	r3, #25
 8004994:	d9dd      	bls.n	8004952 <_strtol_l.constprop.0+0x7e>
 8004996:	1c53      	adds	r3, r2, #1
 8004998:	d109      	bne.n	80049ae <_strtol_l.constprop.0+0xda>
 800499a:	2322      	movs	r3, #34	; 0x22
 800499c:	9a05      	ldr	r2, [sp, #20]
 800499e:	9803      	ldr	r0, [sp, #12]
 80049a0:	6013      	str	r3, [r2, #0]
 80049a2:	9b02      	ldr	r3, [sp, #8]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d0eb      	beq.n	8004980 <_strtol_l.constprop.0+0xac>
 80049a8:	1e6b      	subs	r3, r5, #1
 80049aa:	9301      	str	r3, [sp, #4]
 80049ac:	e007      	b.n	80049be <_strtol_l.constprop.0+0xea>
 80049ae:	2f00      	cmp	r7, #0
 80049b0:	d000      	beq.n	80049b4 <_strtol_l.constprop.0+0xe0>
 80049b2:	4240      	negs	r0, r0
 80049b4:	9b02      	ldr	r3, [sp, #8]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d0e2      	beq.n	8004980 <_strtol_l.constprop.0+0xac>
 80049ba:	2a00      	cmp	r2, #0
 80049bc:	d1f4      	bne.n	80049a8 <_strtol_l.constprop.0+0xd4>
 80049be:	9b02      	ldr	r3, [sp, #8]
 80049c0:	9a01      	ldr	r2, [sp, #4]
 80049c2:	601a      	str	r2, [r3, #0]
 80049c4:	e7dc      	b.n	8004980 <_strtol_l.constprop.0+0xac>
 80049c6:	2430      	movs	r4, #48	; 0x30
 80049c8:	2e00      	cmp	r6, #0
 80049ca:	d1ae      	bne.n	800492a <_strtol_l.constprop.0+0x56>
 80049cc:	3608      	adds	r6, #8
 80049ce:	e7ac      	b.n	800492a <_strtol_l.constprop.0+0x56>
 80049d0:	2c30      	cmp	r4, #48	; 0x30
 80049d2:	d0a2      	beq.n	800491a <_strtol_l.constprop.0+0x46>
 80049d4:	260a      	movs	r6, #10
 80049d6:	e7a8      	b.n	800492a <_strtol_l.constprop.0+0x56>
 80049d8:	080059d5 	.word	0x080059d5
 80049dc:	7fffffff 	.word	0x7fffffff

080049e0 <strtol>:
 80049e0:	b510      	push	{r4, lr}
 80049e2:	4c04      	ldr	r4, [pc, #16]	; (80049f4 <strtol+0x14>)
 80049e4:	0013      	movs	r3, r2
 80049e6:	000a      	movs	r2, r1
 80049e8:	0001      	movs	r1, r0
 80049ea:	6820      	ldr	r0, [r4, #0]
 80049ec:	f7ff ff72 	bl	80048d4 <_strtol_l.constprop.0>
 80049f0:	bd10      	pop	{r4, pc}
 80049f2:	46c0      	nop			; (mov r8, r8)
 80049f4:	20000068 	.word	0x20000068

080049f8 <std>:
 80049f8:	2300      	movs	r3, #0
 80049fa:	b510      	push	{r4, lr}
 80049fc:	0004      	movs	r4, r0
 80049fe:	6003      	str	r3, [r0, #0]
 8004a00:	6043      	str	r3, [r0, #4]
 8004a02:	6083      	str	r3, [r0, #8]
 8004a04:	8181      	strh	r1, [r0, #12]
 8004a06:	6643      	str	r3, [r0, #100]	; 0x64
 8004a08:	81c2      	strh	r2, [r0, #14]
 8004a0a:	6103      	str	r3, [r0, #16]
 8004a0c:	6143      	str	r3, [r0, #20]
 8004a0e:	6183      	str	r3, [r0, #24]
 8004a10:	0019      	movs	r1, r3
 8004a12:	2208      	movs	r2, #8
 8004a14:	305c      	adds	r0, #92	; 0x5c
 8004a16:	f000 f90f 	bl	8004c38 <memset>
 8004a1a:	4b0b      	ldr	r3, [pc, #44]	; (8004a48 <std+0x50>)
 8004a1c:	6224      	str	r4, [r4, #32]
 8004a1e:	6263      	str	r3, [r4, #36]	; 0x24
 8004a20:	4b0a      	ldr	r3, [pc, #40]	; (8004a4c <std+0x54>)
 8004a22:	62a3      	str	r3, [r4, #40]	; 0x28
 8004a24:	4b0a      	ldr	r3, [pc, #40]	; (8004a50 <std+0x58>)
 8004a26:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004a28:	4b0a      	ldr	r3, [pc, #40]	; (8004a54 <std+0x5c>)
 8004a2a:	6323      	str	r3, [r4, #48]	; 0x30
 8004a2c:	4b0a      	ldr	r3, [pc, #40]	; (8004a58 <std+0x60>)
 8004a2e:	429c      	cmp	r4, r3
 8004a30:	d005      	beq.n	8004a3e <std+0x46>
 8004a32:	4b0a      	ldr	r3, [pc, #40]	; (8004a5c <std+0x64>)
 8004a34:	429c      	cmp	r4, r3
 8004a36:	d002      	beq.n	8004a3e <std+0x46>
 8004a38:	4b09      	ldr	r3, [pc, #36]	; (8004a60 <std+0x68>)
 8004a3a:	429c      	cmp	r4, r3
 8004a3c:	d103      	bne.n	8004a46 <std+0x4e>
 8004a3e:	0020      	movs	r0, r4
 8004a40:	3058      	adds	r0, #88	; 0x58
 8004a42:	f000 f979 	bl	8004d38 <__retarget_lock_init_recursive>
 8004a46:	bd10      	pop	{r4, pc}
 8004a48:	08004ba1 	.word	0x08004ba1
 8004a4c:	08004bc9 	.word	0x08004bc9
 8004a50:	08004c01 	.word	0x08004c01
 8004a54:	08004c2d 	.word	0x08004c2d
 8004a58:	200001d4 	.word	0x200001d4
 8004a5c:	2000023c 	.word	0x2000023c
 8004a60:	200002a4 	.word	0x200002a4

08004a64 <stdio_exit_handler>:
 8004a64:	b510      	push	{r4, lr}
 8004a66:	4a03      	ldr	r2, [pc, #12]	; (8004a74 <stdio_exit_handler+0x10>)
 8004a68:	4903      	ldr	r1, [pc, #12]	; (8004a78 <stdio_exit_handler+0x14>)
 8004a6a:	4804      	ldr	r0, [pc, #16]	; (8004a7c <stdio_exit_handler+0x18>)
 8004a6c:	f000 f86c 	bl	8004b48 <_fwalk_sglue>
 8004a70:	bd10      	pop	{r4, pc}
 8004a72:	46c0      	nop			; (mov r8, r8)
 8004a74:	20000010 	.word	0x20000010
 8004a78:	080055d9 	.word	0x080055d9
 8004a7c:	2000001c 	.word	0x2000001c

08004a80 <cleanup_stdio>:
 8004a80:	6841      	ldr	r1, [r0, #4]
 8004a82:	4b0b      	ldr	r3, [pc, #44]	; (8004ab0 <cleanup_stdio+0x30>)
 8004a84:	b510      	push	{r4, lr}
 8004a86:	0004      	movs	r4, r0
 8004a88:	4299      	cmp	r1, r3
 8004a8a:	d001      	beq.n	8004a90 <cleanup_stdio+0x10>
 8004a8c:	f000 fda4 	bl	80055d8 <_fflush_r>
 8004a90:	68a1      	ldr	r1, [r4, #8]
 8004a92:	4b08      	ldr	r3, [pc, #32]	; (8004ab4 <cleanup_stdio+0x34>)
 8004a94:	4299      	cmp	r1, r3
 8004a96:	d002      	beq.n	8004a9e <cleanup_stdio+0x1e>
 8004a98:	0020      	movs	r0, r4
 8004a9a:	f000 fd9d 	bl	80055d8 <_fflush_r>
 8004a9e:	68e1      	ldr	r1, [r4, #12]
 8004aa0:	4b05      	ldr	r3, [pc, #20]	; (8004ab8 <cleanup_stdio+0x38>)
 8004aa2:	4299      	cmp	r1, r3
 8004aa4:	d002      	beq.n	8004aac <cleanup_stdio+0x2c>
 8004aa6:	0020      	movs	r0, r4
 8004aa8:	f000 fd96 	bl	80055d8 <_fflush_r>
 8004aac:	bd10      	pop	{r4, pc}
 8004aae:	46c0      	nop			; (mov r8, r8)
 8004ab0:	200001d4 	.word	0x200001d4
 8004ab4:	2000023c 	.word	0x2000023c
 8004ab8:	200002a4 	.word	0x200002a4

08004abc <global_stdio_init.part.0>:
 8004abc:	b510      	push	{r4, lr}
 8004abe:	4b09      	ldr	r3, [pc, #36]	; (8004ae4 <global_stdio_init.part.0+0x28>)
 8004ac0:	4a09      	ldr	r2, [pc, #36]	; (8004ae8 <global_stdio_init.part.0+0x2c>)
 8004ac2:	2104      	movs	r1, #4
 8004ac4:	601a      	str	r2, [r3, #0]
 8004ac6:	4809      	ldr	r0, [pc, #36]	; (8004aec <global_stdio_init.part.0+0x30>)
 8004ac8:	2200      	movs	r2, #0
 8004aca:	f7ff ff95 	bl	80049f8 <std>
 8004ace:	2201      	movs	r2, #1
 8004ad0:	2109      	movs	r1, #9
 8004ad2:	4807      	ldr	r0, [pc, #28]	; (8004af0 <global_stdio_init.part.0+0x34>)
 8004ad4:	f7ff ff90 	bl	80049f8 <std>
 8004ad8:	2202      	movs	r2, #2
 8004ada:	2112      	movs	r1, #18
 8004adc:	4805      	ldr	r0, [pc, #20]	; (8004af4 <global_stdio_init.part.0+0x38>)
 8004ade:	f7ff ff8b 	bl	80049f8 <std>
 8004ae2:	bd10      	pop	{r4, pc}
 8004ae4:	2000030c 	.word	0x2000030c
 8004ae8:	08004a65 	.word	0x08004a65
 8004aec:	200001d4 	.word	0x200001d4
 8004af0:	2000023c 	.word	0x2000023c
 8004af4:	200002a4 	.word	0x200002a4

08004af8 <__sfp_lock_acquire>:
 8004af8:	b510      	push	{r4, lr}
 8004afa:	4802      	ldr	r0, [pc, #8]	; (8004b04 <__sfp_lock_acquire+0xc>)
 8004afc:	f000 f91d 	bl	8004d3a <__retarget_lock_acquire_recursive>
 8004b00:	bd10      	pop	{r4, pc}
 8004b02:	46c0      	nop			; (mov r8, r8)
 8004b04:	20000315 	.word	0x20000315

08004b08 <__sfp_lock_release>:
 8004b08:	b510      	push	{r4, lr}
 8004b0a:	4802      	ldr	r0, [pc, #8]	; (8004b14 <__sfp_lock_release+0xc>)
 8004b0c:	f000 f916 	bl	8004d3c <__retarget_lock_release_recursive>
 8004b10:	bd10      	pop	{r4, pc}
 8004b12:	46c0      	nop			; (mov r8, r8)
 8004b14:	20000315 	.word	0x20000315

08004b18 <__sinit>:
 8004b18:	b510      	push	{r4, lr}
 8004b1a:	0004      	movs	r4, r0
 8004b1c:	f7ff ffec 	bl	8004af8 <__sfp_lock_acquire>
 8004b20:	6a23      	ldr	r3, [r4, #32]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d002      	beq.n	8004b2c <__sinit+0x14>
 8004b26:	f7ff ffef 	bl	8004b08 <__sfp_lock_release>
 8004b2a:	bd10      	pop	{r4, pc}
 8004b2c:	4b04      	ldr	r3, [pc, #16]	; (8004b40 <__sinit+0x28>)
 8004b2e:	6223      	str	r3, [r4, #32]
 8004b30:	4b04      	ldr	r3, [pc, #16]	; (8004b44 <__sinit+0x2c>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d1f6      	bne.n	8004b26 <__sinit+0xe>
 8004b38:	f7ff ffc0 	bl	8004abc <global_stdio_init.part.0>
 8004b3c:	e7f3      	b.n	8004b26 <__sinit+0xe>
 8004b3e:	46c0      	nop			; (mov r8, r8)
 8004b40:	08004a81 	.word	0x08004a81
 8004b44:	2000030c 	.word	0x2000030c

08004b48 <_fwalk_sglue>:
 8004b48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b4a:	0014      	movs	r4, r2
 8004b4c:	2600      	movs	r6, #0
 8004b4e:	9000      	str	r0, [sp, #0]
 8004b50:	9101      	str	r1, [sp, #4]
 8004b52:	68a5      	ldr	r5, [r4, #8]
 8004b54:	6867      	ldr	r7, [r4, #4]
 8004b56:	3f01      	subs	r7, #1
 8004b58:	d504      	bpl.n	8004b64 <_fwalk_sglue+0x1c>
 8004b5a:	6824      	ldr	r4, [r4, #0]
 8004b5c:	2c00      	cmp	r4, #0
 8004b5e:	d1f8      	bne.n	8004b52 <_fwalk_sglue+0xa>
 8004b60:	0030      	movs	r0, r6
 8004b62:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004b64:	89ab      	ldrh	r3, [r5, #12]
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d908      	bls.n	8004b7c <_fwalk_sglue+0x34>
 8004b6a:	220e      	movs	r2, #14
 8004b6c:	5eab      	ldrsh	r3, [r5, r2]
 8004b6e:	3301      	adds	r3, #1
 8004b70:	d004      	beq.n	8004b7c <_fwalk_sglue+0x34>
 8004b72:	0029      	movs	r1, r5
 8004b74:	9800      	ldr	r0, [sp, #0]
 8004b76:	9b01      	ldr	r3, [sp, #4]
 8004b78:	4798      	blx	r3
 8004b7a:	4306      	orrs	r6, r0
 8004b7c:	3568      	adds	r5, #104	; 0x68
 8004b7e:	e7ea      	b.n	8004b56 <_fwalk_sglue+0xe>

08004b80 <iprintf>:
 8004b80:	b40f      	push	{r0, r1, r2, r3}
 8004b82:	b507      	push	{r0, r1, r2, lr}
 8004b84:	4905      	ldr	r1, [pc, #20]	; (8004b9c <iprintf+0x1c>)
 8004b86:	ab04      	add	r3, sp, #16
 8004b88:	6808      	ldr	r0, [r1, #0]
 8004b8a:	cb04      	ldmia	r3!, {r2}
 8004b8c:	6881      	ldr	r1, [r0, #8]
 8004b8e:	9301      	str	r3, [sp, #4]
 8004b90:	f000 f9fc 	bl	8004f8c <_vfiprintf_r>
 8004b94:	b003      	add	sp, #12
 8004b96:	bc08      	pop	{r3}
 8004b98:	b004      	add	sp, #16
 8004b9a:	4718      	bx	r3
 8004b9c:	20000068 	.word	0x20000068

08004ba0 <__sread>:
 8004ba0:	b570      	push	{r4, r5, r6, lr}
 8004ba2:	000c      	movs	r4, r1
 8004ba4:	250e      	movs	r5, #14
 8004ba6:	5f49      	ldrsh	r1, [r1, r5]
 8004ba8:	f000 f874 	bl	8004c94 <_read_r>
 8004bac:	2800      	cmp	r0, #0
 8004bae:	db03      	blt.n	8004bb8 <__sread+0x18>
 8004bb0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004bb2:	181b      	adds	r3, r3, r0
 8004bb4:	6563      	str	r3, [r4, #84]	; 0x54
 8004bb6:	bd70      	pop	{r4, r5, r6, pc}
 8004bb8:	89a3      	ldrh	r3, [r4, #12]
 8004bba:	4a02      	ldr	r2, [pc, #8]	; (8004bc4 <__sread+0x24>)
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	81a3      	strh	r3, [r4, #12]
 8004bc0:	e7f9      	b.n	8004bb6 <__sread+0x16>
 8004bc2:	46c0      	nop			; (mov r8, r8)
 8004bc4:	ffffefff 	.word	0xffffefff

08004bc8 <__swrite>:
 8004bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bca:	001f      	movs	r7, r3
 8004bcc:	898b      	ldrh	r3, [r1, #12]
 8004bce:	0005      	movs	r5, r0
 8004bd0:	000c      	movs	r4, r1
 8004bd2:	0016      	movs	r6, r2
 8004bd4:	05db      	lsls	r3, r3, #23
 8004bd6:	d505      	bpl.n	8004be4 <__swrite+0x1c>
 8004bd8:	230e      	movs	r3, #14
 8004bda:	5ec9      	ldrsh	r1, [r1, r3]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	2302      	movs	r3, #2
 8004be0:	f000 f844 	bl	8004c6c <_lseek_r>
 8004be4:	89a3      	ldrh	r3, [r4, #12]
 8004be6:	4a05      	ldr	r2, [pc, #20]	; (8004bfc <__swrite+0x34>)
 8004be8:	0028      	movs	r0, r5
 8004bea:	4013      	ands	r3, r2
 8004bec:	81a3      	strh	r3, [r4, #12]
 8004bee:	0032      	movs	r2, r6
 8004bf0:	230e      	movs	r3, #14
 8004bf2:	5ee1      	ldrsh	r1, [r4, r3]
 8004bf4:	003b      	movs	r3, r7
 8004bf6:	f000 f861 	bl	8004cbc <_write_r>
 8004bfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bfc:	ffffefff 	.word	0xffffefff

08004c00 <__sseek>:
 8004c00:	b570      	push	{r4, r5, r6, lr}
 8004c02:	000c      	movs	r4, r1
 8004c04:	250e      	movs	r5, #14
 8004c06:	5f49      	ldrsh	r1, [r1, r5]
 8004c08:	f000 f830 	bl	8004c6c <_lseek_r>
 8004c0c:	89a3      	ldrh	r3, [r4, #12]
 8004c0e:	1c42      	adds	r2, r0, #1
 8004c10:	d103      	bne.n	8004c1a <__sseek+0x1a>
 8004c12:	4a05      	ldr	r2, [pc, #20]	; (8004c28 <__sseek+0x28>)
 8004c14:	4013      	ands	r3, r2
 8004c16:	81a3      	strh	r3, [r4, #12]
 8004c18:	bd70      	pop	{r4, r5, r6, pc}
 8004c1a:	2280      	movs	r2, #128	; 0x80
 8004c1c:	0152      	lsls	r2, r2, #5
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	81a3      	strh	r3, [r4, #12]
 8004c22:	6560      	str	r0, [r4, #84]	; 0x54
 8004c24:	e7f8      	b.n	8004c18 <__sseek+0x18>
 8004c26:	46c0      	nop			; (mov r8, r8)
 8004c28:	ffffefff 	.word	0xffffefff

08004c2c <__sclose>:
 8004c2c:	b510      	push	{r4, lr}
 8004c2e:	230e      	movs	r3, #14
 8004c30:	5ec9      	ldrsh	r1, [r1, r3]
 8004c32:	f000 f809 	bl	8004c48 <_close_r>
 8004c36:	bd10      	pop	{r4, pc}

08004c38 <memset>:
 8004c38:	0003      	movs	r3, r0
 8004c3a:	1882      	adds	r2, r0, r2
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d100      	bne.n	8004c42 <memset+0xa>
 8004c40:	4770      	bx	lr
 8004c42:	7019      	strb	r1, [r3, #0]
 8004c44:	3301      	adds	r3, #1
 8004c46:	e7f9      	b.n	8004c3c <memset+0x4>

08004c48 <_close_r>:
 8004c48:	2300      	movs	r3, #0
 8004c4a:	b570      	push	{r4, r5, r6, lr}
 8004c4c:	4d06      	ldr	r5, [pc, #24]	; (8004c68 <_close_r+0x20>)
 8004c4e:	0004      	movs	r4, r0
 8004c50:	0008      	movs	r0, r1
 8004c52:	602b      	str	r3, [r5, #0]
 8004c54:	f7fd fc52 	bl	80024fc <_close>
 8004c58:	1c43      	adds	r3, r0, #1
 8004c5a:	d103      	bne.n	8004c64 <_close_r+0x1c>
 8004c5c:	682b      	ldr	r3, [r5, #0]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d000      	beq.n	8004c64 <_close_r+0x1c>
 8004c62:	6023      	str	r3, [r4, #0]
 8004c64:	bd70      	pop	{r4, r5, r6, pc}
 8004c66:	46c0      	nop			; (mov r8, r8)
 8004c68:	20000310 	.word	0x20000310

08004c6c <_lseek_r>:
 8004c6c:	b570      	push	{r4, r5, r6, lr}
 8004c6e:	0004      	movs	r4, r0
 8004c70:	0008      	movs	r0, r1
 8004c72:	0011      	movs	r1, r2
 8004c74:	001a      	movs	r2, r3
 8004c76:	2300      	movs	r3, #0
 8004c78:	4d05      	ldr	r5, [pc, #20]	; (8004c90 <_lseek_r+0x24>)
 8004c7a:	602b      	str	r3, [r5, #0]
 8004c7c:	f7fd fc5f 	bl	800253e <_lseek>
 8004c80:	1c43      	adds	r3, r0, #1
 8004c82:	d103      	bne.n	8004c8c <_lseek_r+0x20>
 8004c84:	682b      	ldr	r3, [r5, #0]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d000      	beq.n	8004c8c <_lseek_r+0x20>
 8004c8a:	6023      	str	r3, [r4, #0]
 8004c8c:	bd70      	pop	{r4, r5, r6, pc}
 8004c8e:	46c0      	nop			; (mov r8, r8)
 8004c90:	20000310 	.word	0x20000310

08004c94 <_read_r>:
 8004c94:	b570      	push	{r4, r5, r6, lr}
 8004c96:	0004      	movs	r4, r0
 8004c98:	0008      	movs	r0, r1
 8004c9a:	0011      	movs	r1, r2
 8004c9c:	001a      	movs	r2, r3
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	4d05      	ldr	r5, [pc, #20]	; (8004cb8 <_read_r+0x24>)
 8004ca2:	602b      	str	r3, [r5, #0]
 8004ca4:	f7fd fbf1 	bl	800248a <_read>
 8004ca8:	1c43      	adds	r3, r0, #1
 8004caa:	d103      	bne.n	8004cb4 <_read_r+0x20>
 8004cac:	682b      	ldr	r3, [r5, #0]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d000      	beq.n	8004cb4 <_read_r+0x20>
 8004cb2:	6023      	str	r3, [r4, #0]
 8004cb4:	bd70      	pop	{r4, r5, r6, pc}
 8004cb6:	46c0      	nop			; (mov r8, r8)
 8004cb8:	20000310 	.word	0x20000310

08004cbc <_write_r>:
 8004cbc:	b570      	push	{r4, r5, r6, lr}
 8004cbe:	0004      	movs	r4, r0
 8004cc0:	0008      	movs	r0, r1
 8004cc2:	0011      	movs	r1, r2
 8004cc4:	001a      	movs	r2, r3
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	4d05      	ldr	r5, [pc, #20]	; (8004ce0 <_write_r+0x24>)
 8004cca:	602b      	str	r3, [r5, #0]
 8004ccc:	f7fd fbfa 	bl	80024c4 <_write>
 8004cd0:	1c43      	adds	r3, r0, #1
 8004cd2:	d103      	bne.n	8004cdc <_write_r+0x20>
 8004cd4:	682b      	ldr	r3, [r5, #0]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d000      	beq.n	8004cdc <_write_r+0x20>
 8004cda:	6023      	str	r3, [r4, #0]
 8004cdc:	bd70      	pop	{r4, r5, r6, pc}
 8004cde:	46c0      	nop			; (mov r8, r8)
 8004ce0:	20000310 	.word	0x20000310

08004ce4 <__errno>:
 8004ce4:	4b01      	ldr	r3, [pc, #4]	; (8004cec <__errno+0x8>)
 8004ce6:	6818      	ldr	r0, [r3, #0]
 8004ce8:	4770      	bx	lr
 8004cea:	46c0      	nop			; (mov r8, r8)
 8004cec:	20000068 	.word	0x20000068

08004cf0 <__libc_init_array>:
 8004cf0:	b570      	push	{r4, r5, r6, lr}
 8004cf2:	2600      	movs	r6, #0
 8004cf4:	4c0c      	ldr	r4, [pc, #48]	; (8004d28 <__libc_init_array+0x38>)
 8004cf6:	4d0d      	ldr	r5, [pc, #52]	; (8004d2c <__libc_init_array+0x3c>)
 8004cf8:	1b64      	subs	r4, r4, r5
 8004cfa:	10a4      	asrs	r4, r4, #2
 8004cfc:	42a6      	cmp	r6, r4
 8004cfe:	d109      	bne.n	8004d14 <__libc_init_array+0x24>
 8004d00:	2600      	movs	r6, #0
 8004d02:	f000 fde3 	bl	80058cc <_init>
 8004d06:	4c0a      	ldr	r4, [pc, #40]	; (8004d30 <__libc_init_array+0x40>)
 8004d08:	4d0a      	ldr	r5, [pc, #40]	; (8004d34 <__libc_init_array+0x44>)
 8004d0a:	1b64      	subs	r4, r4, r5
 8004d0c:	10a4      	asrs	r4, r4, #2
 8004d0e:	42a6      	cmp	r6, r4
 8004d10:	d105      	bne.n	8004d1e <__libc_init_array+0x2e>
 8004d12:	bd70      	pop	{r4, r5, r6, pc}
 8004d14:	00b3      	lsls	r3, r6, #2
 8004d16:	58eb      	ldr	r3, [r5, r3]
 8004d18:	4798      	blx	r3
 8004d1a:	3601      	adds	r6, #1
 8004d1c:	e7ee      	b.n	8004cfc <__libc_init_array+0xc>
 8004d1e:	00b3      	lsls	r3, r6, #2
 8004d20:	58eb      	ldr	r3, [r5, r3]
 8004d22:	4798      	blx	r3
 8004d24:	3601      	adds	r6, #1
 8004d26:	e7f2      	b.n	8004d0e <__libc_init_array+0x1e>
 8004d28:	08005b08 	.word	0x08005b08
 8004d2c:	08005b08 	.word	0x08005b08
 8004d30:	08005b0c 	.word	0x08005b0c
 8004d34:	08005b08 	.word	0x08005b08

08004d38 <__retarget_lock_init_recursive>:
 8004d38:	4770      	bx	lr

08004d3a <__retarget_lock_acquire_recursive>:
 8004d3a:	4770      	bx	lr

08004d3c <__retarget_lock_release_recursive>:
 8004d3c:	4770      	bx	lr
	...

08004d40 <_free_r>:
 8004d40:	b570      	push	{r4, r5, r6, lr}
 8004d42:	0005      	movs	r5, r0
 8004d44:	2900      	cmp	r1, #0
 8004d46:	d010      	beq.n	8004d6a <_free_r+0x2a>
 8004d48:	1f0c      	subs	r4, r1, #4
 8004d4a:	6823      	ldr	r3, [r4, #0]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	da00      	bge.n	8004d52 <_free_r+0x12>
 8004d50:	18e4      	adds	r4, r4, r3
 8004d52:	0028      	movs	r0, r5
 8004d54:	f000 f8e2 	bl	8004f1c <__malloc_lock>
 8004d58:	4a1d      	ldr	r2, [pc, #116]	; (8004dd0 <_free_r+0x90>)
 8004d5a:	6813      	ldr	r3, [r2, #0]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d105      	bne.n	8004d6c <_free_r+0x2c>
 8004d60:	6063      	str	r3, [r4, #4]
 8004d62:	6014      	str	r4, [r2, #0]
 8004d64:	0028      	movs	r0, r5
 8004d66:	f000 f8e1 	bl	8004f2c <__malloc_unlock>
 8004d6a:	bd70      	pop	{r4, r5, r6, pc}
 8004d6c:	42a3      	cmp	r3, r4
 8004d6e:	d908      	bls.n	8004d82 <_free_r+0x42>
 8004d70:	6820      	ldr	r0, [r4, #0]
 8004d72:	1821      	adds	r1, r4, r0
 8004d74:	428b      	cmp	r3, r1
 8004d76:	d1f3      	bne.n	8004d60 <_free_r+0x20>
 8004d78:	6819      	ldr	r1, [r3, #0]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	1809      	adds	r1, r1, r0
 8004d7e:	6021      	str	r1, [r4, #0]
 8004d80:	e7ee      	b.n	8004d60 <_free_r+0x20>
 8004d82:	001a      	movs	r2, r3
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d001      	beq.n	8004d8e <_free_r+0x4e>
 8004d8a:	42a3      	cmp	r3, r4
 8004d8c:	d9f9      	bls.n	8004d82 <_free_r+0x42>
 8004d8e:	6811      	ldr	r1, [r2, #0]
 8004d90:	1850      	adds	r0, r2, r1
 8004d92:	42a0      	cmp	r0, r4
 8004d94:	d10b      	bne.n	8004dae <_free_r+0x6e>
 8004d96:	6820      	ldr	r0, [r4, #0]
 8004d98:	1809      	adds	r1, r1, r0
 8004d9a:	1850      	adds	r0, r2, r1
 8004d9c:	6011      	str	r1, [r2, #0]
 8004d9e:	4283      	cmp	r3, r0
 8004da0:	d1e0      	bne.n	8004d64 <_free_r+0x24>
 8004da2:	6818      	ldr	r0, [r3, #0]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	1841      	adds	r1, r0, r1
 8004da8:	6011      	str	r1, [r2, #0]
 8004daa:	6053      	str	r3, [r2, #4]
 8004dac:	e7da      	b.n	8004d64 <_free_r+0x24>
 8004dae:	42a0      	cmp	r0, r4
 8004db0:	d902      	bls.n	8004db8 <_free_r+0x78>
 8004db2:	230c      	movs	r3, #12
 8004db4:	602b      	str	r3, [r5, #0]
 8004db6:	e7d5      	b.n	8004d64 <_free_r+0x24>
 8004db8:	6820      	ldr	r0, [r4, #0]
 8004dba:	1821      	adds	r1, r4, r0
 8004dbc:	428b      	cmp	r3, r1
 8004dbe:	d103      	bne.n	8004dc8 <_free_r+0x88>
 8004dc0:	6819      	ldr	r1, [r3, #0]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	1809      	adds	r1, r1, r0
 8004dc6:	6021      	str	r1, [r4, #0]
 8004dc8:	6063      	str	r3, [r4, #4]
 8004dca:	6054      	str	r4, [r2, #4]
 8004dcc:	e7ca      	b.n	8004d64 <_free_r+0x24>
 8004dce:	46c0      	nop			; (mov r8, r8)
 8004dd0:	20000318 	.word	0x20000318

08004dd4 <sbrk_aligned>:
 8004dd4:	b570      	push	{r4, r5, r6, lr}
 8004dd6:	4e0f      	ldr	r6, [pc, #60]	; (8004e14 <sbrk_aligned+0x40>)
 8004dd8:	000d      	movs	r5, r1
 8004dda:	6831      	ldr	r1, [r6, #0]
 8004ddc:	0004      	movs	r4, r0
 8004dde:	2900      	cmp	r1, #0
 8004de0:	d102      	bne.n	8004de8 <sbrk_aligned+0x14>
 8004de2:	f000 fccb 	bl	800577c <_sbrk_r>
 8004de6:	6030      	str	r0, [r6, #0]
 8004de8:	0029      	movs	r1, r5
 8004dea:	0020      	movs	r0, r4
 8004dec:	f000 fcc6 	bl	800577c <_sbrk_r>
 8004df0:	1c43      	adds	r3, r0, #1
 8004df2:	d00a      	beq.n	8004e0a <sbrk_aligned+0x36>
 8004df4:	2303      	movs	r3, #3
 8004df6:	1cc5      	adds	r5, r0, #3
 8004df8:	439d      	bics	r5, r3
 8004dfa:	42a8      	cmp	r0, r5
 8004dfc:	d007      	beq.n	8004e0e <sbrk_aligned+0x3a>
 8004dfe:	1a29      	subs	r1, r5, r0
 8004e00:	0020      	movs	r0, r4
 8004e02:	f000 fcbb 	bl	800577c <_sbrk_r>
 8004e06:	3001      	adds	r0, #1
 8004e08:	d101      	bne.n	8004e0e <sbrk_aligned+0x3a>
 8004e0a:	2501      	movs	r5, #1
 8004e0c:	426d      	negs	r5, r5
 8004e0e:	0028      	movs	r0, r5
 8004e10:	bd70      	pop	{r4, r5, r6, pc}
 8004e12:	46c0      	nop			; (mov r8, r8)
 8004e14:	2000031c 	.word	0x2000031c

08004e18 <_malloc_r>:
 8004e18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e1a:	2203      	movs	r2, #3
 8004e1c:	1ccb      	adds	r3, r1, #3
 8004e1e:	4393      	bics	r3, r2
 8004e20:	3308      	adds	r3, #8
 8004e22:	0006      	movs	r6, r0
 8004e24:	001f      	movs	r7, r3
 8004e26:	2b0c      	cmp	r3, #12
 8004e28:	d238      	bcs.n	8004e9c <_malloc_r+0x84>
 8004e2a:	270c      	movs	r7, #12
 8004e2c:	42b9      	cmp	r1, r7
 8004e2e:	d837      	bhi.n	8004ea0 <_malloc_r+0x88>
 8004e30:	0030      	movs	r0, r6
 8004e32:	f000 f873 	bl	8004f1c <__malloc_lock>
 8004e36:	4b38      	ldr	r3, [pc, #224]	; (8004f18 <_malloc_r+0x100>)
 8004e38:	9300      	str	r3, [sp, #0]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	001c      	movs	r4, r3
 8004e3e:	2c00      	cmp	r4, #0
 8004e40:	d133      	bne.n	8004eaa <_malloc_r+0x92>
 8004e42:	0039      	movs	r1, r7
 8004e44:	0030      	movs	r0, r6
 8004e46:	f7ff ffc5 	bl	8004dd4 <sbrk_aligned>
 8004e4a:	0004      	movs	r4, r0
 8004e4c:	1c43      	adds	r3, r0, #1
 8004e4e:	d15e      	bne.n	8004f0e <_malloc_r+0xf6>
 8004e50:	9b00      	ldr	r3, [sp, #0]
 8004e52:	681c      	ldr	r4, [r3, #0]
 8004e54:	0025      	movs	r5, r4
 8004e56:	2d00      	cmp	r5, #0
 8004e58:	d14e      	bne.n	8004ef8 <_malloc_r+0xe0>
 8004e5a:	2c00      	cmp	r4, #0
 8004e5c:	d051      	beq.n	8004f02 <_malloc_r+0xea>
 8004e5e:	6823      	ldr	r3, [r4, #0]
 8004e60:	0029      	movs	r1, r5
 8004e62:	18e3      	adds	r3, r4, r3
 8004e64:	0030      	movs	r0, r6
 8004e66:	9301      	str	r3, [sp, #4]
 8004e68:	f000 fc88 	bl	800577c <_sbrk_r>
 8004e6c:	9b01      	ldr	r3, [sp, #4]
 8004e6e:	4283      	cmp	r3, r0
 8004e70:	d147      	bne.n	8004f02 <_malloc_r+0xea>
 8004e72:	6823      	ldr	r3, [r4, #0]
 8004e74:	0030      	movs	r0, r6
 8004e76:	1aff      	subs	r7, r7, r3
 8004e78:	0039      	movs	r1, r7
 8004e7a:	f7ff ffab 	bl	8004dd4 <sbrk_aligned>
 8004e7e:	3001      	adds	r0, #1
 8004e80:	d03f      	beq.n	8004f02 <_malloc_r+0xea>
 8004e82:	6823      	ldr	r3, [r4, #0]
 8004e84:	19db      	adds	r3, r3, r7
 8004e86:	6023      	str	r3, [r4, #0]
 8004e88:	9b00      	ldr	r3, [sp, #0]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d040      	beq.n	8004f12 <_malloc_r+0xfa>
 8004e90:	685a      	ldr	r2, [r3, #4]
 8004e92:	42a2      	cmp	r2, r4
 8004e94:	d133      	bne.n	8004efe <_malloc_r+0xe6>
 8004e96:	2200      	movs	r2, #0
 8004e98:	605a      	str	r2, [r3, #4]
 8004e9a:	e014      	b.n	8004ec6 <_malloc_r+0xae>
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	dac5      	bge.n	8004e2c <_malloc_r+0x14>
 8004ea0:	230c      	movs	r3, #12
 8004ea2:	2500      	movs	r5, #0
 8004ea4:	6033      	str	r3, [r6, #0]
 8004ea6:	0028      	movs	r0, r5
 8004ea8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004eaa:	6821      	ldr	r1, [r4, #0]
 8004eac:	1bc9      	subs	r1, r1, r7
 8004eae:	d420      	bmi.n	8004ef2 <_malloc_r+0xda>
 8004eb0:	290b      	cmp	r1, #11
 8004eb2:	d918      	bls.n	8004ee6 <_malloc_r+0xce>
 8004eb4:	19e2      	adds	r2, r4, r7
 8004eb6:	6027      	str	r7, [r4, #0]
 8004eb8:	42a3      	cmp	r3, r4
 8004eba:	d112      	bne.n	8004ee2 <_malloc_r+0xca>
 8004ebc:	9b00      	ldr	r3, [sp, #0]
 8004ebe:	601a      	str	r2, [r3, #0]
 8004ec0:	6863      	ldr	r3, [r4, #4]
 8004ec2:	6011      	str	r1, [r2, #0]
 8004ec4:	6053      	str	r3, [r2, #4]
 8004ec6:	0030      	movs	r0, r6
 8004ec8:	0025      	movs	r5, r4
 8004eca:	f000 f82f 	bl	8004f2c <__malloc_unlock>
 8004ece:	2207      	movs	r2, #7
 8004ed0:	350b      	adds	r5, #11
 8004ed2:	1d23      	adds	r3, r4, #4
 8004ed4:	4395      	bics	r5, r2
 8004ed6:	1aea      	subs	r2, r5, r3
 8004ed8:	429d      	cmp	r5, r3
 8004eda:	d0e4      	beq.n	8004ea6 <_malloc_r+0x8e>
 8004edc:	1b5b      	subs	r3, r3, r5
 8004ede:	50a3      	str	r3, [r4, r2]
 8004ee0:	e7e1      	b.n	8004ea6 <_malloc_r+0x8e>
 8004ee2:	605a      	str	r2, [r3, #4]
 8004ee4:	e7ec      	b.n	8004ec0 <_malloc_r+0xa8>
 8004ee6:	6862      	ldr	r2, [r4, #4]
 8004ee8:	42a3      	cmp	r3, r4
 8004eea:	d1d5      	bne.n	8004e98 <_malloc_r+0x80>
 8004eec:	9b00      	ldr	r3, [sp, #0]
 8004eee:	601a      	str	r2, [r3, #0]
 8004ef0:	e7e9      	b.n	8004ec6 <_malloc_r+0xae>
 8004ef2:	0023      	movs	r3, r4
 8004ef4:	6864      	ldr	r4, [r4, #4]
 8004ef6:	e7a2      	b.n	8004e3e <_malloc_r+0x26>
 8004ef8:	002c      	movs	r4, r5
 8004efa:	686d      	ldr	r5, [r5, #4]
 8004efc:	e7ab      	b.n	8004e56 <_malloc_r+0x3e>
 8004efe:	0013      	movs	r3, r2
 8004f00:	e7c4      	b.n	8004e8c <_malloc_r+0x74>
 8004f02:	230c      	movs	r3, #12
 8004f04:	0030      	movs	r0, r6
 8004f06:	6033      	str	r3, [r6, #0]
 8004f08:	f000 f810 	bl	8004f2c <__malloc_unlock>
 8004f0c:	e7cb      	b.n	8004ea6 <_malloc_r+0x8e>
 8004f0e:	6027      	str	r7, [r4, #0]
 8004f10:	e7d9      	b.n	8004ec6 <_malloc_r+0xae>
 8004f12:	605b      	str	r3, [r3, #4]
 8004f14:	deff      	udf	#255	; 0xff
 8004f16:	46c0      	nop			; (mov r8, r8)
 8004f18:	20000318 	.word	0x20000318

08004f1c <__malloc_lock>:
 8004f1c:	b510      	push	{r4, lr}
 8004f1e:	4802      	ldr	r0, [pc, #8]	; (8004f28 <__malloc_lock+0xc>)
 8004f20:	f7ff ff0b 	bl	8004d3a <__retarget_lock_acquire_recursive>
 8004f24:	bd10      	pop	{r4, pc}
 8004f26:	46c0      	nop			; (mov r8, r8)
 8004f28:	20000314 	.word	0x20000314

08004f2c <__malloc_unlock>:
 8004f2c:	b510      	push	{r4, lr}
 8004f2e:	4802      	ldr	r0, [pc, #8]	; (8004f38 <__malloc_unlock+0xc>)
 8004f30:	f7ff ff04 	bl	8004d3c <__retarget_lock_release_recursive>
 8004f34:	bd10      	pop	{r4, pc}
 8004f36:	46c0      	nop			; (mov r8, r8)
 8004f38:	20000314 	.word	0x20000314

08004f3c <__sfputc_r>:
 8004f3c:	6893      	ldr	r3, [r2, #8]
 8004f3e:	b510      	push	{r4, lr}
 8004f40:	3b01      	subs	r3, #1
 8004f42:	6093      	str	r3, [r2, #8]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	da04      	bge.n	8004f52 <__sfputc_r+0x16>
 8004f48:	6994      	ldr	r4, [r2, #24]
 8004f4a:	42a3      	cmp	r3, r4
 8004f4c:	db07      	blt.n	8004f5e <__sfputc_r+0x22>
 8004f4e:	290a      	cmp	r1, #10
 8004f50:	d005      	beq.n	8004f5e <__sfputc_r+0x22>
 8004f52:	6813      	ldr	r3, [r2, #0]
 8004f54:	1c58      	adds	r0, r3, #1
 8004f56:	6010      	str	r0, [r2, #0]
 8004f58:	7019      	strb	r1, [r3, #0]
 8004f5a:	0008      	movs	r0, r1
 8004f5c:	bd10      	pop	{r4, pc}
 8004f5e:	f000 fb66 	bl	800562e <__swbuf_r>
 8004f62:	0001      	movs	r1, r0
 8004f64:	e7f9      	b.n	8004f5a <__sfputc_r+0x1e>

08004f66 <__sfputs_r>:
 8004f66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f68:	0006      	movs	r6, r0
 8004f6a:	000f      	movs	r7, r1
 8004f6c:	0014      	movs	r4, r2
 8004f6e:	18d5      	adds	r5, r2, r3
 8004f70:	42ac      	cmp	r4, r5
 8004f72:	d101      	bne.n	8004f78 <__sfputs_r+0x12>
 8004f74:	2000      	movs	r0, #0
 8004f76:	e007      	b.n	8004f88 <__sfputs_r+0x22>
 8004f78:	7821      	ldrb	r1, [r4, #0]
 8004f7a:	003a      	movs	r2, r7
 8004f7c:	0030      	movs	r0, r6
 8004f7e:	f7ff ffdd 	bl	8004f3c <__sfputc_r>
 8004f82:	3401      	adds	r4, #1
 8004f84:	1c43      	adds	r3, r0, #1
 8004f86:	d1f3      	bne.n	8004f70 <__sfputs_r+0xa>
 8004f88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004f8c <_vfiprintf_r>:
 8004f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f8e:	b0a1      	sub	sp, #132	; 0x84
 8004f90:	000f      	movs	r7, r1
 8004f92:	0015      	movs	r5, r2
 8004f94:	001e      	movs	r6, r3
 8004f96:	9003      	str	r0, [sp, #12]
 8004f98:	2800      	cmp	r0, #0
 8004f9a:	d004      	beq.n	8004fa6 <_vfiprintf_r+0x1a>
 8004f9c:	6a03      	ldr	r3, [r0, #32]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d101      	bne.n	8004fa6 <_vfiprintf_r+0x1a>
 8004fa2:	f7ff fdb9 	bl	8004b18 <__sinit>
 8004fa6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004fa8:	07db      	lsls	r3, r3, #31
 8004faa:	d405      	bmi.n	8004fb8 <_vfiprintf_r+0x2c>
 8004fac:	89bb      	ldrh	r3, [r7, #12]
 8004fae:	059b      	lsls	r3, r3, #22
 8004fb0:	d402      	bmi.n	8004fb8 <_vfiprintf_r+0x2c>
 8004fb2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8004fb4:	f7ff fec1 	bl	8004d3a <__retarget_lock_acquire_recursive>
 8004fb8:	89bb      	ldrh	r3, [r7, #12]
 8004fba:	071b      	lsls	r3, r3, #28
 8004fbc:	d502      	bpl.n	8004fc4 <_vfiprintf_r+0x38>
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d113      	bne.n	8004fec <_vfiprintf_r+0x60>
 8004fc4:	0039      	movs	r1, r7
 8004fc6:	9803      	ldr	r0, [sp, #12]
 8004fc8:	f000 fb74 	bl	80056b4 <__swsetup_r>
 8004fcc:	2800      	cmp	r0, #0
 8004fce:	d00d      	beq.n	8004fec <_vfiprintf_r+0x60>
 8004fd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004fd2:	07db      	lsls	r3, r3, #31
 8004fd4:	d503      	bpl.n	8004fde <_vfiprintf_r+0x52>
 8004fd6:	2001      	movs	r0, #1
 8004fd8:	4240      	negs	r0, r0
 8004fda:	b021      	add	sp, #132	; 0x84
 8004fdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fde:	89bb      	ldrh	r3, [r7, #12]
 8004fe0:	059b      	lsls	r3, r3, #22
 8004fe2:	d4f8      	bmi.n	8004fd6 <_vfiprintf_r+0x4a>
 8004fe4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8004fe6:	f7ff fea9 	bl	8004d3c <__retarget_lock_release_recursive>
 8004fea:	e7f4      	b.n	8004fd6 <_vfiprintf_r+0x4a>
 8004fec:	2300      	movs	r3, #0
 8004fee:	ac08      	add	r4, sp, #32
 8004ff0:	6163      	str	r3, [r4, #20]
 8004ff2:	3320      	adds	r3, #32
 8004ff4:	7663      	strb	r3, [r4, #25]
 8004ff6:	3310      	adds	r3, #16
 8004ff8:	76a3      	strb	r3, [r4, #26]
 8004ffa:	9607      	str	r6, [sp, #28]
 8004ffc:	002e      	movs	r6, r5
 8004ffe:	7833      	ldrb	r3, [r6, #0]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d001      	beq.n	8005008 <_vfiprintf_r+0x7c>
 8005004:	2b25      	cmp	r3, #37	; 0x25
 8005006:	d148      	bne.n	800509a <_vfiprintf_r+0x10e>
 8005008:	1b73      	subs	r3, r6, r5
 800500a:	9305      	str	r3, [sp, #20]
 800500c:	42ae      	cmp	r6, r5
 800500e:	d00b      	beq.n	8005028 <_vfiprintf_r+0x9c>
 8005010:	002a      	movs	r2, r5
 8005012:	0039      	movs	r1, r7
 8005014:	9803      	ldr	r0, [sp, #12]
 8005016:	f7ff ffa6 	bl	8004f66 <__sfputs_r>
 800501a:	3001      	adds	r0, #1
 800501c:	d100      	bne.n	8005020 <_vfiprintf_r+0x94>
 800501e:	e0af      	b.n	8005180 <_vfiprintf_r+0x1f4>
 8005020:	6963      	ldr	r3, [r4, #20]
 8005022:	9a05      	ldr	r2, [sp, #20]
 8005024:	189b      	adds	r3, r3, r2
 8005026:	6163      	str	r3, [r4, #20]
 8005028:	7833      	ldrb	r3, [r6, #0]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d100      	bne.n	8005030 <_vfiprintf_r+0xa4>
 800502e:	e0a7      	b.n	8005180 <_vfiprintf_r+0x1f4>
 8005030:	2201      	movs	r2, #1
 8005032:	2300      	movs	r3, #0
 8005034:	4252      	negs	r2, r2
 8005036:	6062      	str	r2, [r4, #4]
 8005038:	a904      	add	r1, sp, #16
 800503a:	3254      	adds	r2, #84	; 0x54
 800503c:	1852      	adds	r2, r2, r1
 800503e:	1c75      	adds	r5, r6, #1
 8005040:	6023      	str	r3, [r4, #0]
 8005042:	60e3      	str	r3, [r4, #12]
 8005044:	60a3      	str	r3, [r4, #8]
 8005046:	7013      	strb	r3, [r2, #0]
 8005048:	65a3      	str	r3, [r4, #88]	; 0x58
 800504a:	4b59      	ldr	r3, [pc, #356]	; (80051b0 <_vfiprintf_r+0x224>)
 800504c:	2205      	movs	r2, #5
 800504e:	0018      	movs	r0, r3
 8005050:	7829      	ldrb	r1, [r5, #0]
 8005052:	9305      	str	r3, [sp, #20]
 8005054:	f000 fba4 	bl	80057a0 <memchr>
 8005058:	1c6e      	adds	r6, r5, #1
 800505a:	2800      	cmp	r0, #0
 800505c:	d11f      	bne.n	800509e <_vfiprintf_r+0x112>
 800505e:	6822      	ldr	r2, [r4, #0]
 8005060:	06d3      	lsls	r3, r2, #27
 8005062:	d504      	bpl.n	800506e <_vfiprintf_r+0xe2>
 8005064:	2353      	movs	r3, #83	; 0x53
 8005066:	a904      	add	r1, sp, #16
 8005068:	185b      	adds	r3, r3, r1
 800506a:	2120      	movs	r1, #32
 800506c:	7019      	strb	r1, [r3, #0]
 800506e:	0713      	lsls	r3, r2, #28
 8005070:	d504      	bpl.n	800507c <_vfiprintf_r+0xf0>
 8005072:	2353      	movs	r3, #83	; 0x53
 8005074:	a904      	add	r1, sp, #16
 8005076:	185b      	adds	r3, r3, r1
 8005078:	212b      	movs	r1, #43	; 0x2b
 800507a:	7019      	strb	r1, [r3, #0]
 800507c:	782b      	ldrb	r3, [r5, #0]
 800507e:	2b2a      	cmp	r3, #42	; 0x2a
 8005080:	d016      	beq.n	80050b0 <_vfiprintf_r+0x124>
 8005082:	002e      	movs	r6, r5
 8005084:	2100      	movs	r1, #0
 8005086:	200a      	movs	r0, #10
 8005088:	68e3      	ldr	r3, [r4, #12]
 800508a:	7832      	ldrb	r2, [r6, #0]
 800508c:	1c75      	adds	r5, r6, #1
 800508e:	3a30      	subs	r2, #48	; 0x30
 8005090:	2a09      	cmp	r2, #9
 8005092:	d94e      	bls.n	8005132 <_vfiprintf_r+0x1a6>
 8005094:	2900      	cmp	r1, #0
 8005096:	d111      	bne.n	80050bc <_vfiprintf_r+0x130>
 8005098:	e017      	b.n	80050ca <_vfiprintf_r+0x13e>
 800509a:	3601      	adds	r6, #1
 800509c:	e7af      	b.n	8004ffe <_vfiprintf_r+0x72>
 800509e:	9b05      	ldr	r3, [sp, #20]
 80050a0:	6822      	ldr	r2, [r4, #0]
 80050a2:	1ac0      	subs	r0, r0, r3
 80050a4:	2301      	movs	r3, #1
 80050a6:	4083      	lsls	r3, r0
 80050a8:	4313      	orrs	r3, r2
 80050aa:	0035      	movs	r5, r6
 80050ac:	6023      	str	r3, [r4, #0]
 80050ae:	e7cc      	b.n	800504a <_vfiprintf_r+0xbe>
 80050b0:	9b07      	ldr	r3, [sp, #28]
 80050b2:	1d19      	adds	r1, r3, #4
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	9107      	str	r1, [sp, #28]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	db01      	blt.n	80050c0 <_vfiprintf_r+0x134>
 80050bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80050be:	e004      	b.n	80050ca <_vfiprintf_r+0x13e>
 80050c0:	425b      	negs	r3, r3
 80050c2:	60e3      	str	r3, [r4, #12]
 80050c4:	2302      	movs	r3, #2
 80050c6:	4313      	orrs	r3, r2
 80050c8:	6023      	str	r3, [r4, #0]
 80050ca:	7833      	ldrb	r3, [r6, #0]
 80050cc:	2b2e      	cmp	r3, #46	; 0x2e
 80050ce:	d10a      	bne.n	80050e6 <_vfiprintf_r+0x15a>
 80050d0:	7873      	ldrb	r3, [r6, #1]
 80050d2:	2b2a      	cmp	r3, #42	; 0x2a
 80050d4:	d135      	bne.n	8005142 <_vfiprintf_r+0x1b6>
 80050d6:	9b07      	ldr	r3, [sp, #28]
 80050d8:	3602      	adds	r6, #2
 80050da:	1d1a      	adds	r2, r3, #4
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	9207      	str	r2, [sp, #28]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	db2b      	blt.n	800513c <_vfiprintf_r+0x1b0>
 80050e4:	9309      	str	r3, [sp, #36]	; 0x24
 80050e6:	4d33      	ldr	r5, [pc, #204]	; (80051b4 <_vfiprintf_r+0x228>)
 80050e8:	2203      	movs	r2, #3
 80050ea:	0028      	movs	r0, r5
 80050ec:	7831      	ldrb	r1, [r6, #0]
 80050ee:	f000 fb57 	bl	80057a0 <memchr>
 80050f2:	2800      	cmp	r0, #0
 80050f4:	d006      	beq.n	8005104 <_vfiprintf_r+0x178>
 80050f6:	2340      	movs	r3, #64	; 0x40
 80050f8:	1b40      	subs	r0, r0, r5
 80050fa:	4083      	lsls	r3, r0
 80050fc:	6822      	ldr	r2, [r4, #0]
 80050fe:	3601      	adds	r6, #1
 8005100:	4313      	orrs	r3, r2
 8005102:	6023      	str	r3, [r4, #0]
 8005104:	7831      	ldrb	r1, [r6, #0]
 8005106:	2206      	movs	r2, #6
 8005108:	482b      	ldr	r0, [pc, #172]	; (80051b8 <_vfiprintf_r+0x22c>)
 800510a:	1c75      	adds	r5, r6, #1
 800510c:	7621      	strb	r1, [r4, #24]
 800510e:	f000 fb47 	bl	80057a0 <memchr>
 8005112:	2800      	cmp	r0, #0
 8005114:	d043      	beq.n	800519e <_vfiprintf_r+0x212>
 8005116:	4b29      	ldr	r3, [pc, #164]	; (80051bc <_vfiprintf_r+0x230>)
 8005118:	2b00      	cmp	r3, #0
 800511a:	d125      	bne.n	8005168 <_vfiprintf_r+0x1dc>
 800511c:	2207      	movs	r2, #7
 800511e:	9b07      	ldr	r3, [sp, #28]
 8005120:	3307      	adds	r3, #7
 8005122:	4393      	bics	r3, r2
 8005124:	3308      	adds	r3, #8
 8005126:	9307      	str	r3, [sp, #28]
 8005128:	6963      	ldr	r3, [r4, #20]
 800512a:	9a04      	ldr	r2, [sp, #16]
 800512c:	189b      	adds	r3, r3, r2
 800512e:	6163      	str	r3, [r4, #20]
 8005130:	e764      	b.n	8004ffc <_vfiprintf_r+0x70>
 8005132:	4343      	muls	r3, r0
 8005134:	002e      	movs	r6, r5
 8005136:	2101      	movs	r1, #1
 8005138:	189b      	adds	r3, r3, r2
 800513a:	e7a6      	b.n	800508a <_vfiprintf_r+0xfe>
 800513c:	2301      	movs	r3, #1
 800513e:	425b      	negs	r3, r3
 8005140:	e7d0      	b.n	80050e4 <_vfiprintf_r+0x158>
 8005142:	2300      	movs	r3, #0
 8005144:	200a      	movs	r0, #10
 8005146:	001a      	movs	r2, r3
 8005148:	3601      	adds	r6, #1
 800514a:	6063      	str	r3, [r4, #4]
 800514c:	7831      	ldrb	r1, [r6, #0]
 800514e:	1c75      	adds	r5, r6, #1
 8005150:	3930      	subs	r1, #48	; 0x30
 8005152:	2909      	cmp	r1, #9
 8005154:	d903      	bls.n	800515e <_vfiprintf_r+0x1d2>
 8005156:	2b00      	cmp	r3, #0
 8005158:	d0c5      	beq.n	80050e6 <_vfiprintf_r+0x15a>
 800515a:	9209      	str	r2, [sp, #36]	; 0x24
 800515c:	e7c3      	b.n	80050e6 <_vfiprintf_r+0x15a>
 800515e:	4342      	muls	r2, r0
 8005160:	002e      	movs	r6, r5
 8005162:	2301      	movs	r3, #1
 8005164:	1852      	adds	r2, r2, r1
 8005166:	e7f1      	b.n	800514c <_vfiprintf_r+0x1c0>
 8005168:	aa07      	add	r2, sp, #28
 800516a:	9200      	str	r2, [sp, #0]
 800516c:	0021      	movs	r1, r4
 800516e:	003a      	movs	r2, r7
 8005170:	4b13      	ldr	r3, [pc, #76]	; (80051c0 <_vfiprintf_r+0x234>)
 8005172:	9803      	ldr	r0, [sp, #12]
 8005174:	e000      	b.n	8005178 <_vfiprintf_r+0x1ec>
 8005176:	bf00      	nop
 8005178:	9004      	str	r0, [sp, #16]
 800517a:	9b04      	ldr	r3, [sp, #16]
 800517c:	3301      	adds	r3, #1
 800517e:	d1d3      	bne.n	8005128 <_vfiprintf_r+0x19c>
 8005180:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005182:	07db      	lsls	r3, r3, #31
 8005184:	d405      	bmi.n	8005192 <_vfiprintf_r+0x206>
 8005186:	89bb      	ldrh	r3, [r7, #12]
 8005188:	059b      	lsls	r3, r3, #22
 800518a:	d402      	bmi.n	8005192 <_vfiprintf_r+0x206>
 800518c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800518e:	f7ff fdd5 	bl	8004d3c <__retarget_lock_release_recursive>
 8005192:	89bb      	ldrh	r3, [r7, #12]
 8005194:	065b      	lsls	r3, r3, #25
 8005196:	d500      	bpl.n	800519a <_vfiprintf_r+0x20e>
 8005198:	e71d      	b.n	8004fd6 <_vfiprintf_r+0x4a>
 800519a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800519c:	e71d      	b.n	8004fda <_vfiprintf_r+0x4e>
 800519e:	aa07      	add	r2, sp, #28
 80051a0:	9200      	str	r2, [sp, #0]
 80051a2:	0021      	movs	r1, r4
 80051a4:	003a      	movs	r2, r7
 80051a6:	4b06      	ldr	r3, [pc, #24]	; (80051c0 <_vfiprintf_r+0x234>)
 80051a8:	9803      	ldr	r0, [sp, #12]
 80051aa:	f000 f87b 	bl	80052a4 <_printf_i>
 80051ae:	e7e3      	b.n	8005178 <_vfiprintf_r+0x1ec>
 80051b0:	08005ad5 	.word	0x08005ad5
 80051b4:	08005adb 	.word	0x08005adb
 80051b8:	08005adf 	.word	0x08005adf
 80051bc:	00000000 	.word	0x00000000
 80051c0:	08004f67 	.word	0x08004f67

080051c4 <_printf_common>:
 80051c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80051c6:	0016      	movs	r6, r2
 80051c8:	9301      	str	r3, [sp, #4]
 80051ca:	688a      	ldr	r2, [r1, #8]
 80051cc:	690b      	ldr	r3, [r1, #16]
 80051ce:	000c      	movs	r4, r1
 80051d0:	9000      	str	r0, [sp, #0]
 80051d2:	4293      	cmp	r3, r2
 80051d4:	da00      	bge.n	80051d8 <_printf_common+0x14>
 80051d6:	0013      	movs	r3, r2
 80051d8:	0022      	movs	r2, r4
 80051da:	6033      	str	r3, [r6, #0]
 80051dc:	3243      	adds	r2, #67	; 0x43
 80051de:	7812      	ldrb	r2, [r2, #0]
 80051e0:	2a00      	cmp	r2, #0
 80051e2:	d001      	beq.n	80051e8 <_printf_common+0x24>
 80051e4:	3301      	adds	r3, #1
 80051e6:	6033      	str	r3, [r6, #0]
 80051e8:	6823      	ldr	r3, [r4, #0]
 80051ea:	069b      	lsls	r3, r3, #26
 80051ec:	d502      	bpl.n	80051f4 <_printf_common+0x30>
 80051ee:	6833      	ldr	r3, [r6, #0]
 80051f0:	3302      	adds	r3, #2
 80051f2:	6033      	str	r3, [r6, #0]
 80051f4:	6822      	ldr	r2, [r4, #0]
 80051f6:	2306      	movs	r3, #6
 80051f8:	0015      	movs	r5, r2
 80051fa:	401d      	ands	r5, r3
 80051fc:	421a      	tst	r2, r3
 80051fe:	d027      	beq.n	8005250 <_printf_common+0x8c>
 8005200:	0023      	movs	r3, r4
 8005202:	3343      	adds	r3, #67	; 0x43
 8005204:	781b      	ldrb	r3, [r3, #0]
 8005206:	1e5a      	subs	r2, r3, #1
 8005208:	4193      	sbcs	r3, r2
 800520a:	6822      	ldr	r2, [r4, #0]
 800520c:	0692      	lsls	r2, r2, #26
 800520e:	d430      	bmi.n	8005272 <_printf_common+0xae>
 8005210:	0022      	movs	r2, r4
 8005212:	9901      	ldr	r1, [sp, #4]
 8005214:	9800      	ldr	r0, [sp, #0]
 8005216:	9d08      	ldr	r5, [sp, #32]
 8005218:	3243      	adds	r2, #67	; 0x43
 800521a:	47a8      	blx	r5
 800521c:	3001      	adds	r0, #1
 800521e:	d025      	beq.n	800526c <_printf_common+0xa8>
 8005220:	2206      	movs	r2, #6
 8005222:	6823      	ldr	r3, [r4, #0]
 8005224:	2500      	movs	r5, #0
 8005226:	4013      	ands	r3, r2
 8005228:	2b04      	cmp	r3, #4
 800522a:	d105      	bne.n	8005238 <_printf_common+0x74>
 800522c:	6833      	ldr	r3, [r6, #0]
 800522e:	68e5      	ldr	r5, [r4, #12]
 8005230:	1aed      	subs	r5, r5, r3
 8005232:	43eb      	mvns	r3, r5
 8005234:	17db      	asrs	r3, r3, #31
 8005236:	401d      	ands	r5, r3
 8005238:	68a3      	ldr	r3, [r4, #8]
 800523a:	6922      	ldr	r2, [r4, #16]
 800523c:	4293      	cmp	r3, r2
 800523e:	dd01      	ble.n	8005244 <_printf_common+0x80>
 8005240:	1a9b      	subs	r3, r3, r2
 8005242:	18ed      	adds	r5, r5, r3
 8005244:	2600      	movs	r6, #0
 8005246:	42b5      	cmp	r5, r6
 8005248:	d120      	bne.n	800528c <_printf_common+0xc8>
 800524a:	2000      	movs	r0, #0
 800524c:	e010      	b.n	8005270 <_printf_common+0xac>
 800524e:	3501      	adds	r5, #1
 8005250:	68e3      	ldr	r3, [r4, #12]
 8005252:	6832      	ldr	r2, [r6, #0]
 8005254:	1a9b      	subs	r3, r3, r2
 8005256:	42ab      	cmp	r3, r5
 8005258:	ddd2      	ble.n	8005200 <_printf_common+0x3c>
 800525a:	0022      	movs	r2, r4
 800525c:	2301      	movs	r3, #1
 800525e:	9901      	ldr	r1, [sp, #4]
 8005260:	9800      	ldr	r0, [sp, #0]
 8005262:	9f08      	ldr	r7, [sp, #32]
 8005264:	3219      	adds	r2, #25
 8005266:	47b8      	blx	r7
 8005268:	3001      	adds	r0, #1
 800526a:	d1f0      	bne.n	800524e <_printf_common+0x8a>
 800526c:	2001      	movs	r0, #1
 800526e:	4240      	negs	r0, r0
 8005270:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005272:	2030      	movs	r0, #48	; 0x30
 8005274:	18e1      	adds	r1, r4, r3
 8005276:	3143      	adds	r1, #67	; 0x43
 8005278:	7008      	strb	r0, [r1, #0]
 800527a:	0021      	movs	r1, r4
 800527c:	1c5a      	adds	r2, r3, #1
 800527e:	3145      	adds	r1, #69	; 0x45
 8005280:	7809      	ldrb	r1, [r1, #0]
 8005282:	18a2      	adds	r2, r4, r2
 8005284:	3243      	adds	r2, #67	; 0x43
 8005286:	3302      	adds	r3, #2
 8005288:	7011      	strb	r1, [r2, #0]
 800528a:	e7c1      	b.n	8005210 <_printf_common+0x4c>
 800528c:	0022      	movs	r2, r4
 800528e:	2301      	movs	r3, #1
 8005290:	9901      	ldr	r1, [sp, #4]
 8005292:	9800      	ldr	r0, [sp, #0]
 8005294:	9f08      	ldr	r7, [sp, #32]
 8005296:	321a      	adds	r2, #26
 8005298:	47b8      	blx	r7
 800529a:	3001      	adds	r0, #1
 800529c:	d0e6      	beq.n	800526c <_printf_common+0xa8>
 800529e:	3601      	adds	r6, #1
 80052a0:	e7d1      	b.n	8005246 <_printf_common+0x82>
	...

080052a4 <_printf_i>:
 80052a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052a6:	b08b      	sub	sp, #44	; 0x2c
 80052a8:	9206      	str	r2, [sp, #24]
 80052aa:	000a      	movs	r2, r1
 80052ac:	3243      	adds	r2, #67	; 0x43
 80052ae:	9307      	str	r3, [sp, #28]
 80052b0:	9005      	str	r0, [sp, #20]
 80052b2:	9204      	str	r2, [sp, #16]
 80052b4:	7e0a      	ldrb	r2, [r1, #24]
 80052b6:	000c      	movs	r4, r1
 80052b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80052ba:	2a78      	cmp	r2, #120	; 0x78
 80052bc:	d809      	bhi.n	80052d2 <_printf_i+0x2e>
 80052be:	2a62      	cmp	r2, #98	; 0x62
 80052c0:	d80b      	bhi.n	80052da <_printf_i+0x36>
 80052c2:	2a00      	cmp	r2, #0
 80052c4:	d100      	bne.n	80052c8 <_printf_i+0x24>
 80052c6:	e0be      	b.n	8005446 <_printf_i+0x1a2>
 80052c8:	497c      	ldr	r1, [pc, #496]	; (80054bc <_printf_i+0x218>)
 80052ca:	9103      	str	r1, [sp, #12]
 80052cc:	2a58      	cmp	r2, #88	; 0x58
 80052ce:	d100      	bne.n	80052d2 <_printf_i+0x2e>
 80052d0:	e093      	b.n	80053fa <_printf_i+0x156>
 80052d2:	0026      	movs	r6, r4
 80052d4:	3642      	adds	r6, #66	; 0x42
 80052d6:	7032      	strb	r2, [r6, #0]
 80052d8:	e022      	b.n	8005320 <_printf_i+0x7c>
 80052da:	0010      	movs	r0, r2
 80052dc:	3863      	subs	r0, #99	; 0x63
 80052de:	2815      	cmp	r0, #21
 80052e0:	d8f7      	bhi.n	80052d2 <_printf_i+0x2e>
 80052e2:	f7fa ff11 	bl	8000108 <__gnu_thumb1_case_shi>
 80052e6:	0016      	.short	0x0016
 80052e8:	fff6001f 	.word	0xfff6001f
 80052ec:	fff6fff6 	.word	0xfff6fff6
 80052f0:	001ffff6 	.word	0x001ffff6
 80052f4:	fff6fff6 	.word	0xfff6fff6
 80052f8:	fff6fff6 	.word	0xfff6fff6
 80052fc:	003600a3 	.word	0x003600a3
 8005300:	fff60083 	.word	0xfff60083
 8005304:	00b4fff6 	.word	0x00b4fff6
 8005308:	0036fff6 	.word	0x0036fff6
 800530c:	fff6fff6 	.word	0xfff6fff6
 8005310:	0087      	.short	0x0087
 8005312:	0026      	movs	r6, r4
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	3642      	adds	r6, #66	; 0x42
 8005318:	1d11      	adds	r1, r2, #4
 800531a:	6019      	str	r1, [r3, #0]
 800531c:	6813      	ldr	r3, [r2, #0]
 800531e:	7033      	strb	r3, [r6, #0]
 8005320:	2301      	movs	r3, #1
 8005322:	e0a2      	b.n	800546a <_printf_i+0x1c6>
 8005324:	6818      	ldr	r0, [r3, #0]
 8005326:	6809      	ldr	r1, [r1, #0]
 8005328:	1d02      	adds	r2, r0, #4
 800532a:	060d      	lsls	r5, r1, #24
 800532c:	d50b      	bpl.n	8005346 <_printf_i+0xa2>
 800532e:	6805      	ldr	r5, [r0, #0]
 8005330:	601a      	str	r2, [r3, #0]
 8005332:	2d00      	cmp	r5, #0
 8005334:	da03      	bge.n	800533e <_printf_i+0x9a>
 8005336:	232d      	movs	r3, #45	; 0x2d
 8005338:	9a04      	ldr	r2, [sp, #16]
 800533a:	426d      	negs	r5, r5
 800533c:	7013      	strb	r3, [r2, #0]
 800533e:	4b5f      	ldr	r3, [pc, #380]	; (80054bc <_printf_i+0x218>)
 8005340:	270a      	movs	r7, #10
 8005342:	9303      	str	r3, [sp, #12]
 8005344:	e01b      	b.n	800537e <_printf_i+0xda>
 8005346:	6805      	ldr	r5, [r0, #0]
 8005348:	601a      	str	r2, [r3, #0]
 800534a:	0649      	lsls	r1, r1, #25
 800534c:	d5f1      	bpl.n	8005332 <_printf_i+0x8e>
 800534e:	b22d      	sxth	r5, r5
 8005350:	e7ef      	b.n	8005332 <_printf_i+0x8e>
 8005352:	680d      	ldr	r5, [r1, #0]
 8005354:	6819      	ldr	r1, [r3, #0]
 8005356:	1d08      	adds	r0, r1, #4
 8005358:	6018      	str	r0, [r3, #0]
 800535a:	062e      	lsls	r6, r5, #24
 800535c:	d501      	bpl.n	8005362 <_printf_i+0xbe>
 800535e:	680d      	ldr	r5, [r1, #0]
 8005360:	e003      	b.n	800536a <_printf_i+0xc6>
 8005362:	066d      	lsls	r5, r5, #25
 8005364:	d5fb      	bpl.n	800535e <_printf_i+0xba>
 8005366:	680d      	ldr	r5, [r1, #0]
 8005368:	b2ad      	uxth	r5, r5
 800536a:	4b54      	ldr	r3, [pc, #336]	; (80054bc <_printf_i+0x218>)
 800536c:	2708      	movs	r7, #8
 800536e:	9303      	str	r3, [sp, #12]
 8005370:	2a6f      	cmp	r2, #111	; 0x6f
 8005372:	d000      	beq.n	8005376 <_printf_i+0xd2>
 8005374:	3702      	adds	r7, #2
 8005376:	0023      	movs	r3, r4
 8005378:	2200      	movs	r2, #0
 800537a:	3343      	adds	r3, #67	; 0x43
 800537c:	701a      	strb	r2, [r3, #0]
 800537e:	6863      	ldr	r3, [r4, #4]
 8005380:	60a3      	str	r3, [r4, #8]
 8005382:	2b00      	cmp	r3, #0
 8005384:	db03      	blt.n	800538e <_printf_i+0xea>
 8005386:	2104      	movs	r1, #4
 8005388:	6822      	ldr	r2, [r4, #0]
 800538a:	438a      	bics	r2, r1
 800538c:	6022      	str	r2, [r4, #0]
 800538e:	2d00      	cmp	r5, #0
 8005390:	d102      	bne.n	8005398 <_printf_i+0xf4>
 8005392:	9e04      	ldr	r6, [sp, #16]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d00c      	beq.n	80053b2 <_printf_i+0x10e>
 8005398:	9e04      	ldr	r6, [sp, #16]
 800539a:	0028      	movs	r0, r5
 800539c:	0039      	movs	r1, r7
 800539e:	f7fa ff43 	bl	8000228 <__aeabi_uidivmod>
 80053a2:	9b03      	ldr	r3, [sp, #12]
 80053a4:	3e01      	subs	r6, #1
 80053a6:	5c5b      	ldrb	r3, [r3, r1]
 80053a8:	7033      	strb	r3, [r6, #0]
 80053aa:	002b      	movs	r3, r5
 80053ac:	0005      	movs	r5, r0
 80053ae:	429f      	cmp	r7, r3
 80053b0:	d9f3      	bls.n	800539a <_printf_i+0xf6>
 80053b2:	2f08      	cmp	r7, #8
 80053b4:	d109      	bne.n	80053ca <_printf_i+0x126>
 80053b6:	6823      	ldr	r3, [r4, #0]
 80053b8:	07db      	lsls	r3, r3, #31
 80053ba:	d506      	bpl.n	80053ca <_printf_i+0x126>
 80053bc:	6862      	ldr	r2, [r4, #4]
 80053be:	6923      	ldr	r3, [r4, #16]
 80053c0:	429a      	cmp	r2, r3
 80053c2:	dc02      	bgt.n	80053ca <_printf_i+0x126>
 80053c4:	2330      	movs	r3, #48	; 0x30
 80053c6:	3e01      	subs	r6, #1
 80053c8:	7033      	strb	r3, [r6, #0]
 80053ca:	9b04      	ldr	r3, [sp, #16]
 80053cc:	1b9b      	subs	r3, r3, r6
 80053ce:	6123      	str	r3, [r4, #16]
 80053d0:	9b07      	ldr	r3, [sp, #28]
 80053d2:	0021      	movs	r1, r4
 80053d4:	9300      	str	r3, [sp, #0]
 80053d6:	9805      	ldr	r0, [sp, #20]
 80053d8:	9b06      	ldr	r3, [sp, #24]
 80053da:	aa09      	add	r2, sp, #36	; 0x24
 80053dc:	f7ff fef2 	bl	80051c4 <_printf_common>
 80053e0:	3001      	adds	r0, #1
 80053e2:	d147      	bne.n	8005474 <_printf_i+0x1d0>
 80053e4:	2001      	movs	r0, #1
 80053e6:	4240      	negs	r0, r0
 80053e8:	b00b      	add	sp, #44	; 0x2c
 80053ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053ec:	2220      	movs	r2, #32
 80053ee:	6809      	ldr	r1, [r1, #0]
 80053f0:	430a      	orrs	r2, r1
 80053f2:	6022      	str	r2, [r4, #0]
 80053f4:	2278      	movs	r2, #120	; 0x78
 80053f6:	4932      	ldr	r1, [pc, #200]	; (80054c0 <_printf_i+0x21c>)
 80053f8:	9103      	str	r1, [sp, #12]
 80053fa:	0021      	movs	r1, r4
 80053fc:	3145      	adds	r1, #69	; 0x45
 80053fe:	700a      	strb	r2, [r1, #0]
 8005400:	6819      	ldr	r1, [r3, #0]
 8005402:	6822      	ldr	r2, [r4, #0]
 8005404:	c920      	ldmia	r1!, {r5}
 8005406:	0610      	lsls	r0, r2, #24
 8005408:	d402      	bmi.n	8005410 <_printf_i+0x16c>
 800540a:	0650      	lsls	r0, r2, #25
 800540c:	d500      	bpl.n	8005410 <_printf_i+0x16c>
 800540e:	b2ad      	uxth	r5, r5
 8005410:	6019      	str	r1, [r3, #0]
 8005412:	07d3      	lsls	r3, r2, #31
 8005414:	d502      	bpl.n	800541c <_printf_i+0x178>
 8005416:	2320      	movs	r3, #32
 8005418:	4313      	orrs	r3, r2
 800541a:	6023      	str	r3, [r4, #0]
 800541c:	2710      	movs	r7, #16
 800541e:	2d00      	cmp	r5, #0
 8005420:	d1a9      	bne.n	8005376 <_printf_i+0xd2>
 8005422:	2220      	movs	r2, #32
 8005424:	6823      	ldr	r3, [r4, #0]
 8005426:	4393      	bics	r3, r2
 8005428:	6023      	str	r3, [r4, #0]
 800542a:	e7a4      	b.n	8005376 <_printf_i+0xd2>
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	680d      	ldr	r5, [r1, #0]
 8005430:	1d10      	adds	r0, r2, #4
 8005432:	6949      	ldr	r1, [r1, #20]
 8005434:	6018      	str	r0, [r3, #0]
 8005436:	6813      	ldr	r3, [r2, #0]
 8005438:	062e      	lsls	r6, r5, #24
 800543a:	d501      	bpl.n	8005440 <_printf_i+0x19c>
 800543c:	6019      	str	r1, [r3, #0]
 800543e:	e002      	b.n	8005446 <_printf_i+0x1a2>
 8005440:	066d      	lsls	r5, r5, #25
 8005442:	d5fb      	bpl.n	800543c <_printf_i+0x198>
 8005444:	8019      	strh	r1, [r3, #0]
 8005446:	2300      	movs	r3, #0
 8005448:	9e04      	ldr	r6, [sp, #16]
 800544a:	6123      	str	r3, [r4, #16]
 800544c:	e7c0      	b.n	80053d0 <_printf_i+0x12c>
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	1d11      	adds	r1, r2, #4
 8005452:	6019      	str	r1, [r3, #0]
 8005454:	6816      	ldr	r6, [r2, #0]
 8005456:	2100      	movs	r1, #0
 8005458:	0030      	movs	r0, r6
 800545a:	6862      	ldr	r2, [r4, #4]
 800545c:	f000 f9a0 	bl	80057a0 <memchr>
 8005460:	2800      	cmp	r0, #0
 8005462:	d001      	beq.n	8005468 <_printf_i+0x1c4>
 8005464:	1b80      	subs	r0, r0, r6
 8005466:	6060      	str	r0, [r4, #4]
 8005468:	6863      	ldr	r3, [r4, #4]
 800546a:	6123      	str	r3, [r4, #16]
 800546c:	2300      	movs	r3, #0
 800546e:	9a04      	ldr	r2, [sp, #16]
 8005470:	7013      	strb	r3, [r2, #0]
 8005472:	e7ad      	b.n	80053d0 <_printf_i+0x12c>
 8005474:	0032      	movs	r2, r6
 8005476:	6923      	ldr	r3, [r4, #16]
 8005478:	9906      	ldr	r1, [sp, #24]
 800547a:	9805      	ldr	r0, [sp, #20]
 800547c:	9d07      	ldr	r5, [sp, #28]
 800547e:	47a8      	blx	r5
 8005480:	3001      	adds	r0, #1
 8005482:	d0af      	beq.n	80053e4 <_printf_i+0x140>
 8005484:	6823      	ldr	r3, [r4, #0]
 8005486:	079b      	lsls	r3, r3, #30
 8005488:	d415      	bmi.n	80054b6 <_printf_i+0x212>
 800548a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800548c:	68e0      	ldr	r0, [r4, #12]
 800548e:	4298      	cmp	r0, r3
 8005490:	daaa      	bge.n	80053e8 <_printf_i+0x144>
 8005492:	0018      	movs	r0, r3
 8005494:	e7a8      	b.n	80053e8 <_printf_i+0x144>
 8005496:	0022      	movs	r2, r4
 8005498:	2301      	movs	r3, #1
 800549a:	9906      	ldr	r1, [sp, #24]
 800549c:	9805      	ldr	r0, [sp, #20]
 800549e:	9e07      	ldr	r6, [sp, #28]
 80054a0:	3219      	adds	r2, #25
 80054a2:	47b0      	blx	r6
 80054a4:	3001      	adds	r0, #1
 80054a6:	d09d      	beq.n	80053e4 <_printf_i+0x140>
 80054a8:	3501      	adds	r5, #1
 80054aa:	68e3      	ldr	r3, [r4, #12]
 80054ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80054ae:	1a9b      	subs	r3, r3, r2
 80054b0:	42ab      	cmp	r3, r5
 80054b2:	dcf0      	bgt.n	8005496 <_printf_i+0x1f2>
 80054b4:	e7e9      	b.n	800548a <_printf_i+0x1e6>
 80054b6:	2500      	movs	r5, #0
 80054b8:	e7f7      	b.n	80054aa <_printf_i+0x206>
 80054ba:	46c0      	nop			; (mov r8, r8)
 80054bc:	08005ae6 	.word	0x08005ae6
 80054c0:	08005af7 	.word	0x08005af7

080054c4 <__sflush_r>:
 80054c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80054c6:	898b      	ldrh	r3, [r1, #12]
 80054c8:	0005      	movs	r5, r0
 80054ca:	000c      	movs	r4, r1
 80054cc:	071a      	lsls	r2, r3, #28
 80054ce:	d45c      	bmi.n	800558a <__sflush_r+0xc6>
 80054d0:	684a      	ldr	r2, [r1, #4]
 80054d2:	2a00      	cmp	r2, #0
 80054d4:	dc04      	bgt.n	80054e0 <__sflush_r+0x1c>
 80054d6:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80054d8:	2a00      	cmp	r2, #0
 80054da:	dc01      	bgt.n	80054e0 <__sflush_r+0x1c>
 80054dc:	2000      	movs	r0, #0
 80054de:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80054e0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80054e2:	2f00      	cmp	r7, #0
 80054e4:	d0fa      	beq.n	80054dc <__sflush_r+0x18>
 80054e6:	2200      	movs	r2, #0
 80054e8:	2080      	movs	r0, #128	; 0x80
 80054ea:	682e      	ldr	r6, [r5, #0]
 80054ec:	602a      	str	r2, [r5, #0]
 80054ee:	001a      	movs	r2, r3
 80054f0:	0140      	lsls	r0, r0, #5
 80054f2:	6a21      	ldr	r1, [r4, #32]
 80054f4:	4002      	ands	r2, r0
 80054f6:	4203      	tst	r3, r0
 80054f8:	d034      	beq.n	8005564 <__sflush_r+0xa0>
 80054fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80054fc:	89a3      	ldrh	r3, [r4, #12]
 80054fe:	075b      	lsls	r3, r3, #29
 8005500:	d506      	bpl.n	8005510 <__sflush_r+0x4c>
 8005502:	6863      	ldr	r3, [r4, #4]
 8005504:	1ac0      	subs	r0, r0, r3
 8005506:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005508:	2b00      	cmp	r3, #0
 800550a:	d001      	beq.n	8005510 <__sflush_r+0x4c>
 800550c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800550e:	1ac0      	subs	r0, r0, r3
 8005510:	0002      	movs	r2, r0
 8005512:	2300      	movs	r3, #0
 8005514:	0028      	movs	r0, r5
 8005516:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8005518:	6a21      	ldr	r1, [r4, #32]
 800551a:	47b8      	blx	r7
 800551c:	89a2      	ldrh	r2, [r4, #12]
 800551e:	1c43      	adds	r3, r0, #1
 8005520:	d106      	bne.n	8005530 <__sflush_r+0x6c>
 8005522:	6829      	ldr	r1, [r5, #0]
 8005524:	291d      	cmp	r1, #29
 8005526:	d82c      	bhi.n	8005582 <__sflush_r+0xbe>
 8005528:	4b2a      	ldr	r3, [pc, #168]	; (80055d4 <__sflush_r+0x110>)
 800552a:	410b      	asrs	r3, r1
 800552c:	07db      	lsls	r3, r3, #31
 800552e:	d428      	bmi.n	8005582 <__sflush_r+0xbe>
 8005530:	2300      	movs	r3, #0
 8005532:	6063      	str	r3, [r4, #4]
 8005534:	6923      	ldr	r3, [r4, #16]
 8005536:	6023      	str	r3, [r4, #0]
 8005538:	04d2      	lsls	r2, r2, #19
 800553a:	d505      	bpl.n	8005548 <__sflush_r+0x84>
 800553c:	1c43      	adds	r3, r0, #1
 800553e:	d102      	bne.n	8005546 <__sflush_r+0x82>
 8005540:	682b      	ldr	r3, [r5, #0]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d100      	bne.n	8005548 <__sflush_r+0x84>
 8005546:	6560      	str	r0, [r4, #84]	; 0x54
 8005548:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800554a:	602e      	str	r6, [r5, #0]
 800554c:	2900      	cmp	r1, #0
 800554e:	d0c5      	beq.n	80054dc <__sflush_r+0x18>
 8005550:	0023      	movs	r3, r4
 8005552:	3344      	adds	r3, #68	; 0x44
 8005554:	4299      	cmp	r1, r3
 8005556:	d002      	beq.n	800555e <__sflush_r+0x9a>
 8005558:	0028      	movs	r0, r5
 800555a:	f7ff fbf1 	bl	8004d40 <_free_r>
 800555e:	2000      	movs	r0, #0
 8005560:	6360      	str	r0, [r4, #52]	; 0x34
 8005562:	e7bc      	b.n	80054de <__sflush_r+0x1a>
 8005564:	2301      	movs	r3, #1
 8005566:	0028      	movs	r0, r5
 8005568:	47b8      	blx	r7
 800556a:	1c43      	adds	r3, r0, #1
 800556c:	d1c6      	bne.n	80054fc <__sflush_r+0x38>
 800556e:	682b      	ldr	r3, [r5, #0]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d0c3      	beq.n	80054fc <__sflush_r+0x38>
 8005574:	2b1d      	cmp	r3, #29
 8005576:	d001      	beq.n	800557c <__sflush_r+0xb8>
 8005578:	2b16      	cmp	r3, #22
 800557a:	d101      	bne.n	8005580 <__sflush_r+0xbc>
 800557c:	602e      	str	r6, [r5, #0]
 800557e:	e7ad      	b.n	80054dc <__sflush_r+0x18>
 8005580:	89a2      	ldrh	r2, [r4, #12]
 8005582:	2340      	movs	r3, #64	; 0x40
 8005584:	4313      	orrs	r3, r2
 8005586:	81a3      	strh	r3, [r4, #12]
 8005588:	e7a9      	b.n	80054de <__sflush_r+0x1a>
 800558a:	690e      	ldr	r6, [r1, #16]
 800558c:	2e00      	cmp	r6, #0
 800558e:	d0a5      	beq.n	80054dc <__sflush_r+0x18>
 8005590:	680f      	ldr	r7, [r1, #0]
 8005592:	600e      	str	r6, [r1, #0]
 8005594:	1bba      	subs	r2, r7, r6
 8005596:	9201      	str	r2, [sp, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	079b      	lsls	r3, r3, #30
 800559c:	d100      	bne.n	80055a0 <__sflush_r+0xdc>
 800559e:	694a      	ldr	r2, [r1, #20]
 80055a0:	60a2      	str	r2, [r4, #8]
 80055a2:	9b01      	ldr	r3, [sp, #4]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	dd99      	ble.n	80054dc <__sflush_r+0x18>
 80055a8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80055aa:	0032      	movs	r2, r6
 80055ac:	001f      	movs	r7, r3
 80055ae:	0028      	movs	r0, r5
 80055b0:	9b01      	ldr	r3, [sp, #4]
 80055b2:	6a21      	ldr	r1, [r4, #32]
 80055b4:	47b8      	blx	r7
 80055b6:	2800      	cmp	r0, #0
 80055b8:	dc06      	bgt.n	80055c8 <__sflush_r+0x104>
 80055ba:	2340      	movs	r3, #64	; 0x40
 80055bc:	2001      	movs	r0, #1
 80055be:	89a2      	ldrh	r2, [r4, #12]
 80055c0:	4240      	negs	r0, r0
 80055c2:	4313      	orrs	r3, r2
 80055c4:	81a3      	strh	r3, [r4, #12]
 80055c6:	e78a      	b.n	80054de <__sflush_r+0x1a>
 80055c8:	9b01      	ldr	r3, [sp, #4]
 80055ca:	1836      	adds	r6, r6, r0
 80055cc:	1a1b      	subs	r3, r3, r0
 80055ce:	9301      	str	r3, [sp, #4]
 80055d0:	e7e7      	b.n	80055a2 <__sflush_r+0xde>
 80055d2:	46c0      	nop			; (mov r8, r8)
 80055d4:	dfbffffe 	.word	0xdfbffffe

080055d8 <_fflush_r>:
 80055d8:	690b      	ldr	r3, [r1, #16]
 80055da:	b570      	push	{r4, r5, r6, lr}
 80055dc:	0005      	movs	r5, r0
 80055de:	000c      	movs	r4, r1
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d102      	bne.n	80055ea <_fflush_r+0x12>
 80055e4:	2500      	movs	r5, #0
 80055e6:	0028      	movs	r0, r5
 80055e8:	bd70      	pop	{r4, r5, r6, pc}
 80055ea:	2800      	cmp	r0, #0
 80055ec:	d004      	beq.n	80055f8 <_fflush_r+0x20>
 80055ee:	6a03      	ldr	r3, [r0, #32]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d101      	bne.n	80055f8 <_fflush_r+0x20>
 80055f4:	f7ff fa90 	bl	8004b18 <__sinit>
 80055f8:	220c      	movs	r2, #12
 80055fa:	5ea3      	ldrsh	r3, [r4, r2]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d0f1      	beq.n	80055e4 <_fflush_r+0xc>
 8005600:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005602:	07d2      	lsls	r2, r2, #31
 8005604:	d404      	bmi.n	8005610 <_fflush_r+0x38>
 8005606:	059b      	lsls	r3, r3, #22
 8005608:	d402      	bmi.n	8005610 <_fflush_r+0x38>
 800560a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800560c:	f7ff fb95 	bl	8004d3a <__retarget_lock_acquire_recursive>
 8005610:	0028      	movs	r0, r5
 8005612:	0021      	movs	r1, r4
 8005614:	f7ff ff56 	bl	80054c4 <__sflush_r>
 8005618:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800561a:	0005      	movs	r5, r0
 800561c:	07db      	lsls	r3, r3, #31
 800561e:	d4e2      	bmi.n	80055e6 <_fflush_r+0xe>
 8005620:	89a3      	ldrh	r3, [r4, #12]
 8005622:	059b      	lsls	r3, r3, #22
 8005624:	d4df      	bmi.n	80055e6 <_fflush_r+0xe>
 8005626:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005628:	f7ff fb88 	bl	8004d3c <__retarget_lock_release_recursive>
 800562c:	e7db      	b.n	80055e6 <_fflush_r+0xe>

0800562e <__swbuf_r>:
 800562e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005630:	0006      	movs	r6, r0
 8005632:	000d      	movs	r5, r1
 8005634:	0014      	movs	r4, r2
 8005636:	2800      	cmp	r0, #0
 8005638:	d004      	beq.n	8005644 <__swbuf_r+0x16>
 800563a:	6a03      	ldr	r3, [r0, #32]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d101      	bne.n	8005644 <__swbuf_r+0x16>
 8005640:	f7ff fa6a 	bl	8004b18 <__sinit>
 8005644:	69a3      	ldr	r3, [r4, #24]
 8005646:	60a3      	str	r3, [r4, #8]
 8005648:	89a3      	ldrh	r3, [r4, #12]
 800564a:	071b      	lsls	r3, r3, #28
 800564c:	d528      	bpl.n	80056a0 <__swbuf_r+0x72>
 800564e:	6923      	ldr	r3, [r4, #16]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d025      	beq.n	80056a0 <__swbuf_r+0x72>
 8005654:	6923      	ldr	r3, [r4, #16]
 8005656:	6820      	ldr	r0, [r4, #0]
 8005658:	b2ef      	uxtb	r7, r5
 800565a:	1ac0      	subs	r0, r0, r3
 800565c:	6963      	ldr	r3, [r4, #20]
 800565e:	b2ed      	uxtb	r5, r5
 8005660:	4283      	cmp	r3, r0
 8005662:	dc05      	bgt.n	8005670 <__swbuf_r+0x42>
 8005664:	0021      	movs	r1, r4
 8005666:	0030      	movs	r0, r6
 8005668:	f7ff ffb6 	bl	80055d8 <_fflush_r>
 800566c:	2800      	cmp	r0, #0
 800566e:	d11d      	bne.n	80056ac <__swbuf_r+0x7e>
 8005670:	68a3      	ldr	r3, [r4, #8]
 8005672:	3001      	adds	r0, #1
 8005674:	3b01      	subs	r3, #1
 8005676:	60a3      	str	r3, [r4, #8]
 8005678:	6823      	ldr	r3, [r4, #0]
 800567a:	1c5a      	adds	r2, r3, #1
 800567c:	6022      	str	r2, [r4, #0]
 800567e:	701f      	strb	r7, [r3, #0]
 8005680:	6963      	ldr	r3, [r4, #20]
 8005682:	4283      	cmp	r3, r0
 8005684:	d004      	beq.n	8005690 <__swbuf_r+0x62>
 8005686:	89a3      	ldrh	r3, [r4, #12]
 8005688:	07db      	lsls	r3, r3, #31
 800568a:	d507      	bpl.n	800569c <__swbuf_r+0x6e>
 800568c:	2d0a      	cmp	r5, #10
 800568e:	d105      	bne.n	800569c <__swbuf_r+0x6e>
 8005690:	0021      	movs	r1, r4
 8005692:	0030      	movs	r0, r6
 8005694:	f7ff ffa0 	bl	80055d8 <_fflush_r>
 8005698:	2800      	cmp	r0, #0
 800569a:	d107      	bne.n	80056ac <__swbuf_r+0x7e>
 800569c:	0028      	movs	r0, r5
 800569e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056a0:	0021      	movs	r1, r4
 80056a2:	0030      	movs	r0, r6
 80056a4:	f000 f806 	bl	80056b4 <__swsetup_r>
 80056a8:	2800      	cmp	r0, #0
 80056aa:	d0d3      	beq.n	8005654 <__swbuf_r+0x26>
 80056ac:	2501      	movs	r5, #1
 80056ae:	426d      	negs	r5, r5
 80056b0:	e7f4      	b.n	800569c <__swbuf_r+0x6e>
	...

080056b4 <__swsetup_r>:
 80056b4:	4b30      	ldr	r3, [pc, #192]	; (8005778 <__swsetup_r+0xc4>)
 80056b6:	b570      	push	{r4, r5, r6, lr}
 80056b8:	0005      	movs	r5, r0
 80056ba:	6818      	ldr	r0, [r3, #0]
 80056bc:	000c      	movs	r4, r1
 80056be:	2800      	cmp	r0, #0
 80056c0:	d004      	beq.n	80056cc <__swsetup_r+0x18>
 80056c2:	6a03      	ldr	r3, [r0, #32]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d101      	bne.n	80056cc <__swsetup_r+0x18>
 80056c8:	f7ff fa26 	bl	8004b18 <__sinit>
 80056cc:	230c      	movs	r3, #12
 80056ce:	5ee2      	ldrsh	r2, [r4, r3]
 80056d0:	b293      	uxth	r3, r2
 80056d2:	0711      	lsls	r1, r2, #28
 80056d4:	d423      	bmi.n	800571e <__swsetup_r+0x6a>
 80056d6:	06d9      	lsls	r1, r3, #27
 80056d8:	d407      	bmi.n	80056ea <__swsetup_r+0x36>
 80056da:	2309      	movs	r3, #9
 80056dc:	2001      	movs	r0, #1
 80056de:	602b      	str	r3, [r5, #0]
 80056e0:	3337      	adds	r3, #55	; 0x37
 80056e2:	4313      	orrs	r3, r2
 80056e4:	81a3      	strh	r3, [r4, #12]
 80056e6:	4240      	negs	r0, r0
 80056e8:	bd70      	pop	{r4, r5, r6, pc}
 80056ea:	075b      	lsls	r3, r3, #29
 80056ec:	d513      	bpl.n	8005716 <__swsetup_r+0x62>
 80056ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80056f0:	2900      	cmp	r1, #0
 80056f2:	d008      	beq.n	8005706 <__swsetup_r+0x52>
 80056f4:	0023      	movs	r3, r4
 80056f6:	3344      	adds	r3, #68	; 0x44
 80056f8:	4299      	cmp	r1, r3
 80056fa:	d002      	beq.n	8005702 <__swsetup_r+0x4e>
 80056fc:	0028      	movs	r0, r5
 80056fe:	f7ff fb1f 	bl	8004d40 <_free_r>
 8005702:	2300      	movs	r3, #0
 8005704:	6363      	str	r3, [r4, #52]	; 0x34
 8005706:	2224      	movs	r2, #36	; 0x24
 8005708:	89a3      	ldrh	r3, [r4, #12]
 800570a:	4393      	bics	r3, r2
 800570c:	81a3      	strh	r3, [r4, #12]
 800570e:	2300      	movs	r3, #0
 8005710:	6063      	str	r3, [r4, #4]
 8005712:	6923      	ldr	r3, [r4, #16]
 8005714:	6023      	str	r3, [r4, #0]
 8005716:	2308      	movs	r3, #8
 8005718:	89a2      	ldrh	r2, [r4, #12]
 800571a:	4313      	orrs	r3, r2
 800571c:	81a3      	strh	r3, [r4, #12]
 800571e:	6923      	ldr	r3, [r4, #16]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d10b      	bne.n	800573c <__swsetup_r+0x88>
 8005724:	21a0      	movs	r1, #160	; 0xa0
 8005726:	2280      	movs	r2, #128	; 0x80
 8005728:	89a3      	ldrh	r3, [r4, #12]
 800572a:	0089      	lsls	r1, r1, #2
 800572c:	0092      	lsls	r2, r2, #2
 800572e:	400b      	ands	r3, r1
 8005730:	4293      	cmp	r3, r2
 8005732:	d003      	beq.n	800573c <__swsetup_r+0x88>
 8005734:	0021      	movs	r1, r4
 8005736:	0028      	movs	r0, r5
 8005738:	f000 f866 	bl	8005808 <__smakebuf_r>
 800573c:	220c      	movs	r2, #12
 800573e:	5ea3      	ldrsh	r3, [r4, r2]
 8005740:	2001      	movs	r0, #1
 8005742:	001a      	movs	r2, r3
 8005744:	b299      	uxth	r1, r3
 8005746:	4002      	ands	r2, r0
 8005748:	4203      	tst	r3, r0
 800574a:	d00f      	beq.n	800576c <__swsetup_r+0xb8>
 800574c:	2200      	movs	r2, #0
 800574e:	60a2      	str	r2, [r4, #8]
 8005750:	6962      	ldr	r2, [r4, #20]
 8005752:	4252      	negs	r2, r2
 8005754:	61a2      	str	r2, [r4, #24]
 8005756:	2000      	movs	r0, #0
 8005758:	6922      	ldr	r2, [r4, #16]
 800575a:	4282      	cmp	r2, r0
 800575c:	d1c4      	bne.n	80056e8 <__swsetup_r+0x34>
 800575e:	0609      	lsls	r1, r1, #24
 8005760:	d5c2      	bpl.n	80056e8 <__swsetup_r+0x34>
 8005762:	2240      	movs	r2, #64	; 0x40
 8005764:	4313      	orrs	r3, r2
 8005766:	81a3      	strh	r3, [r4, #12]
 8005768:	3801      	subs	r0, #1
 800576a:	e7bd      	b.n	80056e8 <__swsetup_r+0x34>
 800576c:	0788      	lsls	r0, r1, #30
 800576e:	d400      	bmi.n	8005772 <__swsetup_r+0xbe>
 8005770:	6962      	ldr	r2, [r4, #20]
 8005772:	60a2      	str	r2, [r4, #8]
 8005774:	e7ef      	b.n	8005756 <__swsetup_r+0xa2>
 8005776:	46c0      	nop			; (mov r8, r8)
 8005778:	20000068 	.word	0x20000068

0800577c <_sbrk_r>:
 800577c:	2300      	movs	r3, #0
 800577e:	b570      	push	{r4, r5, r6, lr}
 8005780:	4d06      	ldr	r5, [pc, #24]	; (800579c <_sbrk_r+0x20>)
 8005782:	0004      	movs	r4, r0
 8005784:	0008      	movs	r0, r1
 8005786:	602b      	str	r3, [r5, #0]
 8005788:	f7fc fee4 	bl	8002554 <_sbrk>
 800578c:	1c43      	adds	r3, r0, #1
 800578e:	d103      	bne.n	8005798 <_sbrk_r+0x1c>
 8005790:	682b      	ldr	r3, [r5, #0]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d000      	beq.n	8005798 <_sbrk_r+0x1c>
 8005796:	6023      	str	r3, [r4, #0]
 8005798:	bd70      	pop	{r4, r5, r6, pc}
 800579a:	46c0      	nop			; (mov r8, r8)
 800579c:	20000310 	.word	0x20000310

080057a0 <memchr>:
 80057a0:	b2c9      	uxtb	r1, r1
 80057a2:	1882      	adds	r2, r0, r2
 80057a4:	4290      	cmp	r0, r2
 80057a6:	d101      	bne.n	80057ac <memchr+0xc>
 80057a8:	2000      	movs	r0, #0
 80057aa:	4770      	bx	lr
 80057ac:	7803      	ldrb	r3, [r0, #0]
 80057ae:	428b      	cmp	r3, r1
 80057b0:	d0fb      	beq.n	80057aa <memchr+0xa>
 80057b2:	3001      	adds	r0, #1
 80057b4:	e7f6      	b.n	80057a4 <memchr+0x4>
	...

080057b8 <__swhatbuf_r>:
 80057b8:	b570      	push	{r4, r5, r6, lr}
 80057ba:	000e      	movs	r6, r1
 80057bc:	001d      	movs	r5, r3
 80057be:	230e      	movs	r3, #14
 80057c0:	5ec9      	ldrsh	r1, [r1, r3]
 80057c2:	0014      	movs	r4, r2
 80057c4:	b096      	sub	sp, #88	; 0x58
 80057c6:	2900      	cmp	r1, #0
 80057c8:	da0c      	bge.n	80057e4 <__swhatbuf_r+0x2c>
 80057ca:	89b2      	ldrh	r2, [r6, #12]
 80057cc:	2380      	movs	r3, #128	; 0x80
 80057ce:	0011      	movs	r1, r2
 80057d0:	4019      	ands	r1, r3
 80057d2:	421a      	tst	r2, r3
 80057d4:	d013      	beq.n	80057fe <__swhatbuf_r+0x46>
 80057d6:	2100      	movs	r1, #0
 80057d8:	3b40      	subs	r3, #64	; 0x40
 80057da:	2000      	movs	r0, #0
 80057dc:	6029      	str	r1, [r5, #0]
 80057de:	6023      	str	r3, [r4, #0]
 80057e0:	b016      	add	sp, #88	; 0x58
 80057e2:	bd70      	pop	{r4, r5, r6, pc}
 80057e4:	466a      	mov	r2, sp
 80057e6:	f000 f84d 	bl	8005884 <_fstat_r>
 80057ea:	2800      	cmp	r0, #0
 80057ec:	dbed      	blt.n	80057ca <__swhatbuf_r+0x12>
 80057ee:	23f0      	movs	r3, #240	; 0xf0
 80057f0:	9901      	ldr	r1, [sp, #4]
 80057f2:	021b      	lsls	r3, r3, #8
 80057f4:	4019      	ands	r1, r3
 80057f6:	4b03      	ldr	r3, [pc, #12]	; (8005804 <__swhatbuf_r+0x4c>)
 80057f8:	18c9      	adds	r1, r1, r3
 80057fa:	424b      	negs	r3, r1
 80057fc:	4159      	adcs	r1, r3
 80057fe:	2380      	movs	r3, #128	; 0x80
 8005800:	00db      	lsls	r3, r3, #3
 8005802:	e7ea      	b.n	80057da <__swhatbuf_r+0x22>
 8005804:	ffffe000 	.word	0xffffe000

08005808 <__smakebuf_r>:
 8005808:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800580a:	2602      	movs	r6, #2
 800580c:	898b      	ldrh	r3, [r1, #12]
 800580e:	0005      	movs	r5, r0
 8005810:	000c      	movs	r4, r1
 8005812:	4233      	tst	r3, r6
 8005814:	d006      	beq.n	8005824 <__smakebuf_r+0x1c>
 8005816:	0023      	movs	r3, r4
 8005818:	3347      	adds	r3, #71	; 0x47
 800581a:	6023      	str	r3, [r4, #0]
 800581c:	6123      	str	r3, [r4, #16]
 800581e:	2301      	movs	r3, #1
 8005820:	6163      	str	r3, [r4, #20]
 8005822:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8005824:	466a      	mov	r2, sp
 8005826:	ab01      	add	r3, sp, #4
 8005828:	f7ff ffc6 	bl	80057b8 <__swhatbuf_r>
 800582c:	9900      	ldr	r1, [sp, #0]
 800582e:	0007      	movs	r7, r0
 8005830:	0028      	movs	r0, r5
 8005832:	f7ff faf1 	bl	8004e18 <_malloc_r>
 8005836:	2800      	cmp	r0, #0
 8005838:	d108      	bne.n	800584c <__smakebuf_r+0x44>
 800583a:	220c      	movs	r2, #12
 800583c:	5ea3      	ldrsh	r3, [r4, r2]
 800583e:	059a      	lsls	r2, r3, #22
 8005840:	d4ef      	bmi.n	8005822 <__smakebuf_r+0x1a>
 8005842:	2203      	movs	r2, #3
 8005844:	4393      	bics	r3, r2
 8005846:	431e      	orrs	r6, r3
 8005848:	81a6      	strh	r6, [r4, #12]
 800584a:	e7e4      	b.n	8005816 <__smakebuf_r+0xe>
 800584c:	2380      	movs	r3, #128	; 0x80
 800584e:	89a2      	ldrh	r2, [r4, #12]
 8005850:	6020      	str	r0, [r4, #0]
 8005852:	4313      	orrs	r3, r2
 8005854:	81a3      	strh	r3, [r4, #12]
 8005856:	9b00      	ldr	r3, [sp, #0]
 8005858:	6120      	str	r0, [r4, #16]
 800585a:	6163      	str	r3, [r4, #20]
 800585c:	9b01      	ldr	r3, [sp, #4]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d00c      	beq.n	800587c <__smakebuf_r+0x74>
 8005862:	0028      	movs	r0, r5
 8005864:	230e      	movs	r3, #14
 8005866:	5ee1      	ldrsh	r1, [r4, r3]
 8005868:	f000 f81e 	bl	80058a8 <_isatty_r>
 800586c:	2800      	cmp	r0, #0
 800586e:	d005      	beq.n	800587c <__smakebuf_r+0x74>
 8005870:	2303      	movs	r3, #3
 8005872:	89a2      	ldrh	r2, [r4, #12]
 8005874:	439a      	bics	r2, r3
 8005876:	3b02      	subs	r3, #2
 8005878:	4313      	orrs	r3, r2
 800587a:	81a3      	strh	r3, [r4, #12]
 800587c:	89a3      	ldrh	r3, [r4, #12]
 800587e:	433b      	orrs	r3, r7
 8005880:	81a3      	strh	r3, [r4, #12]
 8005882:	e7ce      	b.n	8005822 <__smakebuf_r+0x1a>

08005884 <_fstat_r>:
 8005884:	2300      	movs	r3, #0
 8005886:	b570      	push	{r4, r5, r6, lr}
 8005888:	4d06      	ldr	r5, [pc, #24]	; (80058a4 <_fstat_r+0x20>)
 800588a:	0004      	movs	r4, r0
 800588c:	0008      	movs	r0, r1
 800588e:	0011      	movs	r1, r2
 8005890:	602b      	str	r3, [r5, #0]
 8005892:	f7fc fe3d 	bl	8002510 <_fstat>
 8005896:	1c43      	adds	r3, r0, #1
 8005898:	d103      	bne.n	80058a2 <_fstat_r+0x1e>
 800589a:	682b      	ldr	r3, [r5, #0]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d000      	beq.n	80058a2 <_fstat_r+0x1e>
 80058a0:	6023      	str	r3, [r4, #0]
 80058a2:	bd70      	pop	{r4, r5, r6, pc}
 80058a4:	20000310 	.word	0x20000310

080058a8 <_isatty_r>:
 80058a8:	2300      	movs	r3, #0
 80058aa:	b570      	push	{r4, r5, r6, lr}
 80058ac:	4d06      	ldr	r5, [pc, #24]	; (80058c8 <_isatty_r+0x20>)
 80058ae:	0004      	movs	r4, r0
 80058b0:	0008      	movs	r0, r1
 80058b2:	602b      	str	r3, [r5, #0]
 80058b4:	f7fc fe3a 	bl	800252c <_isatty>
 80058b8:	1c43      	adds	r3, r0, #1
 80058ba:	d103      	bne.n	80058c4 <_isatty_r+0x1c>
 80058bc:	682b      	ldr	r3, [r5, #0]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d000      	beq.n	80058c4 <_isatty_r+0x1c>
 80058c2:	6023      	str	r3, [r4, #0]
 80058c4:	bd70      	pop	{r4, r5, r6, pc}
 80058c6:	46c0      	nop			; (mov r8, r8)
 80058c8:	20000310 	.word	0x20000310

080058cc <_init>:
 80058cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ce:	46c0      	nop			; (mov r8, r8)
 80058d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058d2:	bc08      	pop	{r3}
 80058d4:	469e      	mov	lr, r3
 80058d6:	4770      	bx	lr

080058d8 <_fini>:
 80058d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058da:	46c0      	nop			; (mov r8, r8)
 80058dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058de:	bc08      	pop	{r3}
 80058e0:	469e      	mov	lr, r3
 80058e2:	4770      	bx	lr
